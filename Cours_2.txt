                                    R√©alisez un site web dynamique avec PHP

D√©crivez les √©l√©ments de votre projet √† l'aide de variables

Bienvenue dans la partie 2 de ce cours, nous passons aux choses s√©rieuses ! Nous d√©marrons le projet fil rouge pour d√©velopper notre site web dynamique : un site de partage de recettes de cuisine. Et √ßa commence par une notion fondamentale : les variables.

Les variables sont indispensables √† tout langage de programmation, et en PHP on n'y √©chappe pas.

Pour pouvoir d√©velopper notre projet de partage, nous allons avoir besoin de structurer votre application autour d'objets qui la composent. C'est ce qu'on appelle des objets "m√©tiers".

Pour un site de partage de recettes de cuisine, c'est simple :

  - Des utilisateurs se connectent : ils ont un nom, un e-mail, un mot de passe, un √¢ge...

  - Ils consultent ou cr√©ent des recettes : elles ont un titre, un corps (la recette), un statut d'activation...

  - Et ainsi de suite pour chacun des objets qui constituent votre projet.

OK je vois, mais concr√®tement, qu'est-ce que c'est, une "variable" ?

J'y arrive‚Ä¶

Comprenez ce qu'est une variable

Rien qu'avec leur nom, vous devez vous dire que c'est quelque chose qui change tout le temps.

En effet, le propre d'une variable c'est de pouvoir varier.

Une variable, c'est une petite information stock√©e en m√©moire temporairement.

En PHP, la variable (l'information) existe tant que la page est en cours de g√©n√©ration. D√®s que la page PHP est g√©n√©r√©e, toutes les variables sont supprim√©es de la m√©moire car elles ne servent plus √† rien.

Ce n'est donc pas un fichier qui reste stock√© sur le disque dur, mais une petite information temporaire pr√©sente en m√©moire vive.

C'est √† vous de cr√©er des variables. Vous en cr√©ez quand vous en avez besoin pour retenir des informations.

Donnez toujours un nom et une valeur aux variables

Une variable est toujours constitu√©e de deux √©l√©ments :

  - son nom : pour pouvoir la reconna√Ætre, vous devez donner un nom √† votre variable. Par exemple age  ;

  - sa valeur : c'est l'information qu'elle contient, et qui peut changer. Par exemple :  17  .

Ici, je vous ai donn√© l'exemple d'une variable appel√©e age  qui a pour valeur  17  .

On peut modifier quand on veut la valeur de cette variable, faire des op√©rations dessus, etc. Et quand on en a besoin, on l'appelle (par son nom), et elle nous dit gentiment la valeur qu'elle contient.

Maintenant que vous comprenez √ßa, allons plus loin : il existe diff√©rents types de variables.

D√©couvrez les diff√©rents types de variables

Les variables sont capables de stocker diff√©rents types d'informations. On parle de types de donn√©es. Voici les principaux types √† conna√Ætre.

  - Les cha√Ænes de caract√®res (string) : c'est le nom informatique qu'on donne au texte. 

  - Les nombres entiers (int) : ce sont les nombres du type 1, 2, 3, 4, etc. On compte aussi parmi eux les 
    entiers relatifs : -1, -2, -3‚Ä¶

  - Les nombres d√©cimaux (float ) : ce sont les nombres √† virgule, comme 14,738. Attention, les nombres 
    doivent √™tre √©crits avec un point au lieu de la virgule (c'est la notation anglaise).

  - Les bool√©ens (bool ) : c'est un type tr√®s important qui permet de stocker soit vrai soit faux. 

  - Rien (NULL ) : aussi bizarre que cela puisse para√Ætre, on a parfois besoin de dire qu'une variable ne 
    contient rien. Ce n'est pas vraiment un type de donn√©es, mais plut√¥t l'absence de type.

Cela devrait vous donner une id√©e de tout ce que PHP est capable de stocker en m√©moire. Ces types suffiront pour la cr√©ation de notre site !

Maintenant, allons-y !

OK mais comment cr√©er une variable et comment afficher ce qu'elle contient ?

C'est justement ce que j'allais vous expliquer. üòé

Affectez une valeur √† une variable

Regardez ce code d'exemple :

<?php
$userAge = 17;
?>

Avec ce code PHP, on vient en fait de cr√©er une variable :

  - son nom est userAge  ;

  - sa valeur est 17  .

Notez qu'on ne peut pas mettre d'espace dans un nom de variable. On utilise donc une majuscule pour "d√©tacher" visuellement les mots et les rendre plus lisibles.

C'est ce que l'on appelle la convention camelCase (cela fait r√©f√©rence aux bosses d'un chameau).

Quand vous nommez des variables, √©vitez les accents, les c√©dilles et tout autre symbole : PHP ne les appr√©cie pas trop‚Ä¶

C'est pour cela que j'ai √©crit age et non  √¢ge  .

Analysons dans le d√©tail le code qu'on vient de voir.

  - D'abord, on √©crit le symbole "dollar" ($) : il pr√©c√®de toujours le nom d'une variable. C'est comme un 
    signe de reconnaissance, si vous pr√©f√©rez : √ßa permet de dire √† PHP "J'utilise une variable". 

  - Ensuite, il y a le signe "√©gal" (= ) : celui-l√†, c'est logique, c'est pour dire que  $userAge  est √©gal √†‚Ä¶

  - √Ä la suite, il y a la valeur de la variable, ici 17.

  - Enfin, il y a l'incontournable point-virgule ( ;) qui permet de terminer l'instruction.

OK super, mais concr√®tement, qu'est-ce que le code pr√©c√©dent afficherait ?

Rien du tout !

Rien ne s'affiche tant que vous n'utilisez pas  echo  .

L√†, le serveur a juste cr√©√© la variable temporairement en m√©moire, mais il n'a rien fait d'autre.

Supposons maintenant que l'on √©crive ceci :

<?php
$userAge = 17; // La variable est cr√©√©e et vaut 17
$userAge = 23; // La variable est modifi√©e et vaut 23
$userAge = 55; // La variable est modifi√©e et vaut 55
?>

Que se passera-t-il ?

La variable $userAge  va √™tre cr√©√©e et prendre pour valeur, dans l'ordre : 17, 23, puis 55.

Tout cela va tr√®s vite : l'ordinateur √©tant tr√®s rapide, vous n'aurez pas le temps de dire ¬´ ouf ¬ª que tout ce code PHP aura √©t√© ex√©cut√©.

Comme tout √† l'heure, rien ne s'affiche. Seulement, quelque part dans la m√©moire de l'ordinateur, une petite zone nomm√©e userAge vient de prendre la valeur 17, puis 23, puis 55.

Utilisez les types de donn√©es

Vous vous souvenez des types de donn√©es dont je vous ai parl√© il y a quelques minutes ? Lesstring , int , float ...

Voici un exemple de variable pour chacun de ces types.

Le type string  (cha√Æne de caract√®res)
Ce type permet de stocker du texte.

Pour cela, vous devez entourer votre texte de :

  - guillemets doubles  ""  ;

  - ou de guillemets simples ''  (attention, ce sont des apostrophes).

Par exemple, pour conserver en m√©moire les noms et mails de nos utilisateurs :

<?php
$fullname = "Mathieu Nebra";
$email = 'mathieu.nebra@exemple.com';
?>

Attention, petit pi√®ge : si vous voulez ins√©rer un guillemet simple alors que le texte est entour√© de guillemets simples, il faut l'√©chapper en ins√©rant un antislash devant. Il en va de m√™me pour les guillemets doubles.

Voici un exemple pour bien comprendre :

<?php
$variable = "Mon \"nom\" est Mathieu";
$variable = 'Je m\'appelle Mathieu';
?>

En effet, si vous oubliez de mettre un antislash, PHP va croire que c'est la fin de la cha√Æne et il ne comprendra pas le texte qui suivra (et vous aurez en fait un message Parse error).

Vous pouvez en revanche ins√©rer sans probl√®me des guillemets simples au milieu de guillemets doubles, et inversement :

<?php
$variable = 'Mon "nom" est Mathieu';
$variable = "Je m'appelle Mathieu";
?>

La diff√©rence est subtile, faites attention. Il y a d'ailleurs une diff√©rence plus importante entre les deux types de guillemets, dont nous parlerons plus loin.

Le type int  (nombre entier)

Il suffit tout simplement d'√©crire le nombre que vous voulez stocker, sans guillemets :

<?php
$userAge = 17;
?>

Le type float  (nombre d√©cimal)

Vous devez √©crire votre nombre avec un point au lieu d'une virgule. C'est la notation anglaise.

<?php
$price = 57.3;
?>

Le type bool  (bool√©en)

Pour dire si une variable vaut vrai ou faux, vous devez √©crire le mot true  ou false  sans guillemets autour (ce n'est pas une cha√Æne de caract√®res !) :

<?php
$isAuthor = true;
$isAdministrator = false;
?>

Une variable vide avec NULL

Si vous voulez cr√©er une variable qui ne contient rien, vous devez lui passer le mot-cl√© NULL  (vous pouvez aussi l'√©crire en minuscules :  null  ).

<?php
$noValue = NULL;
?>

Cela sert simplement √† indiquer que la variable ne contient rien, tout du moins pour le moment.

Bon, nous avons appris √† cr√©er des variables et √† stocker des informations √† l'int√©rieur. Mais pour le moment, aucun de nos codes sources n'affiche quoi que ce soit.

Voyons donc comment faire.

Affichez le contenu d'une variable

Vous vous souvenez que l'on peut afficher du texte avec echo  ?

On peut aussi s'en servir pour afficher la valeur d'une variable !

<?php
$fullname = 'Mathieu Nebra';
echo $fullname;
?>

Comme vous le voyez, il suffit d'√©crire le nom de la variable que vous voulez afficher.

Au fait, on ne doit pas mettre de guillemets apr√®s le echo, comme tu nous as appris ?

Non, quand il s'agit d'une variable, on ne met pas de guillemets autour.

Cr√©ez un fichier PHP avec ce code source pour le tester. Inutile de mettre tout le code HTML autour, ce n'est pas grave, ce ne sera pas une ¬´ vraie ¬ª page HTML valide ; mais c'est bien suffisant pour nos tests.

Le contenu qui se trouve √† l'int√©rieur de la variable s'affiche dans la page (ici, Mathieu Nebra).

Concat√©nez une variable

Non, ce n'est pas une insulte. Cela signifie assemblage. ;-)

En fait, √©crire "Mathieu Nebra" tout seul comme on l'a fait n'est pas tr√®s parlant. On aimerait √©crire du texte autour pour dire : ¬´ Bienvenue Mathieu Nebra ¬ª. La concat√©nation est justement un moyen d'assembler du texte et des variables.

Comment faire cela ?

Les petits malins auront l'id√©e d'√©crire trois instructions echo  :

<?php
$fullname = "Mathieu Nebra";
echo "Bonjour ";
echo $fullname;
echo " et bienvenue sur le site !";
?>

Vous pouvez tester et v√©rifier dans votre navigateur que √ßa fonctionne.

Mais il y a plus malin : on peut tout faire sur une ligne.

Pour cela, il y a deux m√©thodes :

Avec des guillemets simples.

Ou avec guillemets doubles.

Et c'est l√† qu'on va voir, qu'entre les deux, il y a une diff√©rence !

Effectuez l'interpolation avec des guillemets doubles 
Attendez, on parlait de concat√©nation, mais qu'est-ce que c'est que cette interpolation et pourquoi devrais-je m'en soucier en PHP ?

Eh bien, l'interpolation en PHP vous permet d'inclure directement des variables dans une cha√Æne de caract√®res sans avoir √† les concat√©ner s√©par√©ment, ce qui rend votre code plus lisible et concis.

Concr√®tement, essayez ce code :

<?php
    $fullname = "Mathieu Nebra";
    echo "Bonjour {$fullname} et bienvenue sur le site !";
?>

√áa affiche :  Bonjour Mathieu Nebra et bienvenue sur le site !

Attention √† ne pas oublier d'entourer la variable d'accolades pour √©viter les erreurs.

Dans cet exemple,  echo "Bonjour, $fullname123!";  nous aurons un message d'erreur indiquant que la variable  $fullname123  n'est pas d√©finie. Maintenant, si nous ajoutons les accolades  echo "Bonjour, {$fullname}123!";  alors la variable est interpr√©t√©e correctement et nous aurons "Bonjour, Mathieu Nebra123!".

En effet, lorsque vous utilisez des guillemets doubles, les variables qui se trouvent √† l'int√©rieur sont analys√©es et remplac√©es par leur vraie valeur.

Pratique, non?

Concat√©nez avec des guillemets simples
Si vous √©crivez le code pr√©c√©dent entre guillemets simples, vous allez avoir une dr√¥le de surprise :

<?php
    $fullname = 'Mathieu Nebra';
    echo 'Bonjour {$fullname} et bienvenue sur le site !'; // ERREUR !
?>

√áa affiche :   Bonjour {$fullname} et bienvenue sur le site !  .

Mis√©ricorde ! On ne peut pas concat√©ner du texte avec des guillemets simples ?

Eh bien, si ! Mais cette fois, il va falloir √©crire la variable en dehors des guillemets et s√©parer les √©l√©ments les uns des autres √† l'aide d'un point. Regardez :

<?php
    $fullname = 'Mathieu Nebra';
    echo 'Bonjour ' . $fullname . ' et bienvenue sur le site !'; // OK
?>

Cette fois, √ßa affiche bien comme on voulait.

OK, j'ai vu comment concat√©ner avec des guillemets simples, mais dans quels cas devrais-je utiliser l'interpolation ou la concat√©nation ?

En r√®gle g√©n√©rale, on utilise l'interpolation lorsqu'on a besoin d'incorporer des variables directement dans une cha√Æne de caract√®res de mani√®re propre et concise. C'est id√©al pour rendre le code plus lisible.

En revanche, s'il y a des expressions complexes, des conditions ou des op√©rations √† effectuer pendant la concat√©nation, alors la concat√©nation traditionnelle avec des guillemets simples reste une option solide. L'essentiel est de choisir l'approche qui rend le code le plus clair et le plus maintenable en fonction du contexte du projet.

Faites des calculs simples

On va maintenant faire travailler votre ordinateur, et vous allez voir qu'il encaisse les calculs sans broncher. Eh oui, PHP sait aussi faire des calculs !
Oh je vous rassure : on ne va pas faire des calculs tordus, juste des additions, des soustractions, des multiplications et des divisions. C'est du niveau de tout le monde, non ? üò¨üòÑ

Ici, comme vous vous en doutez, on ne va travailler que sur des variables qui contiennent des nombres.

Les op√©rations de base : addition, soustraction‚Ä¶
Les signes √† conna√Ætre pour faire les quatre op√©rations de base (vous les trouverez sur votre pav√© num√©rique, √† droite du clavier, en principe) sont repr√©sent√©s par le tableau suivant. En compl√©ment vous avez l'op√©ration modulo, c'est-√†-dire le reste d'une division euclidienne.

Apr√®s, pour vous en servir, √ßa coule de source. Voici quelques exemples :

<?php
$number = 2 + 4; // $number prend la valeur 6
$number = 5 - 1; // $number prend la valeur 4
$number = 3 * 5; // $number prend la valeur 15
$number = 10 / 2; // $number prend la valeur 5

// Allez on rajoute un peu de difficult√©
$number = 3 * 5 + 1; // $number prend la valeur 16
$number = (1 + 2) * 2; // $number prend la valeur 6
?>

Allez quoi, boudez pas, un peu de calcul mental √ßa n'a jamais fait de mal √† personne.
V√©rifiez mes calculs : comme vous pouvez le voir il n'y a rien de bien compliqu√© dans tout √ßa.

Seulement, il ne faut pas avoir peur de ¬´ jongler ¬ª avec les variables.
Voici des calculs avec plusieurs variables :

<?php
$number = 10;
$result = ($number + 5) * $number; // $result prend la valeur 150
?>

C'est de la pure logique, je ne peux rien vous dire de plus.
Si vous avez compris ces bouts de code, vous avez tout compris.

Le modulo
Il est possible de faire un autre type d'op√©ration un peu moins connu : le modulo. Cela repr√©sente le reste de la division enti√®re.

Par exemple, 6 / 3 = 2 et il n'y a pas de reste. En revanche, 7 / 3 = 2 (car le nombre 3 ¬´ rentre ¬ª 2 fois dans le nombre 7) et il reste 1. Vous avez fait ce type de calculs √† l'√©cole primaire, souvenez-vous !

Le modulo permet justement de r√©cup√©rer ce reste :

<?php
$number = 10 % 5; // $number prend la valeur 0 car la division tombe juste
$number = 10 % 3; // $number prend la valeur 1 car il reste 1
?>
OK g√©nial, et les autres op√©rations ?

Je passe sous silence les op√©rations plus complexes telles que :

 - la racine carr√©e ;

 - l'exponentielle ;

 - la factorielle ;

 - etc.

Toutes ces op√©rations peuvent √™tre r√©alis√©es en PHP mais il faudra passer par ce qu'on appelle des fonctions, une notion que l'on d√©couvrira plus tard. Les op√©rations basiques que l'on vient de voir sont amplement suffisantes pour la programmation PHP de tous les jours.

En r√©sum√©

- Une variable est une petite information qui reste stock√©e en m√©moire le temps de la g√©n√©ration de la page 
  PHP. Elle a un nom et une valeur.

- Il existe plusieurs types de variables qui permettent de stocker diff√©rents types d'informations : du texte 
  ( string  ), des nombres entiers ( int  ), des nombres d√©cimaux (float), des bool√©ens pour stocker vrai ou 
  faux ( bool  ), etc.

- En PHP, un nom de variable commence par le symbole dollar : $age  , par exemple.

- La valeur d'une variable peut √™tre affich√©e avec l'instruction echo  .

- Il est possible de faire des calculs math√©matiques entre plusieurs variables : addition, soustraction, 
  multiplication‚Ä¶

Maintenant que vous savez comment on travaille avec les variables, nous allons nous pencher sur un autre concept important : les conditions.

##############################################################################################################

Adaptez le comportement de votre application √† l'aide des conditions

Ce chapitre est d'une importance capitale. En effet, vous serez tr√®s souvent amen√© √† employer des conditions dans vos pages web PHP.

Dans notre projet fil rouge de cr√©ation de site de recettes, on voudra afficher des informations en fonction du contexte. Par exemple :

  - autoriser l'auteur d'une recette √† la modifier, mais pas les autres utilisateurs ;

  - afficher seulement la liste des recettes qui auront √©t√© v√©rifi√©es par un administrateur ;

  - etc.

Les conditions, c'est ce qui va r√©ellement vous permettre de cr√©er une application dynamique. √Ä la fin de ce chapitre, vous aurez les bases n√©cessaires pour autoriser l'affichage d'une recette ou l'acc√®s d'un utilisateur √† une page selon les conditions de votre application.

Appropriez-vous la structure de base :  if‚Ä¶ else

Une condition peut √™tre √©crite en PHP sous diff√©rentes formes. On parle de structures conditionnelles.

Celle que je vais vous apprendre √† utiliser maintenant est la principale √† conna√Ætre. Nous en verrons d'autres un peu plus loin.

Pour apprendre √† utiliser if‚Ä¶ else  , nous allons :

  1. D'abord voir les symboles qu'il faut conna√Ætre : vous allez devoir retenir quelques symboles qui 
     permettent de faire des comparaisons. Soyez attentif, car ils vous seront utiles pour les conditions.

  2. Ensuite voir comment fonctionne une condition avec if‚Ä¶ else  . Inutile de vous dire qu'il est 
     indispensable de bien comprendre cela.

  3. Apr√®s, on compliquera un peu nos conditions avec les conditions multiples. Vous allez voir en effet qu'on 
     peut utiliser plusieurs conditions √† la fois.

  4. Et enfin, l'astuce bonus : parce qu'il y a toujours un bonus pour r√©compenser ceux qui ont bien suivi 
     jusqu'au bout !

Retenez les symboles √† conna√Ætre

Voici les symboles que nous serons amen√©s √† utiliser. Essayez de bien les retenir, ils vous seront utiles :

Symbole      Signification

===          Est √©gal √†

>            Est sup√©rieur √†

<            Est inf√©rieur √†

>=           Est sup√©rieur ou √©gal √†

<=           Est inf√©rieur ou √©gal √†

!==          Est diff√©rent de


Il y a trois symboles ¬´ √©gal ¬ª ( === ) sur la premi√®re ligne.

Il ne faut pas confondre √ßa avec le simple =  (que je vous ai appris dans le chapitre sur les variables).

Ici, le triple √©gal sert √† tester l'√©galit√©, √† dire ¬´ Si c'est √©gal √†‚Ä¶ ¬ª. Dans les conditions, on utilisera toujours le triple √©gal ( ===  ).

Les symboles ¬´ sup√©rieur ¬ª ( >  ) et ¬´ inf√©rieur ¬ª ( <  ) sont situ√©s en bas √† gauche de votre clavier.

Utilisez la structure  if‚Ä¶ else

Voici ce qu'on doit √©crire, dans l'ordre, pour utiliser cette condition.

  - Pour introduire une condition, on utilise le mot if qui signifie ¬´ si ¬ª, en anglais.

  - On ajoute √† la suite entre parenth√®ses la condition en elle-m√™me (vous allez voir que vous pouvez inventer 
    une infinit√© de conditions).

  - Enfin, on ouvre des accolades √† l'int√©rieur desquelles on placera les instructions √† ex√©cuter si la 
    condition est remplie.

Puisqu'un exemple vaut toujours mieux qu'un long discours :

<?php
$isEnabled = true; // La condition d'acc√®s

if ($isEnabled === true) {
    echo "Vous √™tes autoris√©(e) √† acc√©der au site ‚úÖ";
}
?>

Ici, on demande √† PHP :

Si la variable $isEnabled est vraie, affiche ¬´ Vous √™tes autoris√©(e) √† acc√©der au site ‚úÖ ¬ª.

Vous remarquerez que dans la quasi-totalit√© des cas, c'est sur une variable qu'on fait la condition.

Ce qui compte ici, c'est qu'il y a deux possibilit√©s :

   1. Soit la condition est remplie et alors on affiche quelque chose.

   2. Sinon, on saute les instructions entre accolades, on ne fait rien.

Bon, on peut quand m√™me am√©liorer notre exemple :

<?php
$isEnabled = true;

if ($isEnabled === true) {
    echo "Vous √™tes autoris√©(e) √† acc√©der au site ‚úÖ";
}
else {
    echo "Acc√®s refus√© ‚ùå ";
}
?>

Comment marche ce code ?

Tout d'abord, j'ai mis plusieurs instructions entre accolades. Ensuite, vous avez remarqu√© que j'ai ajout√© le mot else  (¬´ sinon ¬ª). 

Essayez ce bout de code en modifiant la valeur de $isEnabled (sur la premi√®re ligne).

Vous allez voir que le message qui s'affiche change en fonction de la valeur que vous indiquez !

Bien entendu, vous mettez les instructions que vous voulez entre accolades.

Ici, par exemple, j'ai donn√© une valeur diff√©rente √† la variable $isAllowedToEnter apr√®s avoir affich√© un message (une valeur qui pourrait nous servir par la suite) :

<?php
$isAllowedToEnter = "Oui";

// SI on a l'autorisation d'entrer
if ($isAllowedToEnter === "Oui") {
    // instructions √† ex√©cuter quand on est autoris√© √† entrer
} // SINON SI on n'a pas l'autorisation d'entrer
elseif ($isAllowedToEnter === "Non") {
    // instructions √† ex√©cuter quand on n'est pas autoris√© √† entrer
} // SINON (la variable ne contient ni Oui ni Non, on ne peut pas agir)
else {
    echo "Euh, je ne comprends pas ton choix, tu peux me le rappeler s'il te pla√Æt ?";
}
?>

Ouh l√†, √ßa commence √† se compliquer un tantinet, non ?

La principale nouveaut√© ici, c'est le mot-cl√© elseif  qui signifie ¬´ sinon si ¬ª.

Dans l'ordre, PHP rencontre les conditions suivantes :

  1. Si $isAllowedToEnter est √©gale √† ¬´ Oui ¬ª, tu ex√©cutes ces instructions‚Ä¶

  2. Sinon, si $isAllowedToEnter est √©gale √† ¬´ Non ¬ª, tu ex√©cutes ces autres instructions‚Ä¶

  3. Sinon, tu redemandes l'√¢ge pour savoir si on a ou non l'autorisation d'entrer.

Pour v√©rifier si la variable est vide, vous pouvez taper : if ($variable === NULL)

√âtudiez le cas des bool√©ens

Si on regarde bien le dernier code source (avec $isAllowedToEnter ), il serait plus adapt√© d'utiliser des bool√©ens.

C'est quoi √ßa d√©j√† ?

Les bool√©ens sont ces variables qui valent :

  - soit true  (vrai) ;

  - soit false  (faux).

Voici comment on teste une variable bool√©enne :

<?php
$isAllowedToEnter = true;

if ($isAllowedToEnter) {
    echo "Bienvenue petit nouveau. :o)";
}
else {
    echo "T'as pas le droit d'entrer !";
}
?>

L'un des avantages des bool√©ens, c'est qu'ils sont particuli√®rement adapt√©s aux conditions.

Pourquoi ?

Parce qu'en fait vous n'√™tes pas oblig√© d'ajouter le=== true. 

PHP comprend qu'il faut qu'il v√©rifie si $isAllowedToEnter vaut true.

Les avantages des bool√©ens :

  - c'est plus rapide √† √©crire pour vous ;

  - √ßa se comprend bien mieux.

En effet, si vous ¬´ lisez ¬ª la premi√®re ligne, √ßa donne :

¬´ SI on a l'autorisation d'entrer‚Ä¶ ¬ª.

C'est donc un raccourci √† conna√Ætre quand on travaille sur des bool√©ens.

Oui, mais ta m√©thode ¬´ courte ¬ª ne marche pas si on veut v√©rifier si le bool√©en vaut faux. Comment on fait avec la m√©thode courte, hein ?

Il y a un symbole qui permet de v√©rifier si la variable vaut false : le point d'exclamation (!).

On √©crit :

<?php
$isAllowedToEnter = true;

// Si pas autoris√©
if (! $isAllowedToEnter) {

}
?>

C'est une autre fa√ßon de faire.

Si vous pr√©f√©rez mettre if ($isAllowedToEnter === false)  c'est tout aussi bien, mais la m√©thode ¬´ courte ¬ª est plus lisible.

Posez des conditions multiples

Ce qu'on va essayer de faire, c'est de poser plusieurs conditions √† la fois. Pour cela, on aura besoin de nouveaux mots-cl√©s. Voici les principaux √† conna√Ætre :

Mot-cl√©      Signification       Symbole √©quivalent

AND             Et                  &&

OR              Ou                  ||

Le symbole √©quivalent pour OR est constitu√© de deux barres verticales.

Pour taper une barre verticale, appuyez sur les touches ¬´ Alt Gr ¬ª et ¬´ 6 ¬ª en m√™me temps (sur un clavier AZERTY fran√ßais) ou ¬´ Alt Gr ¬ª et ¬´ & ¬ª (sur un clavier AZERTY belge). Sur Mac, il faut faire ‚å• + ‚áß + L.

La premi√®re colonne contient le mot-cl√© en anglais, la troisi√®me son √©quivalent en symbole. Voici un premier exemple :

<?php
$isEnabled = true;
$isOwner = false;

if ($isEnabled && $isOwner) {
    echo 'Acc√®s √† la recette valid√© ‚úÖ';
} else {
    echo 'Acc√®s √† la recette interdit ! ‚ùå';
}

C'est tout simple, en fait, et √ßa se comprend tr√®s bien : si l'utilisateur est actif et qu'il est l'auteur, il peut acc√©der √† la recette valid√©e. Sinon, il verra s'afficher un message de refus.

Bon allez, un dernier exemple avec||  pour que vous l'ayez vu au moins une fois, et on arr√™te l√†.

<?php
$isEnabled = true;
$isOwner = false;
$isAdmin = true;

if (($isEnabled && $isOwner) || $isAdmin) {
    echo 'Acc√®s √† la recette valid√© ‚úÖ';
} else {
    echo 'Acc√®s √† la recette interdit ! ‚ùå';
}

Nous rajoutons une condition suppl√©mentaire : soit la condition pr√©c√©dente s'applique, soit l'utilisateur concern√© est un administrateur.

Utilisez cette astuce bonus

Avec les conditions, il y a une astuce √† conna√Ætre.
Sachez que les deux codes ci-dessous donnent exactement le m√™me r√©sultat :

<?php
$chickenRecipesEnabled = true;

if ($chickenRecipesEnabled) {
    echo '<h1>Liste des recettes √† base de poulet</h1>';
}
?>

<?php $chickenRecipesEnabled = true; ?>

<?php if ($chickenRecipesEnabled): ?> <!-- Ne pas oublier le ":" -->

<h1>Liste des recettes √† base de poulet</h1>

<?php endif; ?><!-- Ni le ";" apr√®s le endif -->

Comme vous le voyez, dans le second cas on n'a pas utilis√© de  echo  .

La syntaxe pour utiliser la condition diff√®re un peu :

  - Il n'y a pas d'accolade.

  - On ajoute  :  apr√®s la parenth√®se fermante de l'instruction  if  .

  - Et il faut ajouter une instruction  endif;  .

Rassurez-vous : nous reviendrons sur cette syntaxe un peu plus tard dans ce cours.

Nous aurons d'ailleurs bient√¥t l'occasion de pratiquer un peu, et vous verrez que les conditions sont souvent indispensables.

Utilisez la condition switch pour optimiser votre code

En th√©orie, les structures √† base de if‚Ä¶ elseif‚Ä¶ else que je viens de vous montrer suffisent pour traiter n'importe quelle condition.

Mais alors, pourquoi se compliquer la vie avec une autre structure ?

Pour vous montrer l'int√©r√™t de switch ! Vous allez bient√¥t comprendre‚Ä¶

Regardez cet exemple √† base de if  et de elseif  :

<?php
$grade = 16;

if ($grade === 0) {
    echo "Il faudra revoir tout le cours !";
}

elseif ($grade === 5) {
    echo "Tu dois r√©viser plusieurs chapitres";
}

elseif ($grade === 7) {
    echo "Il te manque quelques r√©visions pour atteindre la moyenne";
}

elseif ($grade === 10) {
    echo "Tu as pile poil la moyenne, c'est un peu juste‚Ä¶";
}

elseif ($grade === 12) {
    echo "Tu es assez bon";
}

elseif ($grade === 16) {
    echo "Tu te d√©brouilles tr√®s bien !";
}

elseif ($grade === 20) {
    echo "Excellent travail, c'est parfait !";
}

else {
    echo "D√©sol√©, je n'ai pas de message √† afficher pour cette note";
}
?>

Comme vous le voyez : c'est lourd, long, et r√©p√©titif.

Dans ce cas, on peut utiliser une autre structure plus souple : c'est switch !

Voici le m√™me exemple avec switch  (le r√©sultat est le m√™me, mais le code est plus adapt√©) :

<?php
$grade = 10;

switch ($grade) // on indique sur quelle variable on travaille
{ 
    case 0: // dans le cas o√π $grade vaut 0
        echo "Il faudra revoir tout le cours !";
    break;
    
    case 5: // dans le cas o√π $grade vaut 5
        echo "Tu dois r√©viser plusieurs modules";
    break;
    
    case 7: // dans le cas o√π $grade vaut 7
        echo "Il te manque quelques r√©visions pour atteindre la moyenne ";
    break;
    
    case 10: // etc. etc.
        echo "Tu as pile poil la moyenne, c'est un peu juste‚Ä¶";
    break;
    
    case 12:
        echo "Tu es assez bon";
    break;
    
    case 16:
        echo "Tu te d√©brouilles tr√®s bien !";
    break;
    
    case 20:
        echo "Excellent travail, c'est parfait !";
    break;
    
    default:
        echo "D√©sol√©, je n'ai pas de message √† afficher pour cette note";
}
?>

Testez ce code : essayez de changer la note (dans la premi√®re instruction) pour voir comment PHP r√©agit ! Et si vous voulez apporter quelques modifications √† ce code (vous allez voir qu'il n'est pas parfait), n'h√©sitez pas, √ßa vous fera de l'entra√Ænement !

Bon alors, qu'est-ce qui est diff√©rent ?

  - Il y a beaucoup moins d'accolades : elles marquent seulement le d√©but et la fin du  switch  .

  - On indique au d√©but du switch sur quelle variable on travaille, ici $grade. On dit √† PHP :

Je vais analyser la valeur de  $grade  .

  - On utilise des case pour analyser chaque cas : case 0 ,case 10 , etc. Cela signifie :

Dans le cas o√π la valeur est 0‚Ä¶ Dans le cas o√π la valeur est 10‚Ä¶

Quel est l'avantage d'utiliser  switch  ?

On n'a plus besoin de mettre le triple √©gal !

Ah ben super, on peut l'utiliser avec les autres symboles aussi ?

Non‚Ä¶ Cela ne marche pas avec les autres symboles :< > <= >= !== 

Le switch ne peut tester que l'√©galit√©.

Le mot-cl√© default √† la fin est un peu l'√©quivalent du  else  .

C'est le message qui s'affiche par d√©faut, quelle que soit la valeur de la variable.

Il y a cependant une chose importante √† savoir :

Supposons dans notre exemple que la note soit de 10.

PHP va lire :

case 0 ? Non. Je saute. 

case 5 ? Non plus. Je saute. 

case 7 ? Non plus. Je saute. 

case 10 ? Oui, j'ex√©cute les instructions.

Mais contrairement aux elseif ,  PHP ne s'arr√™te pas l√† et continue √† lire les instructions des cases qui suivent ! 

 - case 12 

 - case 16 

   - etc.

Pour emp√™cher cela, utilisez l'instruction break !

L'instruction break  demande √† PHP de sortir du  switch  .

D√®s que PHP tombe sur break , il sort des accolades et donc il ne lit pas les case qui suivent.

En pratique, on utilise tr√®s souvent un break car sinon, PHP lit des instructions qui suivent et qui ne conviennent pas.

Essayez d'enlever les break dans le code pr√©c√©dent, vous allez comprendre pourquoi ils sont indispensables !

Quand doit-on choisir if  ?

Et quand doit-on choisir switch ?

C'est surtout un probl√®me de pr√©sentation et de clart√© :

  1. Pour une condition simple et courte, on utilise le  if  .

  2. Et quand on a une s√©rie de conditions √† analyser, on pr√©f√®re utiliser switch pour rendre le code plus clair.

D√©couvrez les ternaires : des conditions condens√©es

Il existe une autre forme de condition, beaucoup moins fr√©quente, mais que je vous pr√©sente quand m√™me car vous pourriez un jour ou l'autre tomber dessus. Il s'agit de ce qu'on appelle les ternaires.

Un ternaire est une condition condens√©e qui sert √† faire deux choses sur une seule ligne :

   1. Tester la valeur d'une variable dans une condition.

   2. Affecter une valeur √† une variable selon que la condition est vraie ou non.

Prenons cet exemple √† base de if‚Ä¶ else  qui met un bool√©en $majeur  √† vrai ou faux selon l'√¢ge du visiteur :

<?php
$userAge = 24;

if ($userAge >= 18) {
	$isAdult = true;
}
else {
	$isAdult = false;
}
?>

On peut faire la m√™me chose en une seule ligne gr√¢ce √† une structure ternaire :

<?php
$userAge = 24;

$isAdult = ($userAge >= 18) ? true : false;

// Ou mieux, dans ce cas pr√©cis
$isAdult = ($userAge >= 18);
?>

Ici, tout notre test pr√©c√©dent a √©t√© fait sur une seule ligne !

La condition test√©e est $userAge >= 18  .

Si c'est vrai, alors la valeur indiqu√©e apr√®s le point d'interrogation (ici true) sera affect√©e √† la variable  $isAdult  .

Sinon, c'est la valeur qui suit le symbole : (ici false ) qui sera affect√©e √†  $isAdult  .

C'est un peu tordu, mais √ßa marche.

Si vous n'utilisez pas ce type de condition dans vos pages web, je ne vous en voudrai pas. Il faut avouer que les ternaires sont un peu difficiles √† lire car ils sont tr√®s condens√©s. Mais sachez les reconna√Ætre et les comprendre, si vous en rencontrez un jour en lisant le code source de quelqu'un d'autre.

En r√©sum√©

- Les conditions permettent √† PHP de prendre des d√©cisions en fonction de la valeur des variables.

- La forme de condition la plus courante est if  ...  elseif  ... else  qui signifie ¬´ si ¬ª‚Ä¶ ¬´ sinon si ¬ª‚Ä¶ ¬´ sinon ¬ª.

- On peut combiner des conditions avec les instructions&&  (¬´ et ¬ª) et||  (¬´ ou ¬ª).

- Si une condition comporte de nombreux elseif , il peut √™tre plus pratique d'utiliser la condition switch.

- Les ternaires sont des conditions condens√©es qui font un test sur une variable, et en fonction des r√©sultats de ce test, 
     elles donnent une valeur √† une autre variable. Elles sont cependant plus rarement utilis√©es.

Que de notions importantes dans cette partie de mise en pratique ! Nous allons maintenant introduire le concept des boucles pour avancer sur notre projet fil rouge.

##############################################################################################################

