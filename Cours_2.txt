                                    R√©alisez un site web dynamique avec PHP

D√©crivez les √©l√©ments de votre projet √† l'aide de variables

Bienvenue dans la partie 2 de ce cours, nous passons aux choses s√©rieuses ! Nous d√©marrons le projet fil rouge pour d√©velopper notre site web dynamique : un site de partage de recettes de cuisine. Et √ßa commence par une notion fondamentale : les variables.

Les variables sont indispensables √† tout langage de programmation, et en PHP on n'y √©chappe pas.

Pour pouvoir d√©velopper notre projet de partage, nous allons avoir besoin de structurer votre application autour d'objets qui la composent. C'est ce qu'on appelle des objets "m√©tiers".

Pour un site de partage de recettes de cuisine, c'est simple :

  - Des utilisateurs se connectent : ils ont un nom, un e-mail, un mot de passe, un √¢ge...

  - Ils consultent ou cr√©ent des recettes : elles ont un titre, un corps (la recette), un statut d'activation...

  - Et ainsi de suite pour chacun des objets qui constituent votre projet.

OK je vois, mais concr√®tement, qu'est-ce que c'est, une "variable" ?

J'y arrive‚Ä¶

Comprenez ce qu'est une variable

Rien qu'avec leur nom, vous devez vous dire que c'est quelque chose qui change tout le temps.

En effet, le propre d'une variable c'est de pouvoir varier.

Une variable, c'est une petite information stock√©e en m√©moire temporairement.

En PHP, la variable (l'information) existe tant que la page est en cours de g√©n√©ration. D√®s que la page PHP est g√©n√©r√©e, toutes les variables sont supprim√©es de la m√©moire car elles ne servent plus √† rien.

Ce n'est donc pas un fichier qui reste stock√© sur le disque dur, mais une petite information temporaire pr√©sente en m√©moire vive.

C'est √† vous de cr√©er des variables. Vous en cr√©ez quand vous en avez besoin pour retenir des informations.

Donnez toujours un nom et une valeur aux variables

Une variable est toujours constitu√©e de deux √©l√©ments :

  - son nom : pour pouvoir la reconna√Ætre, vous devez donner un nom √† votre variable. Par exemple age  ;

  - sa valeur : c'est l'information qu'elle contient, et qui peut changer. Par exemple :  17  .

Ici, je vous ai donn√© l'exemple d'une variable appel√©e age  qui a pour valeur  17  .

On peut modifier quand on veut la valeur de cette variable, faire des op√©rations dessus, etc. Et quand on en a besoin, on l'appelle (par son nom), et elle nous dit gentiment la valeur qu'elle contient.

Maintenant que vous comprenez √ßa, allons plus loin : il existe diff√©rents types de variables.

D√©couvrez les diff√©rents types de variables

Les variables sont capables de stocker diff√©rents types d'informations. On parle de types de donn√©es. Voici les principaux types √† conna√Ætre.

  - Les cha√Ænes de caract√®res (string) : c'est le nom informatique qu'on donne au texte. 

  - Les nombres entiers (int) : ce sont les nombres du type 1, 2, 3, 4, etc. On compte aussi parmi eux les 
    entiers relatifs : -1, -2, -3‚Ä¶

  - Les nombres d√©cimaux (float ) : ce sont les nombres √† virgule, comme 14,738. Attention, les nombres 
    doivent √™tre √©crits avec un point au lieu de la virgule (c'est la notation anglaise).

  - Les bool√©ens (bool ) : c'est un type tr√®s important qui permet de stocker soit vrai soit faux. 

  - Rien (NULL ) : aussi bizarre que cela puisse para√Ætre, on a parfois besoin de dire qu'une variable ne 
    contient rien. Ce n'est pas vraiment un type de donn√©es, mais plut√¥t l'absence de type.

Cela devrait vous donner une id√©e de tout ce que PHP est capable de stocker en m√©moire. Ces types suffiront pour la cr√©ation de notre site !

Maintenant, allons-y !

OK mais comment cr√©er une variable et comment afficher ce qu'elle contient ?

C'est justement ce que j'allais vous expliquer. üòé

Affectez une valeur √† une variable

Regardez ce code d'exemple :

<?php
$userAge = 17;
?>

Avec ce code PHP, on vient en fait de cr√©er une variable :

  - son nom est userAge  ;

  - sa valeur est 17  .

Notez qu'on ne peut pas mettre d'espace dans un nom de variable. On utilise donc une majuscule pour "d√©tacher" visuellement les mots et les rendre plus lisibles.

C'est ce que l'on appelle la convention camelCase (cela fait r√©f√©rence aux bosses d'un chameau).

Quand vous nommez des variables, √©vitez les accents, les c√©dilles et tout autre symbole : PHP ne les appr√©cie pas trop‚Ä¶

C'est pour cela que j'ai √©crit age et non  √¢ge  .

Analysons dans le d√©tail le code qu'on vient de voir.

  - D'abord, on √©crit le symbole "dollar" ($) : il pr√©c√®de toujours le nom d'une variable. C'est comme un 
    signe de reconnaissance, si vous pr√©f√©rez : √ßa permet de dire √† PHP "J'utilise une variable". 

  - Ensuite, il y a le signe "√©gal" (= ) : celui-l√†, c'est logique, c'est pour dire que  $userAge  est √©gal √†‚Ä¶

  - √Ä la suite, il y a la valeur de la variable, ici 17.

  - Enfin, il y a l'incontournable point-virgule ( ;) qui permet de terminer l'instruction.

OK super, mais concr√®tement, qu'est-ce que le code pr√©c√©dent afficherait ?

Rien du tout !

Rien ne s'affiche tant que vous n'utilisez pas  echo  .

L√†, le serveur a juste cr√©√© la variable temporairement en m√©moire, mais il n'a rien fait d'autre.

Supposons maintenant que l'on √©crive ceci :

<?php
$userAge = 17; // La variable est cr√©√©e et vaut 17
$userAge = 23; // La variable est modifi√©e et vaut 23
$userAge = 55; // La variable est modifi√©e et vaut 55
?>

Que se passera-t-il ?

La variable $userAge  va √™tre cr√©√©e et prendre pour valeur, dans l'ordre : 17, 23, puis 55.

Tout cela va tr√®s vite : l'ordinateur √©tant tr√®s rapide, vous n'aurez pas le temps de dire ¬´ ouf ¬ª que tout ce code PHP aura √©t√© ex√©cut√©.

Comme tout √† l'heure, rien ne s'affiche. Seulement, quelque part dans la m√©moire de l'ordinateur, une petite zone nomm√©e userAge vient de prendre la valeur 17, puis 23, puis 55.

Utilisez les types de donn√©es

Vous vous souvenez des types de donn√©es dont je vous ai parl√© il y a quelques minutes ? Lesstring , int , float ...

Voici un exemple de variable pour chacun de ces types.

Le type string  (cha√Æne de caract√®res)
Ce type permet de stocker du texte.

Pour cela, vous devez entourer votre texte de :

  - guillemets doubles  ""  ;

  - ou de guillemets simples ''  (attention, ce sont des apostrophes).

Par exemple, pour conserver en m√©moire les noms et mails de nos utilisateurs :

<?php
$fullname = "Mathieu Nebra";
$email = 'mathieu.nebra@exemple.com';
?>

Attention, petit pi√®ge : si vous voulez ins√©rer un guillemet simple alors que le texte est entour√© de guillemets simples, il faut l'√©chapper en ins√©rant un antislash devant. Il en va de m√™me pour les guillemets doubles.

Voici un exemple pour bien comprendre :

<?php
$variable = "Mon \"nom\" est Mathieu";
$variable = 'Je m\'appelle Mathieu';
?>

En effet, si vous oubliez de mettre un antislash, PHP va croire que c'est la fin de la cha√Æne et il ne comprendra pas le texte qui suivra (et vous aurez en fait un message Parse error).

Vous pouvez en revanche ins√©rer sans probl√®me des guillemets simples au milieu de guillemets doubles, et inversement :

<?php
$variable = 'Mon "nom" est Mathieu';
$variable = "Je m'appelle Mathieu";
?>

La diff√©rence est subtile, faites attention. Il y a d'ailleurs une diff√©rence plus importante entre les deux types de guillemets, dont nous parlerons plus loin.

Le type int  (nombre entier)

Il suffit tout simplement d'√©crire le nombre que vous voulez stocker, sans guillemets :

<?php
$userAge = 17;
?>

Le type float  (nombre d√©cimal)

Vous devez √©crire votre nombre avec un point au lieu d'une virgule. C'est la notation anglaise.

<?php
$price = 57.3;
?>

Le type bool  (bool√©en)

Pour dire si une variable vaut vrai ou faux, vous devez √©crire le mot true  ou false  sans guillemets autour (ce n'est pas une cha√Æne de caract√®res !) :

<?php
$isAuthor = true;
$isAdministrator = false;
?>

Une variable vide avec NULL

Si vous voulez cr√©er une variable qui ne contient rien, vous devez lui passer le mot-cl√© NULL  (vous pouvez aussi l'√©crire en minuscules :  null  ).

<?php
$noValue = NULL;
?>

Cela sert simplement √† indiquer que la variable ne contient rien, tout du moins pour le moment.

Bon, nous avons appris √† cr√©er des variables et √† stocker des informations √† l'int√©rieur. Mais pour le moment, aucun de nos codes sources n'affiche quoi que ce soit.

Voyons donc comment faire.

Affichez le contenu d'une variable

Vous vous souvenez que l'on peut afficher du texte avec echo  ?

On peut aussi s'en servir pour afficher la valeur d'une variable !

<?php
$fullname = 'Mathieu Nebra';
echo $fullname;
?>

Comme vous le voyez, il suffit d'√©crire le nom de la variable que vous voulez afficher.

Au fait, on ne doit pas mettre de guillemets apr√®s le echo, comme tu nous as appris ?

Non, quand il s'agit d'une variable, on ne met pas de guillemets autour.

Cr√©ez un fichier PHP avec ce code source pour le tester. Inutile de mettre tout le code HTML autour, ce n'est pas grave, ce ne sera pas une ¬´ vraie ¬ª page HTML valide ; mais c'est bien suffisant pour nos tests.

Le contenu qui se trouve √† l'int√©rieur de la variable s'affiche dans la page (ici, Mathieu Nebra).

Concat√©nez une variable

Non, ce n'est pas une insulte. Cela signifie assemblage. ;-)

En fait, √©crire "Mathieu Nebra" tout seul comme on l'a fait n'est pas tr√®s parlant. On aimerait √©crire du texte autour pour dire : ¬´ Bienvenue Mathieu Nebra ¬ª. La concat√©nation est justement un moyen d'assembler du texte et des variables.

Comment faire cela ?

Les petits malins auront l'id√©e d'√©crire trois instructions echo  :

<?php
$fullname = "Mathieu Nebra";
echo "Bonjour ";
echo $fullname;
echo " et bienvenue sur le site !";
?>

Vous pouvez tester et v√©rifier dans votre navigateur que √ßa fonctionne.

Mais il y a plus malin : on peut tout faire sur une ligne.

Pour cela, il y a deux m√©thodes :

Avec des guillemets simples.

Ou avec guillemets doubles.

Et c'est l√† qu'on va voir, qu'entre les deux, il y a une diff√©rence !

Effectuez l'interpolation avec des guillemets doubles 
Attendez, on parlait de concat√©nation, mais qu'est-ce que c'est que cette interpolation et pourquoi devrais-je m'en soucier en PHP ?

Eh bien, l'interpolation en PHP vous permet d'inclure directement des variables dans une cha√Æne de caract√®res sans avoir √† les concat√©ner s√©par√©ment, ce qui rend votre code plus lisible et concis.

Concr√®tement, essayez ce code :

<?php
    $fullname = "Mathieu Nebra";
    echo "Bonjour {$fullname} et bienvenue sur le site !";
?>

√áa affiche :  Bonjour Mathieu Nebra et bienvenue sur le site !

Attention √† ne pas oublier d'entourer la variable d'accolades pour √©viter les erreurs.

Dans cet exemple,  echo "Bonjour, $fullname123!";  nous aurons un message d'erreur indiquant que la variable  $fullname123  n'est pas d√©finie. Maintenant, si nous ajoutons les accolades  echo "Bonjour, {$fullname}123!";  alors la variable est interpr√©t√©e correctement et nous aurons "Bonjour, Mathieu Nebra123!".

En effet, lorsque vous utilisez des guillemets doubles, les variables qui se trouvent √† l'int√©rieur sont analys√©es et remplac√©es par leur vraie valeur.

Pratique, non?

Concat√©nez avec des guillemets simples
Si vous √©crivez le code pr√©c√©dent entre guillemets simples, vous allez avoir une dr√¥le de surprise :

<?php
    $fullname = 'Mathieu Nebra';
    echo 'Bonjour {$fullname} et bienvenue sur le site !'; // ERREUR !
?>

√áa affiche :   Bonjour {$fullname} et bienvenue sur le site !  .

Mis√©ricorde ! On ne peut pas concat√©ner du texte avec des guillemets simples ?

Eh bien, si ! Mais cette fois, il va falloir √©crire la variable en dehors des guillemets et s√©parer les √©l√©ments les uns des autres √† l'aide d'un point. Regardez :

<?php
    $fullname = 'Mathieu Nebra';
    echo 'Bonjour ' . $fullname . ' et bienvenue sur le site !'; // OK
?>

Cette fois, √ßa affiche bien comme on voulait.

OK, j'ai vu comment concat√©ner avec des guillemets simples, mais dans quels cas devrais-je utiliser l'interpolation ou la concat√©nation ?

En r√®gle g√©n√©rale, on utilise l'interpolation lorsqu'on a besoin d'incorporer des variables directement dans une cha√Æne de caract√®res de mani√®re propre et concise. C'est id√©al pour rendre le code plus lisible.

En revanche, s'il y a des expressions complexes, des conditions ou des op√©rations √† effectuer pendant la concat√©nation, alors la concat√©nation traditionnelle avec des guillemets simples reste une option solide. L'essentiel est de choisir l'approche qui rend le code le plus clair et le plus maintenable en fonction du contexte du projet.

Faites des calculs simples

On va maintenant faire travailler votre ordinateur, et vous allez voir qu'il encaisse les calculs sans broncher. Eh oui, PHP sait aussi faire des calculs !
Oh je vous rassure : on ne va pas faire des calculs tordus, juste des additions, des soustractions, des multiplications et des divisions. C'est du niveau de tout le monde, non ? üò¨üòÑ

Ici, comme vous vous en doutez, on ne va travailler que sur des variables qui contiennent des nombres.

Les op√©rations de base : addition, soustraction‚Ä¶
Les signes √† conna√Ætre pour faire les quatre op√©rations de base (vous les trouverez sur votre pav√© num√©rique, √† droite du clavier, en principe) sont repr√©sent√©s par le tableau suivant. En compl√©ment vous avez l'op√©ration modulo, c'est-√†-dire le reste d'une division euclidienne.

Apr√®s, pour vous en servir, √ßa coule de source. Voici quelques exemples :

<?php
$number = 2 + 4; // $number prend la valeur 6
$number = 5 - 1; // $number prend la valeur 4
$number = 3 * 5; // $number prend la valeur 15
$number = 10 / 2; // $number prend la valeur 5

// Allez on rajoute un peu de difficult√©
$number = 3 * 5 + 1; // $number prend la valeur 16
$number = (1 + 2) * 2; // $number prend la valeur 6
?>

Allez quoi, boudez pas, un peu de calcul mental √ßa n'a jamais fait de mal √† personne.
V√©rifiez mes calculs : comme vous pouvez le voir il n'y a rien de bien compliqu√© dans tout √ßa.

Seulement, il ne faut pas avoir peur de ¬´ jongler ¬ª avec les variables.
Voici des calculs avec plusieurs variables :

<?php
$number = 10;
$result = ($number + 5) * $number; // $result prend la valeur 150
?>

C'est de la pure logique, je ne peux rien vous dire de plus.
Si vous avez compris ces bouts de code, vous avez tout compris.

Le modulo
Il est possible de faire un autre type d'op√©ration un peu moins connu : le modulo. Cela repr√©sente le reste de la division enti√®re.

Par exemple, 6 / 3 = 2 et il n'y a pas de reste. En revanche, 7 / 3 = 2 (car le nombre 3 ¬´ rentre ¬ª 2 fois dans le nombre 7) et il reste 1. Vous avez fait ce type de calculs √† l'√©cole primaire, souvenez-vous !

Le modulo permet justement de r√©cup√©rer ce reste :

<?php
$number = 10 % 5; // $number prend la valeur 0 car la division tombe juste
$number = 10 % 3; // $number prend la valeur 1 car il reste 1
?>
OK g√©nial, et les autres op√©rations ?

Je passe sous silence les op√©rations plus complexes telles que :

 - la racine carr√©e ;

 - l'exponentielle ;

 - la factorielle ;

 - etc.

Toutes ces op√©rations peuvent √™tre r√©alis√©es en PHP mais il faudra passer par ce qu'on appelle des fonctions, une notion que l'on d√©couvrira plus tard. Les op√©rations basiques que l'on vient de voir sont amplement suffisantes pour la programmation PHP de tous les jours.

En r√©sum√©

- Une variable est une petite information qui reste stock√©e en m√©moire le temps de la g√©n√©ration de la page 
  PHP. Elle a un nom et une valeur.

- Il existe plusieurs types de variables qui permettent de stocker diff√©rents types d'informations : du texte 
  ( string  ), des nombres entiers ( int  ), des nombres d√©cimaux (float), des bool√©ens pour stocker vrai ou 
  faux ( bool  ), etc.

- En PHP, un nom de variable commence par le symbole dollar : $age  , par exemple.

- La valeur d'une variable peut √™tre affich√©e avec l'instruction echo  .

- Il est possible de faire des calculs math√©matiques entre plusieurs variables : addition, soustraction, 
  multiplication‚Ä¶

Maintenant que vous savez comment on travaille avec les variables, nous allons nous pencher sur un autre concept important : les conditions.

##############################################################################################################

Adaptez le comportement de votre application √† l'aide des conditions

Ce chapitre est d'une importance capitale. En effet, vous serez tr√®s souvent amen√© √† employer des conditions dans vos pages web PHP.

Dans notre projet fil rouge de cr√©ation de site de recettes, on voudra afficher des informations en fonction du contexte. Par exemple :

  - autoriser l'auteur d'une recette √† la modifier, mais pas les autres utilisateurs ;

  - afficher seulement la liste des recettes qui auront √©t√© v√©rifi√©es par un administrateur ;

  - etc.

Les conditions, c'est ce qui va r√©ellement vous permettre de cr√©er une application dynamique. √Ä la fin de ce chapitre, vous aurez les bases n√©cessaires pour autoriser l'affichage d'une recette ou l'acc√®s d'un utilisateur √† une page selon les conditions de votre application.

Appropriez-vous la structure de base :  if‚Ä¶ else

Une condition peut √™tre √©crite en PHP sous diff√©rentes formes. On parle de structures conditionnelles.

Celle que je vais vous apprendre √† utiliser maintenant est la principale √† conna√Ætre. Nous en verrons d'autres un peu plus loin.

Pour apprendre √† utiliser if‚Ä¶ else  , nous allons :

  1. D'abord voir les symboles qu'il faut conna√Ætre : vous allez devoir retenir quelques symboles qui 
     permettent de faire des comparaisons. Soyez attentif, car ils vous seront utiles pour les conditions.

  2. Ensuite voir comment fonctionne une condition avec if‚Ä¶ else  . Inutile de vous dire qu'il est 
     indispensable de bien comprendre cela.

  3. Apr√®s, on compliquera un peu nos conditions avec les conditions multiples. Vous allez voir en effet qu'on 
     peut utiliser plusieurs conditions √† la fois.

  4. Et enfin, l'astuce bonus : parce qu'il y a toujours un bonus pour r√©compenser ceux qui ont bien suivi 
     jusqu'au bout !

Retenez les symboles √† conna√Ætre

Voici les symboles que nous serons amen√©s √† utiliser. Essayez de bien les retenir, ils vous seront utiles :

Symbole      Signification

===          Est √©gal √†

>            Est sup√©rieur √†

<            Est inf√©rieur √†

>=           Est sup√©rieur ou √©gal √†

<=           Est inf√©rieur ou √©gal √†

!==          Est diff√©rent de


Il y a trois symboles ¬´ √©gal ¬ª ( === ) sur la premi√®re ligne.

Il ne faut pas confondre √ßa avec le simple =  (que je vous ai appris dans le chapitre sur les variables).

Ici, le triple √©gal sert √† tester l'√©galit√©, √† dire ¬´ Si c'est √©gal √†‚Ä¶ ¬ª. Dans les conditions, on utilisera toujours le triple √©gal ( ===  ).

Les symboles ¬´ sup√©rieur ¬ª ( >  ) et ¬´ inf√©rieur ¬ª ( <  ) sont situ√©s en bas √† gauche de votre clavier.

Utilisez la structure  if‚Ä¶ else

Voici ce qu'on doit √©crire, dans l'ordre, pour utiliser cette condition.

  - Pour introduire une condition, on utilise le mot if qui signifie ¬´ si ¬ª, en anglais.

  - On ajoute √† la suite entre parenth√®ses la condition en elle-m√™me (vous allez voir que vous pouvez inventer 
    une infinit√© de conditions).

  - Enfin, on ouvre des accolades √† l'int√©rieur desquelles on placera les instructions √† ex√©cuter si la 
    condition est remplie.

Puisqu'un exemple vaut toujours mieux qu'un long discours :

<?php
$isEnabled = true; // La condition d'acc√®s

if ($isEnabled === true) {
    echo "Vous √™tes autoris√©(e) √† acc√©der au site ‚úÖ";
}
?>

Ici, on demande √† PHP :

Si la variable $isEnabled est vraie, affiche ¬´ Vous √™tes autoris√©(e) √† acc√©der au site ‚úÖ ¬ª.

Vous remarquerez que dans la quasi-totalit√© des cas, c'est sur une variable qu'on fait la condition.

Ce qui compte ici, c'est qu'il y a deux possibilit√©s :

   1. Soit la condition est remplie et alors on affiche quelque chose.

   2. Sinon, on saute les instructions entre accolades, on ne fait rien.

Bon, on peut quand m√™me am√©liorer notre exemple :

<?php
$isEnabled = true;

if ($isEnabled === true) {
    echo "Vous √™tes autoris√©(e) √† acc√©der au site ‚úÖ";
}
else {
    echo "Acc√®s refus√© ‚ùå ";
}
?>

Comment marche ce code ?

Tout d'abord, j'ai mis plusieurs instructions entre accolades. Ensuite, vous avez remarqu√© que j'ai ajout√© le mot else  (¬´ sinon ¬ª). 

Essayez ce bout de code en modifiant la valeur de $isEnabled (sur la premi√®re ligne).

Vous allez voir que le message qui s'affiche change en fonction de la valeur que vous indiquez !

Bien entendu, vous mettez les instructions que vous voulez entre accolades.

Ici, par exemple, j'ai donn√© une valeur diff√©rente √† la variable $isAllowedToEnter apr√®s avoir affich√© un message (une valeur qui pourrait nous servir par la suite) :

<?php
$isAllowedToEnter = "Oui";

// SI on a l'autorisation d'entrer
if ($isAllowedToEnter === "Oui") {
    // instructions √† ex√©cuter quand on est autoris√© √† entrer
} // SINON SI on n'a pas l'autorisation d'entrer
elseif ($isAllowedToEnter === "Non") {
    // instructions √† ex√©cuter quand on n'est pas autoris√© √† entrer
} // SINON (la variable ne contient ni Oui ni Non, on ne peut pas agir)
else {
    echo "Euh, je ne comprends pas ton choix, tu peux me le rappeler s'il te pla√Æt ?";
}
?>

Ouh l√†, √ßa commence √† se compliquer un tantinet, non ?

La principale nouveaut√© ici, c'est le mot-cl√© elseif  qui signifie ¬´ sinon si ¬ª.

Dans l'ordre, PHP rencontre les conditions suivantes :

  1. Si $isAllowedToEnter est √©gale √† ¬´ Oui ¬ª, tu ex√©cutes ces instructions‚Ä¶

  2. Sinon, si $isAllowedToEnter est √©gale √† ¬´ Non ¬ª, tu ex√©cutes ces autres instructions‚Ä¶

  3. Sinon, tu redemandes l'√¢ge pour savoir si on a ou non l'autorisation d'entrer.

Pour v√©rifier si la variable est vide, vous pouvez taper : if ($variable === NULL)

√âtudiez le cas des bool√©ens

Si on regarde bien le dernier code source (avec $isAllowedToEnter ), il serait plus adapt√© d'utiliser des bool√©ens.

C'est quoi √ßa d√©j√† ?

Les bool√©ens sont ces variables qui valent :

  - soit true  (vrai) ;

  - soit false  (faux).

Voici comment on teste une variable bool√©enne :

<?php
$isAllowedToEnter = true;

if ($isAllowedToEnter) {
    echo "Bienvenue petit nouveau. :o)";
}
else {
    echo "T'as pas le droit d'entrer !";
}
?>

L'un des avantages des bool√©ens, c'est qu'ils sont particuli√®rement adapt√©s aux conditions.

Pourquoi ?

Parce qu'en fait vous n'√™tes pas oblig√© d'ajouter le=== true. 

PHP comprend qu'il faut qu'il v√©rifie si $isAllowedToEnter vaut true.

Les avantages des bool√©ens :

  - c'est plus rapide √† √©crire pour vous ;

  - √ßa se comprend bien mieux.

En effet, si vous ¬´ lisez ¬ª la premi√®re ligne, √ßa donne :

¬´ SI on a l'autorisation d'entrer‚Ä¶ ¬ª.

C'est donc un raccourci √† conna√Ætre quand on travaille sur des bool√©ens.

Oui, mais ta m√©thode ¬´ courte ¬ª ne marche pas si on veut v√©rifier si le bool√©en vaut faux. Comment on fait avec la m√©thode courte, hein ?

Il y a un symbole qui permet de v√©rifier si la variable vaut false : le point d'exclamation (!).

On √©crit :

<?php
$isAllowedToEnter = true;

// Si pas autoris√©
if (! $isAllowedToEnter) {

}
?>

C'est une autre fa√ßon de faire.

Si vous pr√©f√©rez mettre if ($isAllowedToEnter === false)  c'est tout aussi bien, mais la m√©thode ¬´ courte ¬ª est plus lisible.

Posez des conditions multiples

Ce qu'on va essayer de faire, c'est de poser plusieurs conditions √† la fois. Pour cela, on aura besoin de nouveaux mots-cl√©s. Voici les principaux √† conna√Ætre :

Mot-cl√©      Signification       Symbole √©quivalent

AND             Et                  &&

OR              Ou                  ||

Le symbole √©quivalent pour OR est constitu√© de deux barres verticales.

Pour taper une barre verticale, appuyez sur les touches ¬´ Alt Gr ¬ª et ¬´ 6 ¬ª en m√™me temps (sur un clavier AZERTY fran√ßais) ou ¬´ Alt Gr ¬ª et ¬´ & ¬ª (sur un clavier AZERTY belge). Sur Mac, il faut faire ‚å• + ‚áß + L.

La premi√®re colonne contient le mot-cl√© en anglais, la troisi√®me son √©quivalent en symbole. Voici un premier exemple :

<?php
$isEnabled = true;
$isOwner = false;

if ($isEnabled && $isOwner) {
    echo 'Acc√®s √† la recette valid√© ‚úÖ';
} else {
    echo 'Acc√®s √† la recette interdit ! ‚ùå';
}

C'est tout simple, en fait, et √ßa se comprend tr√®s bien : si l'utilisateur est actif et qu'il est l'auteur, il peut acc√©der √† la recette valid√©e. Sinon, il verra s'afficher un message de refus.

Bon allez, un dernier exemple avec||  pour que vous l'ayez vu au moins une fois, et on arr√™te l√†.

<?php
$isEnabled = true;
$isOwner = false;
$isAdmin = true;

if (($isEnabled && $isOwner) || $isAdmin) {
    echo 'Acc√®s √† la recette valid√© ‚úÖ';
} else {
    echo 'Acc√®s √† la recette interdit ! ‚ùå';
}

Nous rajoutons une condition suppl√©mentaire : soit la condition pr√©c√©dente s'applique, soit l'utilisateur concern√© est un administrateur.

Utilisez cette astuce bonus

Avec les conditions, il y a une astuce √† conna√Ætre.
Sachez que les deux codes ci-dessous donnent exactement le m√™me r√©sultat :

<?php
$chickenRecipesEnabled = true;

if ($chickenRecipesEnabled) {
    echo '<h1>Liste des recettes √† base de poulet</h1>';
}
?>

<?php $chickenRecipesEnabled = true; ?>

<?php if ($chickenRecipesEnabled): ?> <!-- Ne pas oublier le ":" -->

<h1>Liste des recettes √† base de poulet</h1>

<?php endif; ?><!-- Ni le ";" apr√®s le endif -->

Comme vous le voyez, dans le second cas on n'a pas utilis√© de  echo  .

La syntaxe pour utiliser la condition diff√®re un peu :

  - Il n'y a pas d'accolade.

  - On ajoute  :  apr√®s la parenth√®se fermante de l'instruction  if  .

  - Et il faut ajouter une instruction  endif;  .

Rassurez-vous : nous reviendrons sur cette syntaxe un peu plus tard dans ce cours.

Nous aurons d'ailleurs bient√¥t l'occasion de pratiquer un peu, et vous verrez que les conditions sont souvent indispensables.

Utilisez la condition switch pour optimiser votre code

En th√©orie, les structures √† base de if‚Ä¶ elseif‚Ä¶ else que je viens de vous montrer suffisent pour traiter n'importe quelle condition.

Mais alors, pourquoi se compliquer la vie avec une autre structure ?

Pour vous montrer l'int√©r√™t de switch ! Vous allez bient√¥t comprendre‚Ä¶

Regardez cet exemple √† base de if  et de elseif  :

<?php
$grade = 16;

if ($grade === 0) {
    echo "Il faudra revoir tout le cours !";
}

elseif ($grade === 5) {
    echo "Tu dois r√©viser plusieurs chapitres";
}

elseif ($grade === 7) {
    echo "Il te manque quelques r√©visions pour atteindre la moyenne";
}

elseif ($grade === 10) {
    echo "Tu as pile poil la moyenne, c'est un peu juste‚Ä¶";
}

elseif ($grade === 12) {
    echo "Tu es assez bon";
}

elseif ($grade === 16) {
    echo "Tu te d√©brouilles tr√®s bien !";
}

elseif ($grade === 20) {
    echo "Excellent travail, c'est parfait !";
}

else {
    echo "D√©sol√©, je n'ai pas de message √† afficher pour cette note";
}
?>

Comme vous le voyez : c'est lourd, long, et r√©p√©titif.

Dans ce cas, on peut utiliser une autre structure plus souple : c'est switch !

Voici le m√™me exemple avec switch  (le r√©sultat est le m√™me, mais le code est plus adapt√©) :

<?php
$grade = 10;

switch ($grade) // on indique sur quelle variable on travaille
{ 
    case 0: // dans le cas o√π $grade vaut 0
        echo "Il faudra revoir tout le cours !";
    break;
    
    case 5: // dans le cas o√π $grade vaut 5
        echo "Tu dois r√©viser plusieurs modules";
    break;
    
    case 7: // dans le cas o√π $grade vaut 7
        echo "Il te manque quelques r√©visions pour atteindre la moyenne ";
    break;
    
    case 10: // etc. etc.
        echo "Tu as pile poil la moyenne, c'est un peu juste‚Ä¶";
    break;
    
    case 12:
        echo "Tu es assez bon";
    break;
    
    case 16:
        echo "Tu te d√©brouilles tr√®s bien !";
    break;
    
    case 20:
        echo "Excellent travail, c'est parfait !";
    break;
    
    default:
        echo "D√©sol√©, je n'ai pas de message √† afficher pour cette note";
}
?>

Testez ce code : essayez de changer la note (dans la premi√®re instruction) pour voir comment PHP r√©agit ! Et si vous voulez apporter quelques modifications √† ce code (vous allez voir qu'il n'est pas parfait), n'h√©sitez pas, √ßa vous fera de l'entra√Ænement !

Bon alors, qu'est-ce qui est diff√©rent ?

  - Il y a beaucoup moins d'accolades : elles marquent seulement le d√©but et la fin du  switch  .

  - On indique au d√©but du switch sur quelle variable on travaille, ici $grade. On dit √† PHP :

Je vais analyser la valeur de  $grade  .

  - On utilise des case pour analyser chaque cas : case 0 ,case 10 , etc. Cela signifie :

Dans le cas o√π la valeur est 0‚Ä¶ Dans le cas o√π la valeur est 10‚Ä¶

Quel est l'avantage d'utiliser  switch  ?

On n'a plus besoin de mettre le triple √©gal !

Ah ben super, on peut l'utiliser avec les autres symboles aussi ?

Non‚Ä¶ Cela ne marche pas avec les autres symboles :< > <= >= !== 

Le switch ne peut tester que l'√©galit√©.

Le mot-cl√© default √† la fin est un peu l'√©quivalent du  else  .

C'est le message qui s'affiche par d√©faut, quelle que soit la valeur de la variable.

Il y a cependant une chose importante √† savoir :

Supposons dans notre exemple que la note soit de 10.

PHP va lire :

case 0 ? Non. Je saute. 

case 5 ? Non plus. Je saute. 

case 7 ? Non plus. Je saute. 

case 10 ? Oui, j'ex√©cute les instructions.

Mais contrairement aux elseif ,  PHP ne s'arr√™te pas l√† et continue √† lire les instructions des cases qui suivent ! 

 - case 12 

 - case 16 

   - etc.

Pour emp√™cher cela, utilisez l'instruction break !

L'instruction break  demande √† PHP de sortir du  switch  .

D√®s que PHP tombe sur break , il sort des accolades et donc il ne lit pas les case qui suivent.

En pratique, on utilise tr√®s souvent un break car sinon, PHP lit des instructions qui suivent et qui ne conviennent pas.

Essayez d'enlever les break dans le code pr√©c√©dent, vous allez comprendre pourquoi ils sont indispensables !

Quand doit-on choisir if  ?

Et quand doit-on choisir switch ?

C'est surtout un probl√®me de pr√©sentation et de clart√© :

  1. Pour une condition simple et courte, on utilise le  if  .

  2. Et quand on a une s√©rie de conditions √† analyser, on pr√©f√®re utiliser switch pour rendre le code plus clair.

D√©couvrez les ternaires : des conditions condens√©es

Il existe une autre forme de condition, beaucoup moins fr√©quente, mais que je vous pr√©sente quand m√™me car vous pourriez un jour ou l'autre tomber dessus. Il s'agit de ce qu'on appelle les ternaires.

Un ternaire est une condition condens√©e qui sert √† faire deux choses sur une seule ligne :

   1. Tester la valeur d'une variable dans une condition.

   2. Affecter une valeur √† une variable selon que la condition est vraie ou non.

Prenons cet exemple √† base de if‚Ä¶ else  qui met un bool√©en $majeur  √† vrai ou faux selon l'√¢ge du visiteur :

<?php
$userAge = 24;

if ($userAge >= 18) {
	$isAdult = true;
}
else {
	$isAdult = false;
}
?>

On peut faire la m√™me chose en une seule ligne gr√¢ce √† une structure ternaire :

<?php
$userAge = 24;

$isAdult = ($userAge >= 18) ? true : false;

// Ou mieux, dans ce cas pr√©cis
$isAdult = ($userAge >= 18);
?>

Ici, tout notre test pr√©c√©dent a √©t√© fait sur une seule ligne !

La condition test√©e est $userAge >= 18  .

Si c'est vrai, alors la valeur indiqu√©e apr√®s le point d'interrogation (ici true) sera affect√©e √† la variable  $isAdult  .

Sinon, c'est la valeur qui suit le symbole : (ici false ) qui sera affect√©e √†  $isAdult  .

C'est un peu tordu, mais √ßa marche.

Si vous n'utilisez pas ce type de condition dans vos pages web, je ne vous en voudrai pas. Il faut avouer que les ternaires sont un peu difficiles √† lire car ils sont tr√®s condens√©s. Mais sachez les reconna√Ætre et les comprendre, si vous en rencontrez un jour en lisant le code source de quelqu'un d'autre.

En r√©sum√©

- Les conditions permettent √† PHP de prendre des d√©cisions en fonction de la valeur des variables.

- La forme de condition la plus courante est if  ...  elseif  ... else  qui signifie ¬´ si ¬ª‚Ä¶ ¬´ sinon si ¬ª‚Ä¶ ¬´ sinon ¬ª.

- On peut combiner des conditions avec les instructions&&  (¬´ et ¬ª) et||  (¬´ ou ¬ª).

- Si une condition comporte de nombreux elseif , il peut √™tre plus pratique d'utiliser la condition switch.

- Les ternaires sont des conditions condens√©es qui font un test sur une variable, et en fonction des r√©sultats de ce test, 
     elles donnent une valeur √† une autre variable. Elles sont cependant plus rarement utilis√©es.

Que de notions importantes dans cette partie de mise en pratique ! Nous allons maintenant introduire le concept des boucles pour avancer sur notre projet fil rouge.

##############################################################################################################

Affichez une liste de recettes √† l'aide des boucles

Dans notre site de partage de recettes de cuisine, vous aurez s√ªrement envie de donner la possibilit√© √† vos utilisateurs de commenter les recettes.

Pour cela, nous allons utiliser des tableaux.

Quoi ? Je croyais qu'on allait parler des boucles dans ce chapitre‚Ä¶

Les tableaux sont des structures capables de conserver en m√©moire plusieurs √©l√©ments. Et c'est ensuite gr√¢ce aux boucles que nous allons pouvoir :

  1. Parcourir les diff√©rentes recettes.

  2. Les afficher √† l'aide du langage HTML.

Nous reviendrons sur les tableaux en d√©tail dans le chapitre suivant, c'est l'un des √©l√©ments les plus utiles de PHP et je n'ai pas souvenir d'une seule de mes applications qui n'ait pas eu besoin de tableau.

√Ä la fin de ce chapitre, non seulement vous saurez parcourir une liste d'√©l√©ments, mais vous aurez √©galement commenc√© √† construire pour de bon votre application.

Utilisez un tableau pour lister des √©l√©ments

Reprenons notre projet l√† o√π nous l'avions laiss√© au chapitre pr√©c√©dent.

Nous avons :

des utilisateurs ;

des recettes ;

et peut-√™tre des commentaires.

Avec les connaissances que vous avez pour le moment, voici comment vous pourriez d√©finir deux utilisateurs :

<?php

// Premier utilisateur
$userName1 = 'Micka√´l Andrieu';
$userEmail1 = 'mickael.andrieu@exemple.com';
$userPassword1 = 'S3cr3t';
$userAge1 = 34;

// Deuxi√®me utilisatrice
$userName2 = 'Laur√®ne Castor';
$userEmail2 = 'laurene.castor@exemple.com';
$userPassword2 = 'P4ssW0rD';
$userAge2 = 28;

// ... et ainsi de suite pour les autres utilisateurs.

Pour afficher ces utilisateurs (ou m√™me des recettes), je vais devoir cr√©er des variables pour chacun des √©l√©ments qui constituent mes objets ?

Non, heureusement !

En PHP, il existe un type de structure appel√©e "tableau". Elle permet de g√©rer des objets ayant plusieurs propri√©t√©s qui ont besoin d'√™tre rassembl√©es entre elles.

Par exemple, voici un premier tableau :

<?php

$user1 = ['Micka√´l Andrieu', 'email', 'S3cr3t', 34];

echo $user1[0]; // "Micka√´l Andrieu"
echo $user1[1]; // "email"
echo $user1[3]; // 34

Notez pour le moment que :

  - un tableau se d√©clare entre crochets : [ ] ;

  - il poss√®de des indices : 0, 1, 2, ‚Ä¶ ;

  - on peut acc√©der √† un √©l√©ment du tableau √† partir de ces cl√©s.

Les indices d'un tableau commencent √† 0, et pas √† 1.

Mais la puissance des tableaux ne s'arr√™te pas l√† !

Vous pouvez construire des tableaux de tableaux :

<?php

$mickael = ['Micka√´l Andrieu', 'mickael.andrieu@exemple.com', 'S3cr3t', 34];
$mathieu = ['Mathieu Nebra', 'mathieu.nebra@exemple.com', 'devine', 33];
$laurene = ['Laur√®ne Castor', 'laurene.castor@exemple.com', 'P4ssw0rD', 28];

$users = [$mickael, $mathieu, $laurene];

echo $users[1][1]; // "mathieu.nebra@exemple.com"

Maintenant, comment boucler sur cette liste d'utilisateurs (ou de recettes) pour afficher les recettes ?

C'est exactement ce que nous allons voir maintenant !

Utilisez une boucle simple :  while

Attendez mais on n'a m√™me pas vu ce qu'√©tait une boucle, √† quoi √ßa sert ?

C'est une structure qui fonctionne sur le m√™me principe qu'une condition  if‚Ä¶ else  .

D'ailleurs, vous allez voir qu'il y a beaucoup de similitudes avec le chapitre sur les conditions.

Concr√®tement, une boucle permet de r√©p√©ter des instructions plusieurs fois. En clair : c'est un gain de temps, c'est tr√®s pratique, et bien souvent indispensable.

On peut, si vous voulez, pr√©senter le principe avec le sch√©ma suivant :

Voil√† ce qui se passe dans une boucle :

  1. Comme d'habitude, les instructions sont d'abord ex√©cut√©es dans l'ordre, de haut en bas.

  2. √Ä la fin des instructions, on retourne √† la premi√®re.

  3. On recommence √† lire les instructions dans l'ordre.

  4. Et on retourne √† la premi√®re, etc.

Le seul hic dans ce sch√©ma, c'est que √ßa ne s'arr√™te jamais ! Les instructions seraient r√©ex√©cut√©es √† l'infini !
C'est pour cela que, quel que soit le type de boucle, while  ou for, il faut indiquer une condition.

Tant que la condition est remplie, les instructions sont r√©ex√©cut√©es.

D√®s que la condition n'est plus remplie, on sort enfin de la boucle. Ouf !

Voici comment faire avec une boucle simple :  while  . 

<?php
while ($isValid) {
    // instructions √† ex√©cuter dans la boucle
}
?>
while  peut se traduire par ¬´ tant que ¬ª.

Ici, on demande √† PHP :

TANT QUE $isValid est vrai, ex√©cuter ces instructions.

Les instructions qui sont r√©p√©t√©es en boucle se trouvent entre les accolades {  et  }  .

Mais bon, l√† je ne vous apprends rien, vous commencez √† avoir l'habitude de voir des accolades partout. ü§ì

Et voil√†, il n'y a gu√®re plus de choses √† savoir. Cependant, je vais quand m√™me vous montrer un ou deux exemples d'utilisation de boucles, pour que vous voyiez √† quoi √ßa peut servir.

Pour notre premier exemple, on va supposer que vous avez √©t√© puni et que vous devez recopier 100 fois :

¬´ Je ne dois pas regarder les mouches voler quand j'apprends le PHP ¬ª.

Avant, il fallait prendre son mal en patience et √ßa prenait des heures‚Ä¶ Avec PHP, on va faire √ßa en un clin d'≈ìil !

Regardez ce code :

<?php
$lines = 1;

while ($lines <= 100) {
    echo 'Je ne dois pas regarder les mouches voler quand j\'apprends le PHP.<br />';
    $lines++; // $lines = $lines + 1
}
?>

Ce qui affiche... un grand nombre de lignes :

La boucle pose la condition :

TANT QUE $lines est inf√©rieur ou √©gal √† 100.

Dans cette boucle, il y a deux instructions :

  1. echo permet d'afficher du texte en PHP. √Ä noter qu'il y a une balise HTML <br />  √† la fin : cela permet d'aller √† la 
             ligne (vu que vous connaissez le HTML, √ßa n'a rien de surprenant : chaque phrase sera √©crite sur une seule ligne).

  2. $lines++; est une fa√ßon plus courte d'ajouter 1 √† la variable. On appelle cela l'incr√©mentation (ce nom barbare 
              signifie tout simplement que l'on a ajout√© 1 √† la variable).

Chaque fois qu'on fait une boucle, la valeur de la variable augmente : 1, 2, 3, 4‚Ä¶ 99, 100‚Ä¶

D√®s que la variable atteint 101, on arr√™te la boucle.

Et voil√†, on a √©crit 100 lignes en un clin d'≈ìil.

Si la punition avait √©t√© plus grosse, pas de probl√®me ! Il aurait suffi de changer la condition, par exemple : mettre ¬´ TANT QUE c'est inf√©rieur ou √©gal √† 500 ¬ª pour l'√©crire 500 fois.

Il faut toujours s'assurer que la condition sera fausse au moins une fois. Si elle ne l'est jamais, alors la boucle s'ex√©cutera √† l'infini !

PHP refuse normalement de travailler plus d'une quinzaine de secondes. Il s'arr√™tera tout seul s'il voit que son travail dure trop longtemps, et affichera un message d'erreur.

Nous venons donc de voir comment afficher une phrase plusieurs centaines de fois sans effort.

Mais est-ce vraiment utile ? On n'a pas besoin de faire √ßa sur un site web, si ?

Pas vraiment, mais nous apprenons ici des techniques de base que l'on va pouvoir r√©utiliser plus tard dans ce cours. Imaginez √† la fin que ce syst√®me de boucle va vous permettre de demander √† PHP d'afficher d'une seule traite tous les messages de votre forum. Bien s√ªr, il vous faudra d'autres connaissances pour y parvenir, mais sans les boucles vous n'auriez rien pu faire !

Je vous demande pour le moment de pratiquer et de comprendre comment √ßa marche.

Bon, un autre exemple pour le plaisir ?

On peut √©crire de la m√™me mani√®re une centaine de lignes, mais chacune peut √™tre diff√©rente : on n'est pas oblig√© d'√©crire la m√™me chose √† chaque fois.

Cet exemple devrait vous montrer que la valeur de la variable augmente √† chaque passage dans la boucle :

<?php
$lines = 1;

while ($lines <= 100)
{
    echo 'Ceci est la ligne n¬∞' . $lines . '<br />';
    $lines++;
}
?>

<!--

Ceci est la ligne n¬∞1
Ceci est la ligne n¬∞2
...
-->

Voil√†, c'est tout b√™te, et cet exemple ressemble beaucoup au pr√©c√©dent.

La particularit√©, l√†, c'est qu'on affiche √† chaque fois la valeur de  $lines  .

Cela vous permet de voir que sa valeur augmente petit √† petit.

Pour information, l'astuce que je vous avais donn√©e dans le chapitre sur les conditions marche aussi ici :

  1. Vous pouvez fermer la balise PHP  ?>  .

  2. √âcrire du texte en HTML.

  3. Puis rouvrir la balise PHP  <?php  .

Cela vous √©vite d'utiliser une ou plusieurs instructions echo au milieu.

On aura l'occasion d'utiliser cette astuce de nombreuses fois dans la suite du cours.

D'accord, mais pour un tableau de tableaux : comment on fait alors ?

On va l'aborder en d√©tail dans le chapitre suivant ; en attendant, voici le code fonctionnel :

<?php
$users = [
    [
        'full_name' => 'Micka√´l Andrieu',
        'email' => 'mickael.andrieu@exemple.com',
        'age' => 34,
    ],
    [
        'full_name' => 'Mathieu Nebra',
        'email' => 'mathieu.nebra@exemple.com',
        'age' => 34,
    ],
    [
        'full_name' => 'Laur√®ne Castor',
        'email' => 'laurene.castor@exemple.com',
        'age' => 28,
    ],
];
$lines = 3; // nombre d'utilisateurs dans le tableau
$counter = 0;
while ($counter < $lines) {
    echo $users[$counter]['full_name'] . ' ' . $users[$counter]['email'] . '<br />';
    $counter++;
}

D√©couvrez une boucle plus complexe :  for

Mais non, n'ayez pas peur, voyons.
Il ne vous arrivera rien de mal : ici le mot ¬´ complexe ¬ª ne veut pas dire ¬´ compliqu√© ¬ª.

for est un autre type de boucle qui a une forme un peu plus condens√©e et plus commode √† √©crire. Elle est donc fr√©quemment utilis√©e.

Cependant, sachez que for  et while  donnent le m√™me r√©sultat et servent √† la m√™me chose : r√©p√©ter des instructions en boucle.

L'une peut para√Ætre plus adapt√©e que l'autre dans certains cas ; cela d√©pend aussi des go√ªts.

Alors, comment √ßa marche un for ?

√áa ressemble beaucoup au while mais c'est la premi√®re ligne qui est un peu particuli√®re.

Pour voir la diff√©rence avec le while , reprenons l'exemple pr√©c√©dent, cette fois avec un for :

<?php
for ($lines = 0; $lines <= 2; $lines++)
{
    echo $users[$lines][0] . ' ' . $users[$lines][1] . '<br />';
}
?>

Que de choses dans une m√™me ligne !

Bon, vous vous en doutez : je vais vous analyser la ligne du for uniquement (le reste n'a pas chang√©).

Apr√®s le mot for  , il y a des parenth√®ses qui contiennent trois √©l√©ments, s√©par√©s par des points-virgules ;  :

  1. Le premier sert √† l'initialisation. C'est la valeur que l'on donne au d√©part √† la variable (ici, elle vaut 0).

  2. Le second, c'est la condition. Comme pour le while : tant que la condition est remplie, la boucle est r√©ex√©cut√©e. D√®s que 
             la condition ne l'est plus, on en sort.

  3. Enfin, le troisi√®me c'est l'incr√©mentation. Cela permet d'ajouter 1 √† la variable √† chaque tour de boucle.

Les deux derniers codes donnent donc exactement le m√™me r√©sultat :

  - le for fait la m√™me chose que le  while  ;

  - ‚Ä¶ mais il rassemble sur une seule ligne tout ce qu'il faut savoir sur le fonctionnement de la boucle.

Comment savoir lequel choisir ? while  ou for ?

while  est plus simple et plus flexible : on peut faire tous les types de boucles avec, mais on peut oublier de faire certaines √©tapes, comme l'incr√©mentation de la variable.

for  est bien adapt√© quand on doit compter le nombre de fois que l'on r√©p√®te les instructions, et il permet de ne pas oublier de faire l'incr√©mentation pour augmenter la valeur de la variable !

Si vous h√©sitez entre les deux, il suffit simplement de vous poser la question suivante : ¬´ Est-ce que je sais d'avance combien de fois je veux que mes instructions soient r√©p√©t√©es ? ¬ª.

Si la r√©ponse est oui, alors la boucle for  est tout indiqu√©e.

Sinon, alors il vaut mieux utiliser la boucle while .

Affichez des recettes

Reprenons ce que nous avions dit sur les recettes.

Une recette, c'est :

  - un titre ;

  - un auteur ;

  - un statut activ√© ;

  - et des instructions (la recette √† suivre).

Le code de votre application √† ce stade pourrait √™tre le suivant (avec des recettes d'exemple, bien s√ªr) :

<?php

// D√©claration du tableau des recettes
$recipes = [
    ['Cassoulet','[...]','mickael.andrieu@exemple.com',true,],
    ['Couscous','[...]','mickael.andrieu@exemple.com',false,],
];

?>

<!DOCTYPE html>
<html>
<head>
    <title>Affichage des recettes</title>
</head>
<body>
    <ul>
        <?php for ($lines = 0; $lines <= 1; $lines++): ?>
            <li><?php echo $recipes[$lines][0] . ' (' . $recipes[$lines][2] . ')'; ?></li>
        <?php endfor; ?>
    </ul>
</body>
</html>

Ah ! En HTML, on peut utiliser la boucle  for  comme une boucle  if  : je reconnais l'astuce avec  endif;  et  endfor;  , c'est bien √ßa ?

Tout √† fait, comme vous pouvez le voir, c'est assez pratique !

On peut combiner les boucles et les conditions ? Au final, on a affich√© aussi la recette "Couscous" alors que le statut d'affichage est √† "faux"‚Ä¶ 

Oui, mais nous verrons cela dans le prochain chapitre !

Exercez-vous

F√©licitations pour avoir atteint la fin de notre chapitre sur les boucles en PHP ! C'est maintenant le moment tant attendu de mettre en pratique ce que vous avez appris au travers de notre projet fil rouge.

Vous allez cr√©er une page web qui affiche diff√©rentes recettes en utilisant les boucles en PHP pour g√©n√©rer le contenu HTML.

 1. Cr√©ez le fichier index.php.

 2. D√©finissez un tableau en PHP contenant quatre recettes. Chaque recette devrait avoir un titre et l'auteur de la 
     recette.

 3. Utilisez une boucle pour parcourir le tableau de recettes.

 4. Pour chaque recette, affichez le titre et l'auteur dans des balises HTML appropri√©es.

 5. Testez votre page web : v√©rifiez que les quatre recettes s‚Äôaffichent avec le titre et l‚Äôauteur.

Vous pouvez retrouver la solution dans le dossier P2C3 du GitHub.

En r√©sum√©

- Les boucles demandent √† PHP de r√©p√©ter des instructions plusieurs fois.

- Les deux principaux types de boucles sont :

      - while : √† utiliser de pr√©f√©rence lorsqu'on ne sait pas par avance combien de fois la boucle doit √™tre r√©p√©t√©e ;

      - for  : √† utiliser lorsqu'on veut r√©p√©ter des instructions un nombre pr√©cis de fois.

- L'incr√©mentation est une technique qui consiste √† ajouter 1 √† la valeur d'une variable. La d√©cr√©mentation retire au 
     contraire 1 √† cette variable. On trouve souvent des incr√©mentations au sein de boucles for  .

Ce chapitre √©tait important et il vous a √©t√© utile pour faire afficher des informations sur notre site. Maintenant, nous allons voir comment organiser nos donn√©es gr√¢ce aux tableaux.

##############################################################################################################

Organisez vos donn√©es √† l'aide des tableaux

Nous allons d√©tailler ici l'une des fonctionnalit√©s introduites dans le chapitre pr√©c√©dent : les tableaux (ou ¬´ arrays ¬ª, en anglais).

Il s'agit en fait de variables ¬´ compos√©es ¬ª, que l'on peut imaginer sous la forme de tableaux.

On peut faire √©norm√©ment de choses avec les tableaux, et leur utilisation n'est pas toujours tr√®s facile. Cependant, ils vont tr√®s rapidement nous devenir indispensables et vous devez bien comprendre leur fonctionnement pour la suite du cours, qui s'annonce concr√®te et passionnante.

Mais restez concentr√© sur votre projet : nous allons profiter de ce chapitre pour r√©aliser l'affichage de la liste des recettes.

Un tableau est une variable. Mais une variable un peu sp√©ciale.

Reprenons : jusqu'ici vous avez travaill√© avec des variables simples : elles ont un nom et une valeur. Par exemple :

<?php
$recipeTitle = 'Cassoulet';
echo "La recette du " . $recipeTitle;
// Cela affichera : La recette du Cassoulet
?>

Ce qui peut se mat√©rialiser sous la forme :

Nom                   Valeur

$recipeTitle          Cassoulet


Ici, nous allons voir qu'il est possible d'enregistrer de nombreuses informations dans une seule variable gr√¢ce aux tableaux. On en distingue deux types :

   1. Les tableaux num√©rot√©s.

   2. Et les tableaux associatifs.

Familiarisez-vous avec les tableaux num√©rot√©s

Ces tableaux sont tr√®s simples √† imaginer. Regardez par exemple celui-ci, contenu de la variable$recipes :

Cl√©       Valeur

0         Cassoulet

1         Couscous

2         Escalope milanaise

3         Salade C√©sar

4         Bo bun

‚Ä¶         ‚Ä¶


$recipesest un array : c'est ce qu'on appelle une variable ¬´ tableau ¬ª. Elle n'a pas qu'une valeur, mais plusieurs (vous pouvez d'ailleurs en mettre autant que vous voulez).

Dans un array, les valeurs sont rang√©es dans des ¬´ cases ¬ª diff√©rentes.

Ici, nous travaillons sur un array num√©rot√©, c'est-√†-dire que chaque case est identifi√©e par un num√©ro. Ce num√©ro est appel√© cl√©.

Attention ! Un array num√©rot√© commence toujours √† la case n¬∞ 0 ! Ne l'oubliez jamais, ou vous risquez de faire des erreurs par la suite‚Ä¶

Construisez un tableau num√©rot√©

Pour cr√©er un tableau num√©rot√© en PHP, on liste ses valeurs entre crochets[]  .

Cet exemple vous montre comment cr√©er l'array $recipes :

<?php

$recipes = ['Cassoulet', 'Couscous', 'Escalope Milanaise', 'Salade C√©sar',];

// La fonction array permet aussi de cr√©er un array
$recipes = array('Cassoulet', 'Couscous', 'Escalope Milanaise');
?>

L'ordre a beaucoup d'importance :

  1. Le premier √©l√©ment (¬´ Cassoulet¬ª) aura le n¬∞ 0.

  2. Ensuite Couscous le n¬∞ 1.

  3. Etc.

Vous pouvez aussi cr√©er manuellement le tableau, case par case :

<?php
$recipes[0] = 'Cassoulet';
$recipes[1] = 'Couscous';
$recipes[2] = 'Escalope Milanaise';
?>

Si vous ne voulez pas avoir √† √©crire vous-m√™me le num√©ro de la case que vous cr√©ez, vous pouvez laisser PHP le s√©lectionner automatiquement en laissant les crochets vides :

<?php
$recipes[] = 'Cassoulet'; // Cr√©era $recipes[0]
$recipes[] = 'Couscous'; // Cr√©era $recipes[1]
$recipes[] = 'Escalope Milanaise'; // Cr√©era $recipes[2]
?>

Affichez un tableau num√©rot√©

Pour afficher un √©l√©ment, il faut donner sa position entre crochets apr√®s  $recipes    .

Cela revient √† dire √† PHP :

¬´ Affiche-moi le contenu de la case n¬∞ 1 de $recipes ¬ª

Pour faire cela en PHP, il faut √©crire le nom de la variable, suivi du num√©ro entre crochets.

Pour afficher ¬´ Couscous ¬ª, on doit donc √©crire :

<?php
echo $recipes[1]; // Cela affichera : Couscous
?>

C'est tout b√™te : du moment que vous n'oubliez pas que Couscous est en seconde position et donc qu'il a le num√©ro 1 (√©tant donn√© qu'on commence √† compter √† partir de 0).

Si vous oubliez de mettre les crochets, √ßa ne marchera pas : cela affichera juste ¬´ Array ¬ª.

D√®s que vous travaillez sur des tableaux, vous √™tes oblig√© d'utiliser les crochets pour indiquer dans quelle ¬´ case ¬ª on doit aller chercher l'information ; sinon PHP ne sait pas quoi r√©cup√©rer.

Familiarisez-vous avec les tableaux associatifs

Les tableaux associatifs fonctionnent sur le m√™me principe, sauf qu'au lieu de num√©roter les cases, on va les √©tiqueter en leur donnant √† chacune un nom diff√©rent.

Notre objectif ici est d'utiliser un tableau pour d√©crire une recette, comme nous l'avions fait dans le chapitre pr√©c√©dent.

Si le tableau est num√©rot√©, comment savoir que le n¬∞ 0 est le titre ? Que le n¬∞ 1 d√©signe la recette ? Que le n¬∞ 2 correspond √† l'auteur ?

C'est l√† que les tableaux associatifs deviennent utiles.

Construisez un tableau associatif

Pour mieux d√©crire notre recette sous forme de tableau, nous pouvons stocker une recette sous la forme d'un tableau associatif, dans lequel chaque cl√© est une propri√©t√© de la recette :

<?php
// Une bien meilleure fa√ßon de stocker une recette !
$recipe = [
    'title' => 'Cassoulet',
    'recipe' => 'Etape 1 : des flageolets, Etape 2 : ...',
    'author' => 'john.doe@exemple.com',
    'enabled' => true,
];

?>

Note importante : il n'y a ici qu'une seule instruction (un seul point-virgule). J'aurais pu tout mettre sur la m√™me ligne, mais rien ne m'emp√™che de s√©parer √ßa sur plusieurs lignes pour que ce soit plus facile √† lire.

Vous remarquez qu'on √©crit une fl√®che ( =>  ) pour dire ¬´ associ√© √† ¬ª.

Par exemple, on dit que la propri√©t√© ¬´ title ¬ª du tableau$recipe a pour valeur ¬´ Cassoulet ¬ª.

Nous avons cr√©√© un tableau qui ressemble √† la structure suivante :

Cl√©        Valeur

title      Cassoulet

recipe     √âtape 1 : des flageolets, √âtape 2 : ...

author     john.doe@exemple.com

enabled    true

Il est aussi possible de cr√©er le tableau case par case, comme ceci :

<?php
$recipe['title'] = 'Cassoulet';
$recipe['recipe'] = 'Etape 1 : des flageolets, Etape 2 : ...';
$recipe['author'] = 'john.doe@exemple.com';
$recipe['enable'] = true;
?>

Affichez un tableau associatif

Pour afficher un √©l√©ment, il suffit d'indiquer le nom de cet √©l√©ment entre crochets, ainsi qu'entre guillemets ou apostrophes, puisque l'√©tiquette du tableau associatif est un texte.

Par exemple, pour extraire le titre de la recette, on devra taper :

<?php
echo $recipe['title'];
?>

Ce code affiche : ¬´ Cassoulet ¬ª.

Quand utiliser un tableau num√©rot√© et quand utiliser un tableau associatif ?

Comme vous l'avez vu dans mes exemples, ils ne servent pas √† stocker la m√™me chose‚Ä¶

  1. Les tableaux num√©rot√©s permettent de stocker une s√©rie d'√©l√©ments du m√™me type, comme des pr√©noms. Chaque √©l√©ment du 
             tableau contiendra alors un pr√©nom.

  2. Les tableaux associatifs permettent de d√©couper une donn√©e en plusieurs sous-√©l√©ments. Par exemple, une adresse peut 
              √™tre d√©coup√©e en nom, pr√©nom, nom de rue, ville‚Ä¶

Dans le chapitre pr√©c√©dent, nous avons pourtant utilis√© un array num√©rot√© alors qu'il aurait fallu utiliser un tableau associatif, non ?

Oui, tout √† fait !

Mais il fallait introduire rapidement les tableaux car qui dit "liste d'√©l√©ments", dit "boucle" !

D'ailleurs, nous allons profiter de ce chapitre pour aborder un nouveau type de boucle, comme √ßa, la boucle est... boucl√©e !

Parcourez un tableau

Lorsqu'un tableau a √©t√© cr√©√©, on a souvent besoin de le parcourir pour savoir ce qu'il contient. Nous allons voir trois moyens d'explorer un tableau :

   1. La boucle  for  .

   2. La boucle  foreach  .

   3. La fonction print_r (utilis√©e principalement pour le d√©boggage).

Avec la boucle for

Il est tr√®s simple de parcourir un tableau num√©rot√© avec une boucle  for  .

Nous l'avions abord√© rapidement dans le chapitre pr√©c√©dent avec un tableau de tableaux.

Pour rappel :

<?php

/**
 * D√©claration du tableau des recettes
 * Chaque √©l√©ment du tableau est un tableau num√©rot√© (une recette)
 */
$recipes = [
    ['Cassoulet','[...]','mickael.andrieu@exemple.com',true,],
    ['Couscous','[...]','mickael.andrieu@exemple.com',false,],
];

for ($lines = 0; $lines <= 1; $lines++) {
    echo $recipes[$lines][0];
}

Quand on √©crit $recipes[$lines], la variable $lines est d'abord remplac√©e par sa valeur.

Exemple :

Si $lines vaut 1, cela signifie qu'on cherche ce que contient $recipes[1][0] , c'est-√†-dire : Couscous.

Bravo, vous avez compris !

Avec la boucle foreach

La boucle for  a beau fonctionner, on peut utiliser un autre type de boucle ‚Äì plus adapt√© aux tableaux ‚Äì qu'on n'a pas encore vu jusqu'ici :  foreach  .

foreach passe en revue chaque ligne du tableau. Lors de chaque passage, elle met la valeur de cette ligne dans une variable temporaire (par exemple $element  ).

Je parle chinois ? Regardez plut√¥t :

<?php

// D√©claration du tableau des recettes
$recipes = [
    ['Cassoulet','[...]','mickael.andrieu@exemple.com',true,],
    ['Couscous','[...]','mickael.andrieu@exemple.com',false,],
];

foreach ($recipes as $recipe) {
    echo $recipe[0]; // Affichera Cassoulet, puis Couscous
}

C'est le m√™me code que tout √† l'heure, mais cette fois bas√© sur une boucle  foreach  .

√Ä chaque tour de boucle, la valeur de l'√©l√©ment suivant est mise dans la variable  $recipe  .

On peut donc utiliser $recipe uniquement √† l'int√©rieur de la boucle, pour afficher l'√©l√©ment en cours.

L'avantage de foreach , c'est qu'il permet aussi de parcourir les tableaux associatifs.

<?php
$recipe = [
    'title' => 'Cassoulet',
    'recipe' => 'Etape 1 : des flageolets, Etape 2 : ...',
    'author' => 'mickael.andrieu@exemple.com',
    'enabled' => true,
];

foreach ($recipe as $value) {
    echo $value;
}

/**
 * AFFICHE
 * CassouletEtape 1 : des flageolets, Etape 2 : ...mickael.andrieu@exemple.com1
 */

foreach va mettre tour √† tour dans la variable $value  :

  - le titre de la recette ;

  - les √©tapes de la recette ;

  - l'auteur ;

  - et la r√©ponse √† "enabled"...

‚Ä¶ contenus dans le tableau $recipe 

On met donc entre parenth√®ses :

  1. D'abord le nom du tableau, ici $recipe  .

  2. Ensuite le mot-cl√© as  (qui signifie ¬´ en tant que ¬ª).

  3. Enfin, le nom d'une variable que vous choisissez, et qui va contenir tour √† tour chacune des valeurs du tableau, ici 
             $value  .

Entre les accolades, on n'utilise donc que la variable  $recipe  .

La boucle s'arr√™te lorsqu'on a parcouru tous les √©l√©ments de l'array.

L'int√©r√™t devient encore plus flagrant quand nous utilisons un tableau de tableaux :

<?php

$recipes = [
    [
        'title' => 'Cassoulet',
        'recipe' => '',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => true,
    ],
    [
        'title' => 'Couscous',
        'recipe' => '',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => false,
    ],
    [
        'title' => 'Escalope milanaise',
        'recipe' => '',
        'author' => 'mathieu.nebra@exemple.com',
        'is_enabled' => true,
    ],
    [
        'title' => 'Salade Romaine',
        'recipe' => '',
        'author' => 'laurene.castor@exemple.com',
        'is_enabled' => false,
    ],
];

foreach($recipes as $recipe) {
    echo $recipe['title'] . ' contribu√©(e) par : ' . $recipe['author'] . PHP_EOL; 
}

Qui produit le r√©sultat suivant :

$ php exemple.php 
Cassoulet contribu√©(e) par : mickael.andrieu@exemple.com
Couscous contribu√©(e) par : mickael.andrieu@exemple.com
Escalope milanaise contribu√©(e) par : mathieu.nebra@exemple.com
Salade Romaine contribu√©(e) par : laurene.castor@exemple.com

Nous n'en avions pas tellement parl√© jusque-l√† puisque nous nous concentrons sur la r√©alisation d'un site web dans ce cours‚Ä¶ Mais PHP est capable d'ex√©cuter des scripts en ligne de commande, un peu sur le m√™me mod√®le que le d√©marrage du serveur web interne.

Pratique quand vous souhaitez tester rapidement les exemples de ce cours, n'est-ce pas ?

Toutefois, avec cet exemple, on ne r√©cup√®re que la valeur. Or, on peut aussi r√©cup√©rer la cl√© de l'√©l√©ment. On doit dans ce cas √©crire foreach  , comme ceci :

<?php foreach($recipe as $property => $propertyValue) ?>

√Ä chaque tour de boucle, on disposera non pas d'une, mais de deux variables :

$property qui contiendra la cl√© de l'√©l√©ment en cours d'analyse (¬´ title ¬ª, ¬´ author ¬ª, etc.).

$propertyValue qui contiendra la valeur de l'√©l√©ment en cours (¬´ Cassoulet ¬ª, ¬´ laurene.castor@exemple.com ¬ª, etc.).

Testons le fonctionnement avec un exemple :

<?php
$recipe = [
    'title' => 'Salade Romaine',
    'recipe' => 'Etape 1 : Lavez la salade ; Etape 2 : euh ...',
    'author' => 'laurene.castor@exemple.com',
];

foreach($recipe as $property => $propertyValue)
{
    echo '[' . $property . '] vaut ' . $propertyValue . PHP_EOL;
}

Qui aura le r√©sultat suivant :

$ php exemple.php 
[title] vaut Salade Romaine
[recipe] vaut Etape 1 : Lavez la salade ; Etape 2 : euh ...
[author] vaut laurene.castor@exemple.com
Avec cette fa√ßon de proc√©der, vous avez maintenant dans la boucle la cl√© ET la valeur.

Et croyez-moi, foreach est une boucle vraiment pratique : on s'en sert r√©guli√®rement !

Affichez rapidement un tableau avec print_r

Parfois, en codant votre site en PHP, vous aurez sur les bras un tableau et vous voudrez savoir ce qu'il contient, juste pour votre information.

Vous pourriez utiliser une boucle for  ou mieux, une boucle  foreach  .

Mais si vous n'avez pas besoin d'une mise en forme sp√©ciale et que vous voulez juste savoir ce que contient le tableau, vous pouvez faire appel √† la fonction print_r  . C'est une sorte de echo  sp√©cialis√© dans les tableaux.

Cette commande a toutefois un d√©faut : elle ne renvoie pas de code HTML comme <br /> pour les retours √† la ligne. Pour bien les voir, il faut donc utiliser la balise HTML <pre>  qui nous permet d'avoir un affichage plus correct.

<?php

$recipes = [
    [
        'title' => 'Cassoulet',
        'recipe' => '',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => true,
    ],
    [
        'title' => 'Couscous',
        'recipe' => '',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => false,
    ],
];

echo '<pre>';
print_r($recipes);
echo '</pre>';

Voil√†, c'est facile √† utiliser : du moment qu'on n'oublie pas la balise <pre>  pour avoir un affichage correct.

Bien entendu, vous n'afficherez jamais des choses comme √ßa √† vos visiteurs. On peut en revanche s'en servir pour le d√©boggage, pendant la cr√©ation du site, afin de voir rapidement ce que contient le tableau.

Recherchez dans un tableau

Nous allons maintenant faire des recherches dans des tableaux. Cela sera tr√®s utile quand vous voudrez savoir si votre tableau contient ou non certaines informations.

Nous allons voir trois types de recherches, bas√©es sur des fonctions PHP :

  1. array_key_exists pour v√©rifier si une cl√© existe dans le tableau.

  2. in_array pour v√©rifier si une valeur existe dans le tableau.

  3. array_search pour r√©cup√©rer la cl√© d'une valeur dans le tableau.

V√©rifiez si une cl√© existe dans un tableau avec array_key_exists

Voici notre probl√®me : on a un array, mais on ne sait pas si la cl√© qu'on cherche s'y trouve.
Pour v√©rifier √ßa, on va utiliser la fonction array_key_exists qui va parcourir le tableau pour nous, et nous dire s'il contient cette cl√©.

On doit lui donner :

  1. Le nom de la cl√© √† rechercher.

  2. Puis le nom du tableau dans lequel on fait la recherche :

<?php array_key_exists('cle', $array); ?>

La fonction renvoie un bool√©en : 

  - true (vrai) si la cl√© est dans le tableau ;

  - false (faux) si la cl√© ne s'y trouve pas.

√áa nous permet de faire un test facilement avec un if :

<?php
$recipe = [
    'title' => 'Salade Romaine',
    'recipe' => 'Etape 1 : Lavez la salade ; Etape 2 : euh ...',
    'author' => 'laurene.castor@exemple.com',
];

if (array_key_exists('title', $recipe))
{
    echo 'La cl√© "title" se trouve dans la recette !';
}

if (array_key_exists('commentaires', $recipe))
{
    echo 'La cl√© "commentaires" se trouve dans la recette !';
}

$ php exemple.php 
La cl√© "title" se trouve dans la recette !

On ne trouvera que ¬´ title ¬ª, et pas ¬´ commentaires ¬ª. C'est logique : seule la premi√®re condition sera donc ex√©cut√©e.

V√©rifiez si une valeur existe dans un tableau avec in_array

Le principe est le m√™me que array_key_exists mais cette fois on recherche dans les valeurs. 

in_array renvoie : 

  - true si la valeur se trouve dans le tableau ;

  - false si elle ne s'y trouve pas.

Pour changer un peu de notre tableau $recipes  , je vais cr√©er un tableau qui contient le nom des utilisateurs du site :

<?php
$users = [
    'Mathieu Nebra',
    'Micka√´l Andrieu',
    'Laur√®ne Castor',
];

if (in_array('Mathieu Nebra', $users))
{
    echo 'Mathieu fait bien partie des utilisateurs enregistr√©s !';
}

if (in_array('Arlette Chabot', $users))
{
    echo 'Arlette fait bien partie des utilisateurs enregistr√©s !';
}

$ php exemple.php 
Mathieu fait bien partie des utilisateurs enregistr√©s !

On ne voit que le message pour Mathieu, car Arlette ne fait pas partie des utilisateurs enregistr√©s.

R√©cup√©rez la cl√© d'une valeur dans un tableau avec array_search

array_search fonctionne comme in_array : il travaille sur les valeurs d'un tableau.

Voici ce que renvoie la fonction :

  - Si elle a trouv√© la valeur, array_search renvoie la cl√© correspondante (dans le cas d'un tableau num√©rot√©, la cl√© sera 
           un num√©ro ; dans le cas d'un tableau associatif, la cl√© sera un nom).

  - Si elle n'a pas trouv√© la valeur, array_search renvoie false  .

On reprend le tableau num√©rot√© :

<?php
$users = [
    'Mathieu Nebra',
    'Micka√´l Andrieu',
    'Laur√®ne Castor',
];

$positionMathieu = array_search('Mathieu Nebra', $users);
echo '"Mathieu" se trouve en position ' . $positionMathieu . PHP_EOL;

$positionLaur√®ne = array_search('Laur√®ne Castor', $users);
echo '"Laur√®ne" se trouve en position ' . $positionLaur√®ne . PHP_EOL;

Je sais que je me r√©p√®te, mais n'oubliez pas qu'un tableau num√©rot√© commence √† 0 !

Cela explique donc pourquoi on nous r√©pond que Mathieu se trouve en position 0 :

$ php exemple.php 
"Mathieu" se trouve en position 0
"Laur√®ne" se trouve en position 2

Voil√† les fonctions qu'il fallait conna√Ætre pour faire une recherche dans un tableau. Il y en a d'autres, mais vous connaissez maintenant les principales.

Exercez-vous 

Avec tout ce que nous avons appris dans ce chapitre, nous pouvons am√©liorer le code d'affichage des recettes de notre projet fil rouge.

1. Utilisez le tableau fourni  $recipes  qui contient plusieurs recettes. Chaque recette poss√®de des cl√©s telles que  
        title  ,  recipe  ,  author  et  is_enabled  : 

<?php
$recipes = [
    [
        'title' => 'Cassoulet',
        'recipe' => 'Etape 1 : des flageolets !',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => true,
    ],
    [
        'title' => 'Couscous',
        'recipe' => 'Etape 1 : de la semoule',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => false,
    ],
    [
        'title' => 'Escalope milanaise',
        'recipe' => 'Etape 1 : prenez une belle escalope',
        'author' => 'mathieu.nebra@exemple.com',
        'is_enabled' => true,
    ],
];

2. Pour chaque recette, v√©rifiez si la cl√©  is_enabled  existe dans la recette et si sa valeur est √©gale √† vrai (  true  ).

3. Si la recette est activ√©e (  is_enabled  √† vrai), affichez le titre, la recette et l'auteur de la recette dans des balises 
        HTML appropri√©es.

4. Testez votre page web : v√©rifiez que l‚Äôaffichage est identique √† l‚Äôimage en dessous :

Vous pouvez retrouver la solution dans le dossier P2C4 du GitHub.

En r√©sum√©

- Les tableaux (ou arrays) sont des variables repr√©sent√©es sous forme de tableau. Elles peuvent stocker de grandes 
     quantit√©s d'informations.

- Chaque ligne d'un tableau poss√®de une cl√© (qui permet de l'identifier) et une valeur.

- Il existe deux types de tableaux :

    - les tableaux num√©rot√©s : chaque ligne est identifi√©e par une cl√© num√©rot√©e. La num√©rotation commence √† partir de 0 ;

    - les tableaux associatifs : chaque ligne est identifi√©e par une courte cha√Æne de texte.

- Pour parcourir un tableau, on peut utiliser la boucle for  que l'on conna√Æt d√©j√†, mais aussi la boucle foreach  qui est 
     d√©di√©e aux tableaux.

- Il existe de nombreuses fonctions permettant de travailler sur des tableaux, notamment pour effectuer des recherches.

Dans le prochain chapitre, nous allons aborder les fonctions PHP, et vous verrez, vous ne pourrez bient√¥t plus vous en passer !

##############################################################################################################

Exploitez toute la puissance des fonctions PHP !

Comme les boucles, les fonctions permettent d'√©viter d'avoir √† r√©p√©ter du code PHP que l'on utilise souvent. Mais alors que les boucles sont de b√™tes machines tout juste capables de r√©p√©ter deux cents fois la m√™me chose, les fonctions sont des robots ¬´ intelligents ¬ª qui s'adaptent en fonction de ce que vous voulez faire, et qui automatisent grandement la plupart des t√¢ches courantes.

Nous profiterons de ces nouvelles connaissances pour am√©liorer et simplifier le code de l'affichage des recettes en recoupant la liste des utilisateurs et des recettes pour afficher, non pas leur e-mail, mais directement leur nom √† c√¥t√© de la recette.

Attendez mais d'abord, qu'est-ce qu'une fonction ?

Une fonction est une s√©rie d'instructions qui effectue des actions et qui retourne une valeur.

En g√©n√©ral, d√®s que vous avez besoin d'effectuer des op√©rations un peu longues dont vous aurez √† nouveau besoin plus tard, il est conseill√© de v√©rifier s'il n'existe pas d√©j√† une fonction qui fait cela pour vous. Et si la fonction n'existe pas, vous avez la possibilit√© de la cr√©er.

Imaginez que les fonctions sont des robots. Vous ne savez pas ce qui se passe √† l'int√©rieur de ce robot, mais vous pouvez appuyer sur un bouton pour lui demander de faire quelque chose de pr√©cis. Avec les fonctions, c'est le m√™me principe !

Comprenez le principe d'une fonction

Voici le genre de dialogue qu'on peut avoir avec une fonction :

"Toi, la fonction allowRecipe  , dis-moi si j'ai le droit d'afficher cette recette".

La fonction effectue les calculs demand√©s puis r√©pond :

"Oui, tu peux".

En clair :

  1. On donne en entr√©e √† la fonction un param√®tre sur lequel elle va faire des calculs (ici, une recette sous forme d'un 
             tableau).

  2. Et la fonction nous retourne en sortie le r√©sultat :  true  .

<?php

$recipe = [
    'title' => 'Escalope milanaise',
    'recipe' => '',
    'author' => 'mathieu.nebra@exemple.com',
    'is_enabled' => true,
];

allowRecipe($recipe); // retourne le bool√©en true

Gr√¢ce √† la fonction, vous n'avez pas besoin de vous souvenir de la mani√®re dont on d√©cide si une recette doit √™tre affich√©e ou non.

Bon, ici c'√©tait assez simple : il suffisait de v√©rifier la valeur de la cl√©  is_enabled  .

Mais vous serez souvent amen√© √† faire des op√©rations de plus en plus complexes, et les fonctions vous permettront de ne pas avoir √† vous soucier des d√©tails des calculs.

Les fonctions deviennent pratiques quand on a besoin de l'information plusieurs fois, et qu'il y a plusieurs conditions √† respecter.

Imaginons par exemple que les conditions pour l'affichage d'une recette √©voluent :

  1. La cl√© is_enabled est true  .

  2. L'utilisateur doit √™tre connect√©.

  3. L'utilisateur doit avoir un r√¥le administrateur.

  4. L'utilisateur doit √™tre majeur.

  5. Etc.

Nous n'allons pas recopier et impl√©menter toutes ces instructions √† chaque fois, nous utiliserons une fonction dont le r√¥le sera de retourner true ou false  .

En quoi est-ce diff√©rent des boucles ? Avec les boucles, on peut faire r√©p√©ter le m√™me code plusieurs fois aussi !

Oui, mais les fonctions sont capables de s'adapter en fonction des informations que vous leur envoyez. Par exemple dans notre cas, il suffit de transmettre l'array  $recipe  √† notre fonction pour qu'elle nous retourne le r√©sultat. Ces informations que l'on donne en entr√©e √† la fonction sont appel√©es param√®tres (un mot √† conna√Ætre !).

Concr√®tement, les fonctions peuvent permettre de r√©cup√©rer des informations comme la date et l'heure actuelles, de chiffrer des donn√©es, d'envoyer des e-mails, de faire des recherches dans du texte, et bien d'autres choses encore !

Nous avons jusqu'ici imagin√© un cas d'utilisation tr√®s simple que nous avions r√©solu pr√©c√©demment avec une boucle et une condition, ce qui n'est pas tr√®s int√©ressant.
Revenons aux choses s√©rieuses et concr√®tes, et explorons les fonctions pour pouvoir par la suite afficher le nom de l'auteur plut√¥t que l'e-mail lors de l'affichage d'une recette.

Appelez une fonction

En PHP, comment appelle-t-on une fonction ? Par son nom, pardi !

Exemple :

<?php
allowRecipe();

La fonction allowRecipe est une fonction imaginaire : elle n'existe pas (√† moins qu'on la cr√©e nous-m√™mes). Par cons√©quent, n'essayez pas d'ex√©cuter ce code PHP chez vous, car il ne fonctionnera pas. Lisez simplement pour bien comprendre le fonctionnement, vous aurez ensuite l'occasion de pratiquer plus loin dans ce chapitre.

Comme vous le voyez, j'ai simplement √©crit le nom de la fonction, suivi de parenth√®ses vides, puis de l'in√©vitable point-virgule. En faisant cela, j'appelle la fonction allowRecipe mais je ne lui envoie aucune information, aucun param√®tre.

Certaines fonctions peuvent fonctionner sans param√®tres, mais elles sont assez rares. Dans le cas de allowRecipe  , √ßa n'a pas de sens de l'appeler sans lui donner la recette n√©cessaire pour d√©cider !

Si on veut lui envoyer un param√®tre (un nombre, une cha√Æne de caract√®res, un bool√©en...), il faut l'√©crire entre les parenth√®ses :

<?php
/**
 * Il n'est pas n√©cessaire de d√©clarer une variable $recipe
 * pour passer l'information en tant que param√®tre d'une fonction.
 */
allowRecipe([
    'title' => 'Escalope milanaise',
    'recipe' => '',
    'author' => 'mathieu.nebra@exemple.com',
    'is_enabled' => true,
]);

Ainsi, allowRecipe saura qu'elle doit travailler avec le tableau PHP pass√© en param√®tre.

Souvent, les fonctions acceptent plusieurs param√®tres. Vous devez dans ce cas les s√©parer par des virgules :

<?php
fonctionImaginaire(17, 'Vert', true, 41.7);

Cette fonction recevra quatre param√®tres :

  - 17 ;

  - le texte ¬´ Vert ¬ª ;

  - le bool√©en Vrai ;

  - et le nombre 41,7.

R√©cup√©rez la valeur de retour de la fonction

Maintenant que nous savons appeler une fonction et m√™me lui envoyer plusieurs param√®tres, il faut r√©cup√©rer ce qu'elle nous retourne, si toutefois elle retourne quelque chose.

Il y a en effet deux types de fonctions :

  1. Celles qui ne retournent aucune valeur (√ßa ne les emp√™che pas d'effectuer des actions).

  2. Celles qui retournent une valeur.

Si la fonction ne retourne aucune valeur, il n'y a rien de plus √† faire que dans les codes pr√©c√©dents. La fonction est appel√©e, elle fait son travail. On ne lui demande rien de plus.

En revanche, si la fonction retourne une valeur (comme √ßa devrait √™tre le cas pour allowRecipe  ), on la r√©cup√®re dans une variable, comme ceci :

<?php
$isAllowed = allowRecipe([
    'title' => 'Escalope milanaise',
    'recipe' => '',
    'author' => 'mathieu.nebra@exemple.com',
    'is_enabled' => true,
]);

if ($isAllowed) {
    echo 'La recette doit √™tre affich√©e !';
} else {
    echo 'La recette doit √™tre cach√©e !';
}

Sur une ligne comme celle-ci, il se passe en fait les deux choses suivantes (dans l'ordre, et de droite √† gauche) :

  1. La fonction allowRecipe est appel√©e avec un tableau en param√®tre.

  2. Le r√©sultat renvoy√© par la fonction (lorsqu'elle a termin√©) est stock√© dans la variable  $isAllowed  .

La variable $isAllowed aura donc pour valeur true apr√®s l'ex√©cution de cette ligne de code !

Bon √† savoir : comme on l'a vu, il est possible d'envoyer en entr√©e plusieurs param√®tres √† une fonction ; en revanche, cette derni√®re ne peut retourner qu'une seule valeur.

Il existe un moyen de contourner cette limitation en combinant des variables au sein d'un tableau de variables (appel√© array) dont nous avons parl√© dans le chapitre pr√©c√©dent.

Utilisez les fonctions pr√™tes √† l'emploi de PHP

PHP propose des centaines de fonctions pr√™tes √† l'emploi. Sur le site officiel, la documentation PHP les r√©pertorie toutes, class√©es par cat√©gorie.

Ces fonctions sont tr√®s pratiques. En fait, c'est en partie l√† que r√©side la force de PHP : ses fonctions sont vraiment excellentes car elles couvrent la quasi-totalit√© de nos besoins. En fait, pratiquement √† chaque fois que je m'appr√™tais √† √©crire une fonction, j'ai pu remarquer que celle-ci existait d√©j√†.

Voici un petit aper√ßu de ce que peuvent vous permettre de faire des fonctions PHP :

  - str_replace pour rechercher et remplacer des mots dans une variable ;

  - move_uploaded_file pour envoyer un fichier sur un serveur ;

  - imagecreate pour cr√©er des images miniatures (aussi appel√©es "thumbnails") ;

  - mail pour envoyer un mail avec PHP (tr√®s pratique pour faire une newsletter) ;

  - de nombreuses options pour modifier des images, y √©crire du texte, tracer des lignes, des rectangles, etc. ;

  - crypt pour chiffrer des mots de passe ;

  - date  pour renvoyer l'heure, la date, etc.

Dans la plupart des cas, il faudra indiquer des param√®tres √† la fonction, pour qu'elle sache sur quoi travailler.

Nous allons ici d√©couvrir rapidement quelques fonctions pour vous habituer √† les utiliser.

Nous ne pourrons jamais toutes les passer en revue (j'ai dit qu'il y en avait des centaines et des centaines !), mais avec l'exp√©rience de ces premi√®res fonctions et la documentation de PHP, vous n'aurez aucun mal √† aller plus loin tout seul.

Nous allons voir :

  - trois fonctions qui effectuent des modifications sur des cha√Ænes de caract√®res ;

  - et une qui permet de r√©cup√©rer la date.

Ce sont seulement des exemples destin√©s √† vous habituer √† utiliser des fonctions.

Manipulez du texte avec les fonctions

De nombreuses fonctions permettent de manipuler le texte. En voici trois qui peuvent √™tre utiles :

  1. strlen pour calculer la longueur d'une cha√Æne de caract√®res ;

  2. str_replace pour rechercher et remplacer une cha√Æne de caract√®res ;

  3. sprintf pour formater une cha√Æne de caract√®res.

Calculez la longueur d'une cha√Æne de caract√®res avec strlen

Cette fonction retourne la longueur d'une cha√Æne de caract√®res, c'est-√†-dire le nombre de lettres et de chiffres dont elle est constitu√©e (espaces compris).

Exemple :

<?php
$recipe = 'Etape 1 : des flageolets ! Etape 2 : de la saucisse toulousaine';
$length = strlen($recipe);
  
echo 'La phrase ci-dessous comporte ' . $length . ' caract√®res :' . PHP_EOL . $recipe;


$ php exemple.php
La phrase ci-dessous comporte 63 caract√®res :
Etape 1 : des flageolets ! Etape 2 : de la saucisse toulousaine

Dans le m√™me ordre d'id√©e, la fonction count  permet aussi de compter le nombre d'√©l√©ments dans un tableau ; car en PHP une cha√Æne de caract√®res, c'est‚Ä¶ un tableau de caract√®res !

Recherchez et remplacez une cha√Æne de caract√®res avec str_replace

str_replace remplace une cha√Æne de caract√®res par une autre.

Exemple :

<?php
echo str_replace('c', 'C', 'le cassoulet, c\'est tr√®s bon');

$ php exemple.php
le Cassoulet, C'est tr√®s bon

On a besoin d'indiquer trois param√®tres :

  1. La cha√Æne qu'on recherche ‚Äì ici, les ¬´ c ¬ª (on aurait pu rechercher un mot aussi).

  2. La cha√Æne qu'on veut mettre √† la place ‚Äì ici, on met des ¬´ C ¬ª √† la place des ¬´ c ¬ª.

  3. La cha√Æne dans laquelle on doit faire la recherche.

Ce qui nous donne ¬´ le Cassoulet, C'est tr√®s bon ¬ª.

Formatez une cha√Æne de caract√®res avec sprintf
La fonction sprintf permet de formater une cha√Æne de caract√®res.

Elle est tr√®s pratique lorsque nous avons besoin de passer plusieurs variables et elle peut remplacer la concat√©nation pour des raisons de lisibilit√© du code.

Cette fonction est tr√®s puissante : n'h√©sitez pas √† jeter un ≈ìil aux exemples de la documentation officielle !

<?php
$recipe = [
    'title' => 'Salade Romaine',
    'recipe' => 'Etape 1 : Lavez la salade ; Etape 2 : euh ...',
    'author' => 'laurene.castor@exemple.com',
];

echo sprintf(
    '%s par "%s" : %s',
    $recipe['title'],
    $recipe['author'],
    $recipe['recipe']
);

$ php exemple.php
Salade Romaine par "laurene.castor@exemple.com" : Etape 1 : Lavez la salade ; Etape 2 : euh ...

R√©cup√©rez la date

Nous allons d√©couvrir la fonction qui renvoie l'heure et la date. Il s'agit de date  (un nom facile √† retenir, avouez !).

Cette fonction peut donner beaucoup d'informations. Voici les principaux param√®tres √† conna√Ætre :

Param√®tre     Description

H             Heure

i             Minute

d             Jour

m             Mois

Y             Ann√©e


Attention ! Respectez les majuscules/minuscules, c'est important !

Si vous voulez afficher l'ann√©e, il faut donc envoyer le param√®tre Y √† la fonction :

<?php
$year = date('Y');
echo $year;

On peut bien entendu faire mieux ; voici la date compl√®te et l'heure :

<?php
// Enregistrons les informations de date dans des variables

$day = date('d');
$month = date('m');
$year = date('Y');

$hour = date('H');
$minute = date('i');

// Maintenant on peut afficher ce qu'on a recueilli
echo 'Bonjour ! Nous sommes le ' . $day . '/' . $month . '/' . $year . 'et il est ' . $hour. ' h ' . $minute;
?>

Et voil√† le travail ! On a pu afficher la date et l'heure en un clin d'≈ìil.

Normalement, quand vous avez test√© le code pr√©c√©dent, vous avez d√ª avoir la date et l'heure exactes (n'h√©sitez donc pas √† essayer d'ex√©cuter ce code source chez vous).

C'est bien, mais √ßa fait beaucoup de code pour afficher simplement la date et l'heure. Y a-t-il une fa√ßon plus concise de le faire en PHP ?

Absolument‚ÄØ! Pour simplifier le code, nous pouvons utiliser les formats de la fonction  date , comme ceci :

$date = date('d/m/Y');
$time = date('H \h i');

Ces lignes de code effectuent le m√™me travail que les lignes pr√©c√©dentes, mais de mani√®re plus concise.  date('d/m/Y')  formate la date sous la forme jour/mois/ann√©e, et  date('H \h i')  formate l'heure sous le format heure h minute (exemple 12 h 25). Voici la version finale :

<?php
// Enregistrons les informations de date dans des variables
$date = date('d/m/Y');
$time = date('H \h i');

// Maintenant on peut afficher ce qu'on a recueilli
echo "Bonjour ! Nous sommes le {$date} et il est {$time}";
?>

Cr√©ez vos propres fonctions

Bien que PHP propose des centaines de fonctions (j'insiste, mais il faut dire qu'il y en a tellement !), parfois il n'y aura pas ce que vous cherchez, et il faudra √©crire vous-m√™me la fonction. C'est une fa√ßon pratique d'√©tendre les possibilit√©s offertes par PHP.

Quand √©crire une fonction ?

En g√©n√©ral, si vous effectuez des op√©rations un peu complexes que vous pensez avoir besoin de refaire r√©guli√®rement, il est conseill√© de cr√©er une fonction.

Nous allons d√©couvrir la cr√©ation de fonctions √† travers trois exemples :

  1. V√©rifier si la recette est valide.

  2. R√©cup√©rer des recettes √† afficher.

  3. R√©cup√©rer le nom d'un utilisateur en fonction de l'e-mail associ√© √† la cr√©ation d'une recette.

Exemple 1 : v√©rifiez la validit√© d'une recette

Un premier exemple simple, c'est d'√©tablir une fonction qui retourne :

true  si la recette est valide ;

faux  si la recette ne l'est pas.

Pour cela, nous avions utilis√© une condition if pour v√©rifier la propri√©t√© is_enabled de la recette. C'est l'occasion de r√©utiliser des connaissances vues dans le chapitre des tableaux et des conditions :

<?php

$recipe = [
    'title' => 'Salade Romaine',
    'recipe' => 'Etape 1 : Lavez la salade ; Etape 2 : euh ...',
    'author' => 'laurene.castor@exemple.com',
    'is_enabled' => true,
];

// au minimum
if ($recipe['is_enabled']) {
    return true;
} else {
    return false;
}

// mieux
$isEnabled = $recipe['is_enabled'];

// encore mieux !
if (array_key_exists('is_enabled', $recipe)) {
    $isEnabled = $recipe['is_enabled'];
} else {
    $isEnabled = false;
}

On va quand m√™me pas r√©√©crire √ßa √† chaque fois qu'on a besoin de v√©rifier si une recette est valide, si ? 

Non, c'est tout l'objectif de ce chapitre du cours !

Voici la fonction correspondante :

<?php

function isValidRecipe(array $recipe) : bool
{
    if (array_key_exists('is_enabled', $recipe)) {
        $isEnabled = $recipe['is_enabled'];
    } else {
        $isEnabled = false;
    }

    return $isEnabled;
}

Pour cr√©er une fonction,

  1. Vous devez taper function  (en fran√ßais, √ßa veut dire ¬´ fonction ¬ª).

  2. Ensuite, donnez-lui un nom. Par exemple, celle-ci s'appelle  isValidRecipe  .

Ce qui est plus particulier apr√®s, c'est ce qu'on met entre parenth√®ses : il y a une variable. C'est le param√®tre dont a besoin la fonction pour travailler, ici il s'agit de notre tableau.

Nous pouvons ‚Äì et c'est une bonne pratique ‚Äì d√©finir le type de la variable attendue : ici, nous souhaitons un tableau donc nous pr√©fixons la variable $recipe par le mot-cl√©   array  .

Notre fonction doit forc√©ment √™tre appel√©e avec un param√®tre (une recette), sans quoi elle va g√©n√©rer une erreur.

Vous avez peut-√™tre remarqu√© que cette ligne est la seule √† ne pas se terminer par un point-virgule. C'est normal, il ne s'agit pas d'une instruction mais juste d'une ¬´ carte d'identit√© ¬ª de la fonction (son nom, ses param√®tres‚Ä¶).

Notre fonction peut aussi ‚Äì et c'est une deuxi√®me bonne pratique ‚Äì donner un type de retour, c'est-√†-dire le type de valeur que la fonction doit retourner.

Ici, nous r√©cup√©rons soit true , soit  false donc le type est bool.

Ensuite, vous rep√©rez des accolades. Elles permettent de marquer les limites de la fonction. Cette derni√®re commence d√®s qu'il y a une {  et se termine lorsqu'il y a une } . Entre les deux, il y a son contenu.

Voil√†, la fonction est cr√©√©e, vous n'avez plus besoin d'y toucher. Apr√®s, pour faire appel √† elle, il suffit d'indiquer son nom, et de pr√©ciser ses param√®tres entre parenth√®ses.

Il ne faut pas oublier le fameux point-virgule ( ; ), car il s'agit d'une instruction.

Exemple :

<?php

// 2 exemples
$romanSalad = [
    'title' => 'Salade Romaine',
    'recipe' => 'Etape 1 : Lavez la salade ; Etape 2 : euh ...',
    'author' => 'laurene.castor@exemple.com',
    'is_enabled' => true,
];

$sushis = [
    'title' => 'Sushis',
    'recipe' => 'Etape 1 : du saumon ; Etape 2 : du riz',
    'author' => 'laurene.castor@exemple.com',
    'is_enabled' => false,
];


// R√©pond true !
$isRomandSaladValid = isValidRecipe($romanSalad);

// R√©pond false !
$isSushisValid = isValidRecipe($sushis);

Un conseil : basez-vous sur mes exemples et essayez de les retoucher petit √† petit pour voir ce que √ßa donne. Il peut y avoir des fonctions tr√®s simples comme des fonctions tr√®s compliqu√©es, alors allez-y prudemment.

Exemple 2 : r√©cup√©rez les recettes "valides"

Rappelez-vous, nous avions convenu que nous devions afficher la liste des recettes valides.

Nous venons de cr√©er la fonction qui permet de v√©rifier qu'une recette est valide, il nous manque maintenant √† boucler sur la liste des recettes : voil√† une premi√®re occasion de r√©utiliser la fonction cr√©√©e pr√©c√©demment !

<?php

$recipes = [...]; // Les recettes

// AVANT

foreach ($recipes as $recipe) {
    if ($recipe['is_enabled']) {
        // echo $recipe['title'] ..
    }
}

// APRES

function getRecipes(array $recipes) : array
{
    $validRecipes = [];

    foreach($recipes as $recipe) {
        if (isValidRecipe($recipe)) {
            $validRecipes[] = $recipe;
        }
    }

    return $validRecipes;
}

// construire l'affichage HTML des recettes
foreach(getRecipes($recipes) as $recipe) {
    // echo $recipe['title'] .. 
}

Ici, la fonction contient le code n√©cessaire √† la r√©cup√©ration des recettes valides.

Comme pr√©c√©demment, on boucle et on ne conserve que les recettes valides identifi√©es gr√¢ce √† la fonction  isValidRecipe  .

Il n'est pas n√©cessaire d'assigner le r√©sultat d'une fonction √† une variable ! Nous voyons ici que nous passons directement la fonction getRecipes dans la boucle (nous savons que c'est un tableau parce que nous avons d√©fini le type de retour).

Exemple 3 : affichez le nom de l'auteur

Allez, on passe √† la vitesse sup√©rieure. Nous allons cr√©er une fonction pour am√©liorer l'affichage, ce qui nous donne √† nouveau l'occasion de manipuler des tableaux.

Cette fois, la probl√©matique est de relier l'e-mail associ√© √† un compte utilisateur √† l'e-mail utilis√© pour la contribution d'une recette.

Si on d√©coupe le probl√®me en √©tapes, vous avez d√©j√† toutes les connaissances n√©cessaires :

  1. Prendre l'e-mail.

  2. Boucler sur les utilisateurs de la plateforme.

  3. Si les e-mails correspondent, prendre le nom et l'√¢ge.

  4. Sinon, continuer √† parcourir la liste des utilisateurs.

Une solution tout √† fait valide serait donc celle-ci (avec une boucle dans une boucle) :

<?php
function displayAuthor(string $authorEmail, array $users): string
{
    foreach ($users as $user) {
        if ($authorEmail === $user['email']) {
            return $user['full_name'] . '(' . $user['age'] . ' ans)';
        }
    }
}

Avec pour r√©sultat ceci :

Exploitez toute la puissance de la documentation PHP !

Le langage PHP fournit √©norm√©ment de fonctions pour vous aider √† d√©velopper vos sites web, vous devez donc toutes les apprendre.

Bien s√ªr que non !

L'√©quipe de d√©veloppeurs qui a cr√©√© et fait √©voluer PHP a publi√© un site web dans lequel toutes les fonctions du langage PHP sont expliqu√©es et d√©taill√©es avec des exemples !

Je vous propose de consulter la vid√©o ci-dessous pour apprendre comment l'utiliser de la  fa√ßon la plus efficace possible.

Exercez-vous

Ajoutons les fonctions dans notre projet fil rouge.

1. Utilisez le tableau fourni  $users  qui contient plusieurs utilisateurs. Chaque utilisateur poss√®de des cl√©s telles que  full_name  , email  et age. 

<?php

$users = [
    [
        'full_name' => 'Micka√´l Andrieu',
        'email' => 'mickael.andrieu@exemple.com',
        'age' => 34,
    ],
    [
        'full_name' => 'Mathieu Nebra',
        'email' => 'mathieu.nebra@exemple.com',
        'age' => 34,
    ],
    [
        'full_name' => 'Laur√®ne Castor',
        'email' => 'laurene.castor@exemple.com',
        'age' => 28,
    ],
];

2. Ajoutez les fonctions  isValidRecipe ,  getRecipes  et displayAuthor.

3. Retirez le test pour savoir si une recette est activ√©e.

4. Modifiez la boucle pour utiliser la fonction  getRecipes √† la place du tableau des recettes.

5. Utilisez la fonction  displayAuthor  pour afficher l'auteur.

6. Testez votre page web : assurez-vous que votre page affiche les recettes avec l'auteur et son √¢ge.

Vous pouvez retrouver la solution dans le dossier P2C5 du GitHub.

En r√©sum√©

- Les fonctions sont des blocs de code qui ex√©cutent des instructions selon certains param√®tres.

- Les fonctions ont g√©n√©ralement une entr√©e et une sortie, et peuvent avoir un type (string, int, bool, array...).

- PHP propose des centaines de fonctions pr√™tes √† l'emploi pour tout type de t√¢ches : envoyer un e-mail, r√©cup√©rer l'heure, 
     chiffrer des mots de passe, etc.

- Si PHP ne propose pas la fonction dont on a besoin, il est possible de la cr√©er avec le mot-cl√© function : on d√©finira alors 
     le type des param√®tres et du retour de la fonction.

OK c'√©tait bien tout √ßa, mais qu'est-ce que je fais si mon script plante ?

C'est justement ce que l'on va voir dans le prochain chapitre. Allez, suivez-moi !

##############################################################################################################

Au secours !  Mon script plante !

Alors comme √ßa, votre script ne marche pas ? Et PHP vous affiche des erreurs incompr√©hensibles ?

Pas de souci √† vous faire, c'est tout √† fait normal, on ne r√©ussit jamais un script du premier coup‚Ä¶ en tout cas, moi, jamais !

Des milliers de messages d'erreur diff√©rents peuvent survenir.

OK, jusque-l√† rien de tr√®s rassurant. Et je n'ai pas vraiment la possibilit√© de vous en dresser une liste compl√®te‚Ä¶ mais je peux vous pr√©senter les erreurs les plus courantes, ce qui devrait r√©soudre la grande majorit√© de vos probl√®mes. üòÖ

Allons-y !

Pr√©parez-vous √† faire ces erreurs courantes

Je pense qu'il est facile de parler d'erreurs ¬´ courantes ¬ª, car vous verrez que certaines erreurs reviennent plus souvent que d'autres.

Nous allons passer en revue les erreurs suivantes :

  1. "Parse error".

  2. "Undefined function".

  3. "Wrong parameter count".

"Parse error" = si vous formulez mal une instruction

Si on devait dire qu'il existe UNE erreur de base, √ßa serait tr√®s certainement celle-l√†. Impossible de programmer en PHP sans y avoir droit un jour.

Le message d'erreur que vous obtenez ressemble √† celui-ci :

Parse error: syntax error in error.php on line 7

Ce message vous indique une erreur dans error .php √† la ligne 7.

G√©n√©ralement, cela veut dire que votre probl√®me se situe √† la ligne 7, mais ce n'est pas toujours le cas (trop facile, sinon). Parfois, c'est la ligne pr√©c√©dente qui a un probl√®me : pensez donc √† regarder autour de la ligne indiqu√©e.

Avec un √©diteur de texte sp√©cialis√© comme Visual Studio Code, vous pouvez voir les num√©ros de ligne.

Bon, mais concr√®tement, qu'est-ce qu'une parse error ?

Une "parse error" est en fait une instruction PHP mal form√©e. Il peut y avoir plusieurs causes :

Oublier le point-virgule √† la fin de l'instruction.

Comme toutes les instructions doivent se terminer par un point-virgule, si vous oubliez d'en mettre un, √ßa provoquera une parse error. Par exemple :

$id_news = 5

‚Ä¶ g√©n√®rera une parse error. Si vous mettez le point-virgule √† la fin, tout rentrera dans l'ordre !

$id_news = 5;

Oublier de fermer un guillemet (une apostrophe ou une parenth√®se).

Par exemple :

echo "Bonjour !;

Il suffit de fermer correctement les guillemets et vous n'aurez plus de probl√®me :

echo "Bonjour !";

Se tromper dans la concat√©nation et oublier un point.

echo "J'ai " . $age " ans";

Une fois l'erreur corrig√©e, √ßa donne :

echo "J'ai " . $age . " ans";

Mal fermer une accolade.

Cela peut √™tre le cas pour une structure en if  , par exemple.

V√©rifiez que vous avez correctement ferm√© toutes vos accolades.

Si vous oubliez d'en fermer une, il est probable que la parse error vous indique que l'erreur se trouve √† la derni√®re ligne du fichier (c'est-√†-dire √† la ligne 115 si votre fichier comporte 115 lignes).

Donc, si on vous indique une erreur √† la derni√®re ligne, il va probablement falloir relire tout le fichier PHP √† la recherche d'une accolade mal ferm√©e !

Si on vous dit que l'erreur est √† la ligne 15 et que vous ne voyez vraiment pas d'erreur √† cette ligne, n'h√©sitez pas √† chercher l'erreur √† la ligne juste au-dessus, elle s'y trouve peut-√™tre !

"Undefined function" = si vous utilisez une fonction non reconnue

Une autre erreur assez classique, c'est la fonction inconnue.

Vous obtenez ce message d'erreur :

Fatal Error: Call to undefined function: is_valid_recipe() in fichier.php on line 27

L√†, il faut comprendre que vous avez utilis√© une fonction qui n'existe pas.

Deux possibilit√©s :

  1. Soit la fonction n'existe vraiment pas. Vous avez probablement fait une faute de frappe, v√©rifiez si une fonction √† 
             l'orthographe similaire existe.

  2. Soit la fonction existe vraiment, mais PHP ne la reconna√Æt pas. C'est parce que cette fonction se trouve dans une 
              extension de PHP que vous n'avez pas activ√©e. Par exemple, si vous essayez d'utiliser la fonction imagepng alors que 
              vous n'avez pas activ√© la biblioth√®que n√©cessaire pour les images en PHP, on vous dira que la fonction n'existe pas. 
              Activez la biblioth√®que qui utilise la fonction, et tout sera r√©gl√©.

Une derni√®re chose : il se peut aussi que vous essayiez d'utiliser une fonction qui n'est pas disponible dans la version de PHP que vous avez. V√©rifiez dans le manuel dans quelles versions de PHP cette fonction est disponible.

"Wrong parameter count" = si vous entrez un nombre incorrect de param√®tres pour une fonction

Si vous utilisez mal une fonction, vous aurez cette erreur :

Warning: Wrong parameter count for fonction() in fichier.php on line 112

Cela signifie que :

  - vous avez oubli√© des param√®tres pour la fonction ;

  - ou m√™me que vous en avez trop mis.

S'il s'agit d'une fonction fournie par PHP, rendez-vous sur la documentation et consultez le mode d'emploi de la fonction pour savoir combien de param√®tres elle prend, et quels sont ceux qui sont facultatifs.

Par exemple, la fonction fopen requiert au minimum deux param√®tres :

  1. Le premier pour le nom du fichier √† ouvrir.

  2. Et le second pour le mode d'ouverture (en lecture seule, √©criture, etc.).

Si vous ne mettez que le nom du fichier √† ouvrir, comme ceci :

$fichier = fopen("fichier.txt");

‚Ä¶ vous aurez l'erreur ¬´ Wrong parameter count ¬ª. Pensez donc √† rajouter le param√®tre qui manque, par exemple comme ceci :

$fichier = fopen("fichier.txt", "r");

D√©couvrez ces erreurs plus rares

Les erreurs PHP sont tr√®s vari√©es. N'esp√©rez donc pas que je vous fasse ici la liste des 3 946 erreurs de PHP, j'en serais incapable (je ne les ai pas encore toutes eues, mais √ßa ne saurait tarder, √† l'allure √† laquelle je vais).

Je vais vous montrer quelques erreurs un peu plus rares que ¬´ parse error ¬ª, mais que vous rencontrerez probablement un jour. Si d√©j√† je peux vous aider pour ces erreurs-l√†, ce sera bien.

Nous allons voir les erreurs :

  1. "Headers already sent by‚Ä¶".

  2. "L'image contient des erreurs".

  3. "Maximum execution time exceeded".

"Headers already sent by‚Ä¶" = si vous √©crivez du code au mauvais endroit

Voil√† une erreur classique quand on travaille avec les sessions ou avec les cookies :

Cannot modify header information - headers already sent by ...

Que doit-on comprendre par l√† ?

Les "headers" sont des informations d'en-t√™te  qui sont envoy√©es avant toute chose au navigateur du visiteur.

Elles permettent de dire :

"Ce que tu vas recevoir est une page HTML".

ou

"Ce que tu vas recevoir est une image PNG", ou encore "Inscris un cookie".

Toutes ces choses-l√† doivent √™tre effectu√©es avant que le moindre code HTML ne soit envoy√©.

En PHP, la fonction qui permet d'envoyer des informations de "headers" s'appelle  header() 

. Il y a d'autres fonctions qui envoient des "headers" toutes seules. C'est le cas de :

   -  session_start() 

   -  setcookie()  

Ce que vous devez retenir, c'est que chacune de ces fonctions doit √™tre utilis√©e au tout d√©but de votre code PHP. Il ne faut RIEN mettre avant, sinon √ßa provoquera l'erreur ¬´ Headers already sent by‚Ä¶ ¬ª

Un exemple de code qui g√©n√®re l'erreur :

<html>
<?php session_start(); ?>

Ici, j'ai eu le malheur de mettre un peu de code HTML avant le session_start() et c'est ce qui a provoqu√© l'erreur.

Mettez le session_start() en tout premier, et vous n'aurez plus de probl√®me :

<?php session_start(); ?>
<html>

"L'image contient des erreurs" = si vous avez fait une erreur d'utilisation de la librairie GD

C'est le navigateur qui vous donne ce message d'erreur, et non pas PHP.

Ce message survient lorsque vous travaillez avec la biblioth√®que GD.

Si vous avez fait une erreur dans votre code (par exemple une banale ¬´ parse error ¬ª), cette erreur sera inscrite dans l'image. Du coup, l'image ne sera pas valide et le navigateur ne pourra pas l'afficher.

Bon, d'accord, l'erreur est dans l'image. Mais comment faire pour faire ¬´ appara√Ætre ¬ª l'erreur ?

Deux possibilit√©s :

   - vous pouvez supprimer la ligne suivante dans votre code :

<?php header ("Content-type: image/png"); ?>

L'erreur appara√Ætra √† la place du message ¬´ L'image contient des erreurs ¬ª ;

   - vous pouvez aussi afficher le code source de l'image (comme si vous alliez regarder la source HTML de la page, sauf que 
             l√†, il s'agit d'une image).

Dans les deux cas, vous verrez le message d'erreur appara√Ætre. √Ä partir de l√†, il ne vous restera plus qu'√† corriger le bug !

"Maximum execution time exceeded" = si vous avez fait une boucle infinie

√áa, c'est le genre d'erreur qui arrive le plus souvent √† cause d'une boucle infinie !

Fatal error: Maximum execution time exceeded in fichier.php on line 57

Imaginez que vous fassiez une boucle while mais que celle-ci ne s'arr√™te jamais : votre script PHP va tourner en boucle sans jamais s'arr√™ter.

Heureusement, PHP limite le temps d'ex√©cution d'une page PHP √† 30 secondes par d√©faut.

Si une page met plus de 30 secondes √† se g√©n√©rer, PHP arr√™te tout en signalant que c'est trop long. Et il fait bien, parce que sinon cela pourrait ralentir tout le serveur et rendre votre site inaccessible !

Voici un exemple de boucle while qui ne s'arr√™tera jamais :

<?php
$counter = 5;
while ($counter === 5)
{
    echo 'Z√©ro ';
}
?>

Comme vous pouvez le voir, un tel code PHP ne s'arr√™tera jamais parce que $counter vaut toujours 5‚Ä¶

Si vous avez donc l'erreur "Maximum execution time exceeded", il va falloir rep√©rer une boucle qui ne s'arr√™te jamais, car c'est elle qui provoque ce probl√®me.

Rassurez-vous : la limite est fix√©e √† 30 secondes, mais vous n'y serez jamais confront√©. En g√©n√©ral, un serveur met moins de 50 millisecondes √† charger une page PHP. On est tr√®s loin des 30 secondes !

D√©boguez votre premier script

Rien ne vaut la pratique pour mettre en application ce que vous venez d'apprendre ! Je vous propose donc de copier le code ci-dessous et de le corriger :

<?php
$users = [
    [
        'full_name' => 'Micka√´l Andrieu',
        'email' => 'mickael.andrieu@exemple.com'
        'age' => 34,
    ],
    [
        'full_name' => 'Mathieu Nebra',
        'email' => 'mathieu.nebra@exemple.com',
        'age' => 34,
    ],
    [
        'full_name' => 'Laur√®ne Castor',
        'email' => 'laurene.castor@exemple.com',
        'age' => 28,
    ],
];

$recipes = [
    [
        'title' => 'Cassoulet',
        'recipe' => 'Etape 1 : des flageolets !',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => true,
    ],
    [
        'title' => 'Couscous',
        'recipe' => 'Etape 1 : de la semoule',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => false,
    ],
    [
        'title' => 'Escalope milanaise',
        'recipe' => 'Etape 1 : prenez une belle escalope',
        'author' => 'mathieu.nebra@exemple.com',
        'is_enabled' => true,
    ],
    [
        'title' => 'Salade Romaine',
        'recipe' => 'Etape 1 : prenez une belle salade',
        'author' => 'lorene.castor@exemple.com',
        'is_enablad' => true,
    ],
];

function displayAuthor(string $authorEmail, array $users): string
    {
        //var_dump($authorEmail); die();
        foreach($users as $user) {
            if ($authorEmail === $user['email']) {
                return $user['full_name'] . '(' . $user['age'] . ' ans)';
            }
        }
    }
function isValidRecipe(array $recipe): bool
    {
        return $recipe['is_enabled'];
    }
function getRecipes(array $recipes) : array
    {
        $valid_recipes = [];
        foreach($recipes as $recipe) {
            if (isValidRecipe($recipe)) {
                $valid_recipes[] = $recipe;
            }
        }
    return $valid_recipes;
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Recettes de cuisine : Erreur(</title>
    <link
href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
rel="stylesheet"
>
</head>

<body>
    <div class="container">
        <h1>Liste des recettes de cuisine</h1>
        <?php foreach(getRecipes($recipes) as $recipe) : ?>
        <article>
            <h3><?php echo($recipe['title']); ?></h3>
            <div><?php echo($recipe['recipe']); ?></div>
            <i><?php echo(displayAuthor($recipe['author'], $users)); ?></i>
        </article>
        <?php endforeach ?>
    </div>
</body>
</html>

Vous pouvez retrouver le code source avec les erreurs dans le dossier ErrorsVersion du GitHub.

Pour rappel :

  1. Il faut soit mettre ce fichier dans un dossier accessible √† votre serveur, soit ex√©cuter le serveur local de PHP dans 
             le dossier qui contient ce fichier.

  2. Il faut avoir activ√© le d√©boggage et configur√© la propri√©t√© display_error.

  3. Il y a plusieurs erreurs √† corriger : allez-y par √©tape, sans paniquer.

Alors, avez-vous fait des erreurs en corrigeant des erreurs ? ü§£

La premi√®re erreur affich√©e par PHP est la suivante :

Parse error: syntax error, unexpected single-quoted string "age", expecting "]" in index.php on line 7
Il y a donc une erreur √† la ligne 7, ou autour... vous aurez peut √™tre remarqu√© qu'il manque une virgule en ligne 6 juste apr√®s l'assignation de la propri√©t√© email :

<?php
// avant
[
    'title' => 'Salade Romaine',
    'recipe' => '',
    'author' => 'laurene.castor@exemple.com',
    'is_enablad' => true, // OUPS
]

// apr√®s
[
    'title' => 'Salade Romaine',
    'recipe' => '',
    'author' => 'laurene.castor@exemple.com',
    'is_enabled' => false,
]

La deuxi√®me erreur est plus discr√®te puisque le site a l'air de s'afficher correctement sous vos yeux, mais il y a pourtant un message d'erreur sous le titre principal :

Warning: Undefined array key "is_enabled" in index.php on line 59
L'index ou la cl√© pour le tableau $recipe ne semblent pas d√©finis (bug qui ne serait jamais arriv√© si on avait utilis√© la fonction array_key_exists, d'ailleurs ! ü§ì

Il va nous falloir v√©rifier le tableau des recettes et compl√©ter ou corriger :

<?php
// avant
[
    'title' => 'Salade Romaine',
    'recipe' => '',
    'author' => 'lorene.castor@exemple.com',
    'is_enablad' => true, // OUPS
]

// apr√®s
[
    'title' => 'Salade Romaine',
    'recipe' => '',
    'author' => 'lorene.castor@exemple.com',
    'is_enabled' => true,
]

Il y avait une toute petite coquille : is_enabled avait √©t√© remplac√© par  is_enablad  .

La troisi√®me erreur et derni√®re erreur est beaucoup plus bavarde :

Fatal error: Uncaught TypeError: displayAuthor(): Return value must be of type string, none returned in index.php:55 Stack trace: index.php(92): displayAuthor('lorene.castor@e...', Array) #1 {main} thrown in index.php
Cette fois, l'erreur provient du retour de la fonction displayAuthor qui doit retourner une cha√Æne de caract√®res (le nom de l'utilisateur) et retourne... rien (None).

Que s'est-il pass√© ?

<?php
function displayAuthor(string $authorEmail, array $users): string
{
    foreach ($users as $user) {
        if ($authorEmail === $user['email']) {
            return $user['full_name'] . '(' . $user['age'] . ' ans)';
        }
    }
}

Si l'on consid√®re le code de la fonction, on peut noter que si l'e-mail est trouv√©, alors le nom et l'√¢ge de l'utilisateur sont retourn√©s.

Mais si l'e-mail n'est pas trouv√© ? 

Eh bien, il ne se passe rien car le cas n'a pas √©t√© pr√©vu. Le plus simple est de retourner une cha√Æne de caract√®re m√™me si l‚Äôemail n‚Äôa pas √©t√© trouv√© (‚ÄúAuteur inconnu‚Äù) :

<?php
function displayAuthor(string $authorEmail, array $users): string
{
    foreach ($users as $user) {
        if ($authorEmail === $user['email']) {
            return $user['full_name'] . '(' . $user['age'] . ' ans)';
        }
    }
    return 'Auteur inconnu';
}

Vous pouvez retrouver le code corrig√© dans le dossier FixedVersion du GitHub et on se retrouve au prochain chapitre‚ÄØ!

En r√©sum√©

- Vous rencontrerez des bugs dans vos projets, c'est in√©luctable.

- Ne paniquez pas, lisez et essayez de comprendre le message d'erreur.

- Vous pouvez aussi copier le message d'erreur et le rechercher sur Internet : il y a de fortes chances que d'autres 
     personnes aient d√©j√† rencontr√© ce probl√®me. 

Nous approchons de la fin de cette partie du cours, mais avant, un dernier point important : nous allons voir comment faire pour organiser les pages de votre site en blocs fonctionnels.

##############################################################################################################

Organisez les pages de votre site en blocs fonctionnels

Jusque-l√†, nous avions travaill√© sur la page d'accueil de notre site, qui contient la liste des articles.

Mais notre projet va contenir plusieurs pages :

  - Une page "recettes".

  - Une page d'√©dition et de cr√©ation de recette.

  - Une page avec un formulaire de contact.

Et pour pouvoir acc√©der √† ces pages, il faudra n√©cessairement quelques liens HTML regroup√©s dans un menu principal.

Vous est-il d√©j√† arriv√© de vouloir modifier le menu de votre site et de devoir pour cela corriger le code HTML de chacune de vos pages web ?

Le menu d'une page web appara√Æt en effet sur chacune des pages, et vous avez tr√®s certainement d√ª le recopier sur chacune d'elles. √áa marche, mais ce n'est pas tr√®s pratique‚Ä¶

Une des fonctionnalit√©s les plus simples et les plus utiles de PHP est l'inclusion de pages.

On peut tr√®s facilement inclure toute une page, ou un bout de page √† l'int√©rieur d'une autre. Cela vous √©vitera d'avoir √† copier le m√™me code HTML plusieurs fois.

Au fil de ce chapitre, vous allez d√©couvrir un des multiples avantages que vous donne le PHP lors de la cr√©ation de votre site. C'est d'ailleurs ce qui m'a fait instantan√©ment aimer ce langage lorsque je l'ai d√©couvert, alors que je venais comme vous seulement d'apprendre le HTML et le CSS. üòâ

Visualisez le d√©coupage d'une page web

La plupart des sites web sont g√©n√©ralement d√©coup√©s selon le sch√©ma suivant.

Jusqu'ici, vous √©tiez condamn√© √† copier sur chaque page √† l'identique :

  - l'en-t√™te ;

  - le menu ;

  - le pied de page.

Cela donnait du code lourd et r√©p√©titif sur toutes les pages !

Regardez le code d'exemple ci-dessous qui repr√©sente une page web avec un en-t√™te, un menu et un pied de page. Appelons cette page :  index.php  .

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>Mon super site</title>
    </head>
 
    <body>
 
    <!-- L'en-t√™te -->
    
    <header>
        <!-- Le menu -->
    
        <nav id="menu">        
            <div class="element_menu">
                <h3>Titre menu</h3>
                <ul>
                    <li><a href="page1.html">Lien</a></li>
                    <li><a href="page2.html">Lien</a></li>
                    <li><a href="page3.html">Lien</a></li>
                </ul>
            </div>    
        </nav>
       
    </header>
    
    <!-- Le corps -->
    
    <div id="corps">
        <h1>Mon super site</h1>
        
        <p>
            Bienvenue sur mon super site !<br />
            Vous allez adorer ici, c'est un site g√©nial qui va parler de... euh... Je cherche encore un peu le th√®me de mon site. :-D
        </p>
    </div>
    
    <!-- Le pied de page -->
    
    <footer id="pied_de_page">
        <p>Copyright moi, tous droits r√©serv√©s</p>
    </footer>
    
    </body>
</html>

D'une page √† l'autre, ce site contiendra √† chaque fois le m√™me code pour l'en-t√™te, le menu et le pied de page ! En effet, seul le contenu du corps change, en temps normal.

Pensez votre contenu web en blocs fonctionnels

En PHP, nous pouvons facilement ins√©rer d'autres pages. Mais on peut aussi ins√©rer des morceaux de pages, √† l'int√©rieur d'une page.

Le principe de fonctionnement des inclusions en PHP est plut√¥t simple √† comprendre. Vous avez un site web compos√© de, disons, vingt pages. Sur chaque page, il y a un menu, toujours le m√™me. Pourquoi ne pas √©crire ce menu (et seulement lui) une seule fois dans une page header.php  ?

En PHP, vous allez pouvoir inclure votre menu sur toutes vos pages.

Lorsque vous voudrez modifier votre menu, vous n'aurez qu'√† modifier header.php  , et l'ensemble des pages de votre site web sera automatiquement mis √† jour !

Maintenant, imaginez que vous ayez besoin de fonctions ou de variables sur toutes les pages du site.

Cr√©ons un nouveau fichier PHP : nous allons ins√©rer uniquement le code HTML correspondant √† votre menu, comme ceci :

<nav id="menu">        
    <div class="element_menu">
        <h3>Titre menu</h3>
        <ul>
            <li><a href="page1.html">Lien</a></li>
            <li><a href="page2.html">Lien</a></li>
            <li><a href="page3.html">Lien</a></li>
        </ul>
    </div>    
</nav>

Faites de m√™me pour la page pied_de_page.php et toute autre page utile, en fonction des besoins de votre site.

Mais‚Ä¶ la page headers.php ne contient pas le moindre code PHP‚Ä¶ c'est normal ?

Une page dont l'extension est .php  peut tr√®s bien ne contenir aucune balise PHP (m√™me si c'est plut√¥t rare). Dans ce cas, cela redevient une page HTML classique qui n'est pas modifi√©e avant l'envoi.

En th√©orie, vous pourriez tr√®s bien enregistrer votre page avec l'extension .html  :  header.html  .

N√©anmoins, afin d'√©viter de m√©langer des pages .php  et .html  sur votre site, je vous recommande de travailler uniquement avec l'extension .php  √† partir de maintenant.

Maintenant que vos ¬´ morceaux de pages ¬ª sont pr√™ts :

  1. Reprenez les pages de votre site, par exemple la page d'accueil nomm√©e index.php  .

  2. Remplacez le menu par le code PHP suivant :

<?php require_once(__DIR__ . '/header.php'); ?>

Cette instruction ordonne √† l'ordinateur :

¬´ Ins√®re ici le contenu de la page header.php ¬ª.

__DIR__ est une constante magique en PHP qui renvoie le chemin absolu du r√©pertoire du fichier courant. Son utilisation, comme dans  require_once(__DIR__ . '/header.php');  , est recommand√©e pour assurer la portabilit√©, √©viter les probl√®mes de chemins relatifs et renforcer la s√©curit√© de votre code en PHP en sp√©cifiant un chemin absolu pour les inclusions de fichiers. Vous trouverez plus d‚Äôinformations sur les constantes magiques de PHP sur la documentation officielle.

Si nous reprenons le code que nous avons vu tout √† l'heure et que nous rempla√ßons chaque code r√©p√©titif par un require_once(__DIR__ . '/header.php'); (lignes 10, 12 et 27), cela donne le code source suivant :

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>Mon super site</title>
    </head>
 
    <body>
 
    <?php require_once(__DIR__ . 'header.php'); ?>

    <!-- Le corps -->
    
    <div id="corps">
        <h1>Mon super site</h1>
        
        <p>
            Bienvenue sur mon super site !<br />
            Vous allez adorer ici, c'est un site g√©nial qui va parler de... euh... Je cherche encore un peu le th√®me de mon site. :-D
        </p>
    </div>
    
    <!-- Le pied de page -->
    
    <?php require_once(__DIR__ . 'footer.php'); ?>
    
    </body>
</html>

Ce code suppose que votre page index.php  et celles qui sont incluses (comme header.php  ) sont dans le m√™me dossier.

Si le menu √©tait dans un sous-dossier appel√© includes , il aurait fallu √©crire :

<?php require_once(__DIR__ . 'includes/header.php'); ?>

C'est le m√™me principe que pour les liens relatifs, que vous connaissez d√©j√† dans le langage HTML.

Nous avons vu que la page PHP √©tait g√©n√©r√©e ; donc la question que vous devez vous poser est : que re√ßoit le visiteur ? Eh bien, il re√ßoit exactement le m√™me code qu'avant !

La page finale que re√ßoit le visiteur est identique √† celle que je vous ai montr√©e au d√©but du chapitre‚Ä¶ mais vous, vous avez √©norm√©ment gagn√© en flexibilit√©, puisque votre code n'est plus recopi√© 150 fois inutilement.

Le nombre de  require_once  par page n'est pas limit√© ; par cons√©quent, vous pouvez d√©couper votre code en autant de sous-parties que vous le souhaitez !

R√©organisez votre site de recettes

Bon, appliquons ce que nous venons d'apprendre √† notre projet, maintenant !

Nous avons besoin de fonctions et de variables pour afficher la liste de nos articles, et puisque nous aurons peut √™tre besoin de les r√©utiliser (surtout les fonctions), nous allons √©galement extraire ces concepts dans leurs propres fichiers.

Nous aurons donc deux fichiers, variables.php et functions.php  , qui contiendront respectivement les variables et les fonctions de notre projet :

<?php
$users = [
    [
        'full_name' => 'Micka√´l Andrieu',
        'email' => 'mickael.andrieu@exemple.com',
        'age' => 34,
    ],
    [
        'full_name' => 'Mathieu Nebra',
        'email' => 'mathieu.nebra@exemple.com',
        'age' => 34,
    ],
    [
        'full_name' => 'Laur√®ne Castor',
        'email' => 'laurene.castor@exemple.com',
        'age' => 28,
    ],
];

$recipes = [
    [
        'title' => 'Cassoulet',
        'recipe' => 'Etape 1 : des flageolets !',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => true,
    ],
    [
        'title' => 'Couscous',
        'recipe' => 'Etape 1 : de la semoule',
        'author' => 'mickael.andrieu@exemple.com',
        'is_enabled' => false,
    ],
    [
        'title' => 'Escalope milanaise',
        'recipe' => 'Etape 1 : prenez une belle escalope',
        'author' => 'mathieu.nebra@exemple.com',
        'is_enabled' => true,
    ],
    [
        'title' => 'Salade Romaine',
        'recipe' => 'Etape 1 : prenez une belle salade',
        'author' => 'laurene.castor@exemple.com',
        'is_enabled' => false,
    ],
];

<?php
function displayAuthor(string $authorEmail, array $users): string
{
    foreach ($users as $user) {
        if ($authorEmail === $user['email']) {
            return $user['full_name'] . '(' . $user['age'] . ' ans)';
        }
    }
    return 'Auteur inconnu';
}
function isValidRecipe(array $recipe): bool
{
    if (array_key_exists('is_enabled', $recipe)) {
        $isEnabled = $recipe['is_enabled'];
    } else {
        $isEnabled = false;
    }


    return $isEnabled;
}


function getRecipes(array $recipes): array
{
    $valid_recipes = [];
    foreach ($recipes as $recipe) {
        if (isValidRecipe($recipe)) {
            $valid_recipes[] = $recipe;
        }
    }
    return $valid_recipes;
}

Codez l'en-t√™te du site

Ensuite, nous aurons √©videmment un en-t√™te de site avec un menu et un titre :

<!-- header.php -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.php">Site de recettes</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="index.php">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.php">Contact</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

Le menu est basique pour l'instant, mais il vous permet de passer de la page d'accueil √† la page de contact, par exemple.

Il est un peu compliqu√© √† comprendre, ton code HTML, non ?

Oui, la partie visuelle est assur√©e par le framework CSS Bootstrap 5 : il n'est pas n√©cessaire de le conna√Ætre pour suivre ce cours. Gardez juste en t√™te que chacune des classes ajout√©es va permettre de concevoir la page correctement. Mais si cela vous ennuie, supprimez toutes les classes et le projet restera fonctionnel, c'est promis !

Codez le pied de page du site

Cette partie du site reste "ferr√©e" en bas de page, et contient quelques liens et surtout les conditions d'utilisation du site (les fameux "copyrights") :

<footer class="bg-light text-center text-lg-start mt-auto">
    <div class="text-center p-3">
        ¬© 2021 Copyright:
        <a class="text-dark" href="https://openclassrooms.com/">OpenClassrooms</a>
    </div>
</footer>

Codez le corps de la page d'accueil du site

Maintenant, nous pouvons reprendre ce que nous avions construit ensemble dans les chapitres pr√©c√©dents. Nous allons avoir besoin d'inclure nos variables et nos fonctions :

<?php
require_once(__DIR__ . '/variables.php');
require_once(__DIR__ . '/functions.php');
?>
<!DOCTYPE html>
<html>


<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Site de recettes - Page d'accueil</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>


<body class="d-flex flex-column min-vh-100">
    <div class="container">
        <!-- inclusion de l'ent√™te du site -->
        <?php require_once(__DIR__ . '/header.php'); ?>
        <h1>Site de recettes</h1>
        <?php foreach (getRecipes($recipes) as $recipe) : ?>
            <article>
                <h3><?php echo $recipe['title']; ?></h3>
                <div><?php echo $recipe['recipe']; ?></div>
                <i><?php echo displayAuthor($recipe['author'], $users); ?></i>
            </article>
        <?php endforeach ?>
    </div>
    <!-- inclusion du bas de page du site -->
    <?php require_once(__DIR__ . '/footer.php'); ?>
</body>


</html>

Press√©(e) de voir le r√©sultat ?

Codez le corps de la page de contact du site
En bonus, nous pourrions ajouter un simple formulaire HTML.

Nous verrons dans les prochains chapitres comment les traiter avec PHP de mani√®re √† avoir une navigation fonctionnelle.

Rien d'extraordinaire, voici la page de contact √† ce stade du projet :

<!DOCTYPE html>
<html>


<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Site de Recettes - Page d'accueil</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>


<body class="d-flex flex-column min-vh-100">
    <div class="container">
        <?php require_once(__DIR__ . '/header.php'); ?>
        <h1>Contactez nous</h1>
        <form>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" name="email" aria-describedby="email-help">
                <div id="email-help" class="form-text">Nous ne revendrons pas votre email.</div>
            </div>
            <div class="mb-3">
                <label for="message" class="form-label">Votre message</label>
                <textarea class="form-control" placeholder="Exprimez vous" id="message" name="message"></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Envoyer</button>
        </form>
        <br />
    </div>
    <?php require_once(__DIR__ . '/footer.php'); ?>
</body>


</html>

Pour un r√©sultat visuel incroyable !

Exercez-vous

Testez le code de notre projet fil rouge !

- V√©rifiez si la page d‚Äôaccueil s‚Äôaffiche avec les deux recettes.

- En cliquant sur le lien 'Contact' dans le menu, vous devriez voir le formulaire s'afficher.

R√©cup√©rez dans le dossier P2C7 du GitHub la version compl√®te du projet construit !

En r√©sum√©

- Une page PHP peut inclure une autre page (ou un morceau de page) gr√¢ce √† l'instruction  require_once  .

- L'instruction require_once sera remplac√©e par le contenu de la page demand√©e.

- Cette technique, tr√®s simple √† mettre en place, permet par exemple de placer les menus de son site dans un fichier 
     header.php que l'on inclura dans toutes les pages. Cela permet de centraliser le code des menus, alors qu'on √©tait 
     auparavant oblig√©s de le copier dans chaque page sur nos sites statiques en HTML et CSS.

C'est la fin de cette partie du cours, ouf ! Avant de passer √† la suite, testez vos connaissances avec le quiz.

##############################################################################################################

!!!!!!!!!!!!!!!! QUIZ : R√©aliser un site web dynamique avec PHP !!!!!!!!!!!!!!!!!!!!!

Comp√©tences √©valu√©es
√âcrire des instructions en PHP
Programmer des fonctions
Respecter les conventions d‚Äô√©criture de code

Question 1

Un navigateur web peut ex√©cuter et lire du code PHP.

- Vrai (o) (M)
- Faux (B)

""""""" R√©ponse """""""""
Il faut installer au minimum Apache (le serveur web) et PHP pour que notre ordinateur puisse comprendre les pages web √©crites en PHP. Le navigateur web ne comprend pas PHP, il ne conna√Æt que HTML et CSS.

"""""""""""""""""""""""""

Question 2

Quelle instruction est utilis√©e pour afficher du texte dans PHP ?

- show_text()
- echo() (o) (B)
- display()
- print_text()
- output()

""""""" R√©ponse """""""""
L'instruction  echo  permet d'afficher du texte.

"""""""""""""""""""""""""

Question 3

Les lignes de code PHP sont appel√©es des instructions. Par quel symbole se terminent-elles ?

- Un point : .
- Un point-virgule : ; (o) (B)
- Un di√®se : #
- Il n'y a aucun symbole particulier.

""""""" R√©ponse """""""""
Comme dans d'autres langages de programmation (C, Java...), les instructions PHP se terminent par un point-virgule.

"""""""""""""""""""""""""

Question 4

Quels logiciels sont inclus dans XAMPP ?

- Apache, PHP, Winamp
- PHP, Apache, Chrome
- PHP, Apache, MySQL (o) (B)
- Comanche, Tango, Vaudou

""""""" R√©ponse """""""""
XAMPP signifie "Cross-plateform Apache MySQL PHP Perl". Il est donc facile de retenir les logiciels qu'il contient !

"""""""""""""""""""""""""

Question 5

Une m√™me page peut-elle √™tre incluse dans plusieurs pages diff√©rentes d'un site web gr√¢ce √† PHP ?

- Oui, gr√¢ce √† require_once() (o) (B)
- Oui, c'est automatique si les fichiers sont dans le m√™me dossier
- Non, c'est impossible

""""""" R√©ponse """""""""
L'instruction  require_once()  en PHP permet d'inclure le contenu d'une page au sein d'une autre page. Une m√™me page peut √™tre r√©utilis√©e plusieurs fois dans plusieurs fichiers diff√©rents !

"""""""""""""""""""""""""

Question 6

Laquelle de ces valeurs est un bool√©en ?

- 13
- "Bonjour"
- false (o) (B)
- 0.5

""""""" R√©ponse """""""""
true  et  false  (vrai et faux) sont les deux valeurs possibles des variables bool√©ennes. Leur r√¥le : retenir si une information est vraie ou fausse, tout simplement !

"""""""""""""""""""""""""

Question 7

Lequel de ces mots-cl√©s indique √† l'ordinateur de r√©p√©ter des instructions ?

- for (o) (B)
- if
- select
- switch

""""""" R√©ponse """""""""
La boucle for permet d'ex√©cuter des instructions plusieurs fois. Il est aussi possible d'utiliser la boucle while dont la syntaxe est un peu diff√©rente.

"""""""""""""""""""""""""

Question 8

Que renvoie la fonction strlen de PHP ?

- La longueur d'un texte (o) (B)
- Une version m√©lang√©e d'un texte
- Les premiers mots d'un texte

""""""" R√©ponse """""""""
strlen (string length) renvoie la longueur d'une cha√Æne de caract√®res, autrement dit d'un texte !

"""""""""""""""""""""""""

Question 9

Les tableaux PHP sont par d√©faut num√©rot√©s √† partir de...

- La case 0 (o) (B)
- La case 1
- La case 2

""""""" R√©ponse """""""""
Attention ! Les tableaux commencent √† l'indice 0 (la premi√®re case est donc 0, la deuxi√®me case est 1, etc.).

"""""""""""""""""""""""""

Question 10

Laquelle de ces conditions dit : "Si le prix est strictement sup√©rieur √† 10" ?

- if ($prix = 10)

- if ($prix < 10)

- if ($prix >= 10)

- if ($prix > 10) (o) (B)

""""""" R√©ponse """""""""
"Strictement sup√©rieur" s'√©crit  >

"Sup√©rieur ou √©gal" s'√©crit  >=

"""""""""""""""""""""""""

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
