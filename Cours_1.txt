                                       Faites vos premiers pas en PHP

Tirez un maximum de ce cours

Bonjour et bienvenue dans ce cours !

Rencontrez vos professeurs
Mathieu Nebra


Faut-il encore vous présenter Mathieu ? Le premier enseignant de la plateforme ! Tous ses cours sont très suivis et appréciés. Nous les mettons progressivement à jour pour qu’ils correspondent à ce que nous savons faire de mieux en termes de multimédia et de pédagogie.

Mathieu, qui a écrit la première version de ce cours il y a plusieurs années, vous accompagnera dans ce cours pour vous présenter les notions clés. Vous le retrouverez en vidéo et dans le texte des chapitres.

Mickaël Andrieu


Mickaël est également auteur de cours chez OpenClassrooms… et ailleurs ! Sa vie professionnelle se partage notamment entre le développement PHP et la Data, domaine dans lequel il se forme actuellement.

C’est Mickäel qui a mis à jour le cours de Mathieu, et qui a enregistré des vidéos tutorées, pour vous aider à mettre les concepts en pratique !

Stéphane Bourse


Stéphane cumule plusieurs années d'expérience dans le domaine du développement, se spécialisant notamment dans PHP et Symfony. Mais il a élargi ses compétences au domaine du JavaScript avec React. En tant que mentor chez OpenClassrooms, il apprécie partager son expertise et sa passion du développement.

Stéphane a actualisé le cours pour PHP 8.2. Des exercices 'Exercez-vous' ont été intégrés pour permettre aux apprenants de construire progressivement le projet fil rouge et de renforcer leur compréhension des concepts enseignés.

Ce cours a été mis à jour, cependant dans certaines vidéos vous remarquerez quelques petites incohérences. Cela ne devrait pas vous empêcher de réaliser le cours.

Mettez-vous à niveau en HTML et CSS si besoin

La plupart des sites web que vous visitez aujourd'hui, y compris OpenClassrooms, sont des sites dynamiques. Le seul prérequis pour apprendre à créer ce type de site est de savoir réaliser des sites statiques en HTML et CSS.

Vous pouvez suivre le cours HTML/CSS sur OpenClassrooms pour vous mettre à niveau.

Pour découvrir l'écosystème du développement web et tous les cours que nous vous proposons à ce sujet, nous vous invitons à faire un tour sur notre Carte des Connaissances ! Vous pourrez y voir en un clin d'œil les différents langages et spécialisations auxquels vous pourrez vous former avec OpenClassrooms !

Pratiquez en suivant le projet fil rouge

L'objectif de ce cours est de vous permettre de réaliser des sites web dynamiques, pas à pas.

Pour cela, nous avons mis au point dans ce cours un projet fil rouge. Cela signifie que vous allez avancer chapitre par chapitre en apprenant comment réaliser un site web dynamique de partage de recettes de cuisine. Chaque chapitre vous donnera des clés supplémentaires pour avancer dans ce projet pratique.

Vous pouvez trouver l'ensemble de fichiers liés au projet fil rouge dans notre repo Github.

Ce cours commence par la base de la base… Et c'est le sujet du prochain chapitre ! Alors, vous êtes prêt ? On y va !

##############################################################################################################

Découvrez le fonctionnement d'un site écrit en PHP

Ce qui fait le succès du Web aujourd'hui, c'est sa simplicité, sa facilité d'accès. Un internaute lambda n'a pas besoin de savoir comment ça fonctionne concrètement. Et heureusement pour lui.

En revanche, un apprenti webmaster tel que vous doit, avant toute chose, connaître les bases du fonctionnement d'un site web.

Qu'est-ce qu'un serveur et un client ? Comment rend-on son site dynamique ? Et que signifient PHP et MySQL ?

Pas d'inquiétude !

Ce premier chapitre est là pour répondre à toutes ces questions et vous montrer que vous êtes capable d'apprendre à créer des sites web dynamiques !

Faites la différence entre site statique et dynamique

On considère qu'il existe deux types de sites web :

  1. Les sites statiques.

  2. Et les sites dynamiques.

Découvrez le principe d'un site statique 

Un site statique est réalisé uniquement à l'aide des langages HTML et CSS.

Il fonctionne très bien, mais son contenu ne peut pas être mis à jour automatiquement : il faut que le webmaster modifie le code source pour y ajouter des nouveautés.

Ce n'est pas très pratique quand on doit mettre à jour son site plusieurs fois dans la même journée…

Un site statique est adapté pour un site « vitrine » (pour présenter par exemple son entreprise), mais sans aller plus loin.

Ce type de site se fait de plus en plus rare aujourd'hui, car dès que l'on rajoute un élément d'interaction (comme un formulaire de contact), on ne parle plus de site statique mais de site dynamique.

Découvrez le principe d'un site dynamique

Plus complexe, un site dynamique utilise d'autres langages en plus de HTML et CSS, tels que PHP et MySQL.

Le contenu de ce type de site est dit « dynamique » parce qu'il peut changer sans l'intervention du webmaster !

Maintenant que vous comprenez la différence entre un site statique et un site dynamique, nous pouvons passer à la suite !

OK, je vois la différence mais au fond, comment ça fonctionne ?

J'y viens ! C'est l'objet de la suite de ce chapitre.

Comprenez le fonctionnement d'un site web

Lorsque vous voulez visiter un site web, vous tapez son adresse dans votre navigateur web. Mais ne vous êtes-vous jamais demandé comment faisait la page web pour arriver jusqu'à vous ?

Il faut savoir qu'Internet est un réseau composé d'ordinateurs. Ceux-ci peuvent être classés en deux catégories :

  1. Les clients : ce sont les ordinateurs des internautes comme vous. Votre ordinateur fait donc partie de la 
     catégorie des clients. Chaque client représente un visiteur d'un site web.

  2. Les serveurs : ce sont des ordinateurs puissants qui stockent et délivrent des sites web aux internautes, 
     c'est-à-dire aux clients. La plupart des internautes n'ont jamais vu un serveur de leur vie. Pourtant, 
     les serveurs sont indispensables au bon fonctionnement du Web. 

Vous avez envie d'en savoir plus le modèle client-serveur ? N'hésitez pas à suivre le cours comprendre le Web.

On résume : votre ordinateur est appelé le client, tandis que l'ordinateur qui détient le site web est appelé le serveur.

Comment les deux communiquent-ils ?

C'est justement là que se fait la différence entre un site statique et un site dynamique. Voyons ensemble ce qui change.

Consultez un site statique
Lorsque vous vous rendez sur site statique, c'est très simple. Cela se passe en deux temps :

  1. Le client demande au serveur à voir une page web.

  2. Le serveur lui répond en lui envoyant la page réclamée.

La communication est donc plutôt basique :

  - « Bonjour, je suis le client, je voudrais voir cette page web. »

  - « Tiens, voilà la page que tu m'as demandée. »

Sur un site statique, il ne se passe rien d'autre. Le serveur stocke des pages web et les envoie aux clients qui les demandent, sans les modifier.

Consultez un site dynamique

Lorsque vous consultez un site dynamique, il y a une étape intermédiaire : la page est générée.

Qu'est-ce que ça veut dire ?

Eh bien, il y a une étape supplémentaire, et elle se situe entre les deux étapes de base :

  1. Le client demande au serveur à voir une page web.

  2. Le serveur prépare la page spécialement pour le client (il la génère).

  3. Le serveur lui envoie la page qu'il vient de générer.

La page web est générée à chaque fois qu'un client la réclame. C'est précisément ce qui rend les sites dynamiques "vivants" : le contenu d'une même page peut changer d'un instant à l'autre.

C'est comme cela que certains sites parviennent à afficher par exemple votre pseudonyme sur toutes les pages. Étant donné que le serveur génère une page à chaque fois qu'on lui en demande une, il peut la personnaliser en fonction des goûts et des préférences du visiteur.

Exploitez les langages du Web

Lorsqu'on crée un site web, on est amené à manipuler non pas un mais plusieurs langages. En tant que webmaster, il faut impérativement les connaître.

Utilisez HTML et CSS pour un site statique
De nombreux langages ont été créés pour produire des sites web. Deux d'entre eux constituent une base incontournable pour tous les webmasters.

HTML
C'est le langage à la base des sites web. Simple à apprendre, il fonctionne à partir de balises. Voici un exemple de code HTML :

<p>Bonjour, je suis un <em>paragraphe</em> de texte !</p>

CSS 

C'est le langage de mise en forme des sites web. Alors que le HTML permet d'écrire le contenu de vos pages web et de le structurer, le langage CSS s'occupe de la mise en forme et de la mise en page. C'est en CSS que l'on choisit notamment la couleur, la taille des menus et bien d'autres choses encore.

Voici un code CSS :

div.banner {
   text-align: center;
   font-weight: bold;
   font-size: 120%;
}

Ces langages sont la base de tous les sites web. Lorsque le serveur envoie la page web au client, il envoie en fait du code écrit avec les langages HTML et CSS.

Le problème, c'est que lorsqu'on connaît seulement HTML et CSS, on ne peut produire que des sites statiques… et non des sites dynamiques ! Pour ces derniers, il est nécessaire de manipuler d'autres langages, en plus de HTML et CSS.

Ajoutez PHP et MySQL pour un site dynamique

Quel que soit le site web que l'on souhaite créer, HTML et CSS sont donc indispensables. Cependant, ils ne suffisent pas pour réaliser des sites dynamiques. Il faut les compléter avec d'autres langages.

C'est justement tout l'objet de ce cours : vous allez apprendre à manipuler PHP et MySQL pour réaliser un site web dynamique.

PHP

C'est un langage que seuls les serveurs comprennent, et qui permet de rendre votre site dynamique. C'est PHP qui « génère » la page web comme on l'a vu sur un des schémas précédents.

Ce sera le premier langage que nous découvrirons dans ce cours.

Voici un code PHP :

<?php echo "Vous êtes le visiteur n°" . $nbre_visiteurs; ?>

Le langage PHP peut fonctionner seul, mais il ne prend vraiment de l'intérêt que s'il est combiné à un outil tel que MySQL.

MySQL

MySQL est ce que l'on appelle un Système de Gestion de Bases de Données (SGBD).

Pour faire simple : son rôle est d'enregistrer des données de manière organisée, afin de vous aider à les retrouver facilement plus tard.

C'est grâce à MySQL que vous pourrez enregistrer :

  - la liste des membres de votre site web ;

  - les messages postés sur le forum ;

  - etc.

Rappelez-vous, dans ce cours on découvre toutes les notions de base et on les met en pratique au travers d'un projet fil rouge : la création d'un site de recettes de cuisine !

Le langage qui permet de communiquer avec la base de données s'appelle le SQL.

Voici un code en langage SQL :

SELECT id, auteur, message, datemsg FROM livreor ORDER BY datemsg DESC LIMIT 0, 10

PHP et MySQL sont disponibles gratuitement et sous licence Open Source. Cela signifie une chose essentielle : vous n'aurez pas à débourser un centime pour construire votre site web !

Oublions pour le moment MySQL et concentrons-nous sur PHP.

Les clients sont incapables de comprendre le code PHP : ils ne connaissent que le HTML et le CSS. Seul le serveur est capable de lire du PHP. Le rôle de PHP est justement de générer du code HTML, code qui est ensuite envoyé au client de la même manière qu'un site statique, comme le montre la figure suivante :

PHP est un langage de programmation utilisé sur de nombreux serveurs pour prendre des décisions. C'est PHP qui décide du code HTML qui sera généré et envoyé au client à chaque fois.

Pour bien comprendre l'intérêt de tout cela, prenons un exemple.

On peut écrire en PHP :

« Si le visiteur est membre de mon site et qu'il s'appelle Jonathan, affiche Bienvenue Jonathan sur la page web. En revanche, si ce n'est pas un membre de mon site, affiche Bienvenue à la place, et propose au visiteur de s’inscrire. »

C'est un exemple très basique de site dynamique : selon que vous êtes un membre enregistré ou non, vous ne verrez pas les mêmes choses, et n'aurez peut-être pas accès au même contenu.

En résumé

- Il existe deux types de sites web :

      1. Les sites statiques : réalisés en HTML et CSS, leur contenu ne peut être mis à jour que par le 
         webmaster.

      2. Les sites dynamiques : réalisés avec d'autres outils comme PHP et MySQL en plus de HTML et CSS, ils 
         permettent aux visiteurs de participer à la vie du site, de poster des messages… bref, de rendre le 
         site vivant !

- Les visiteurs du site sont appelés les "clients". Ils demandent au serveur qui héberge le site de leur 
  transmettre les pages web.

- PHP est un langage exécuté par le serveur. Il permet de personnaliser la page en fonction du visiteur, de 
  traiter ses messages, d'effectuer des calculs, etc. Il génère une page HTML.

- MySQL est un système de gestion de bases de données. Il se charge du stockage des informations (liste des 
  messages, des membres…).

Dans le prochain chapitre, nous allons voir comment vous préparer pour commencer à coder !

##############################################################################################################

Préparez votre environnement de travail

Nous savons désormais que PHP s'exécute sur le serveur, et que son rôle est de générer des pages web. Cependant, seul un serveur peut lire du PHP ; or, votre ordinateur n'est pas un serveur.

Mais alors comment créer un site dynamique si PHP ne fonctionne pas chez moi ?

Qu'à cela ne tienne : nous allons temporairement transformer votre ordinateur en serveur pour que vous puissiez exécuter du PHP et travailler sur votre site dynamique.

Vous serez fin prêt à programmer après avoir lu ce chapitre !

Selon que l'on crée un site statique ou un site dynamique, on a besoin de logiciels différents. En fait, faire un site dynamique nécessite malheureusement pour nous quelques logiciels supplémentaires !

Ayez en tête les outils de base pour créer un site statique

Les webmasters qui créent des sites statiques avec HTML et CSS ont de la chance, ils ont en général déjà tous les programmes dont ils ont besoin :

  1.Un éditeur de texte.

  2.Un navigateur web.

Un éditeur de texte

En théorie, un programme tel que le bloc-notes livré avec Windows suffit, bien qu'il soit recommandé d'utiliser un outil un peu plus évolué, comme Notepad++.

Nous reparlerons du choix de l'éditeur à la fin de ce chapitre.

Un navigateur web

Il permet de tester la page web.

Vous pouvez utiliser par exemple :

 - Mozilla Firefox ;

 - Microsoft Edge ;

 - Google Chrome ;

 - Opera ;

 - Safari ;

 - ou tout autre navigateur auquel vous êtes habitué pour aller sur le Web.

Il est d'ailleurs conseillé de tester son site régulièrement sur différents navigateurs.

Bref ! Mais, et vous le savez déjà : pour créer un site dynamique, ces outils ne suffisent pas…

Il est nécessaire d'installer des programmes supplémentaires !

Utilisez les outils pour créer un site dynamique

Pour que votre ordinateur puisse lire du PHP, il faut qu'il se comporte comme un serveur.

Rassurez-vous : vous n'avez pas besoin d'acheter une machine spéciale pour cela !

Il suffit simplement d'installer les mêmes programmes que ceux que l'on trouve sur les serveurs qui délivrent les sites web aux internautes.

Quels sont les programmes que je dois installer ?

Apache 

C'est ce qu'on appelle un serveur web. Il s'agit du plus important de tous les programmes, car c'est lui qui est chargé de délivrer les pages web aux visiteurs. Cependant, Apache ne gère que les sites web statiques (il ne peut traiter que des pages HTML). Il faut donc le compléter avec d'autres programmes.

PHP 

C'est un plug-in pour Apache qui le rend capable de traiter des pages web dynamiques en PHP. En clair, en combinant Apache et PHP, notre ordinateur sera capable de lire des pages web en PHP.

MySQL

C'est le logiciel de gestion de bases de données dont je vous ai parlé avant. Il permet d'enregistrer des données de manière organisée (comme la liste des membres de votre site). Nous n'en aurons pas besoin immédiatement, mais autant l'installer de suite.

Tous ces éléments sont libres et gratuits.

Certes, il en existe d'autres (parfois payants), mais la combinaison Apache + PHP + MySQL est la plus courante sur les serveurs web. À tel point qu'on a créé des « packs » tout prêts qui contiennent tous ces éléments. Il est possible de les installer un à un, mais cela prend plus de temps et vous n'allez rien y gagner (sauf si vous êtes administrateur de serveur, ce qui ne devrait pas être votre cas).

Dans la suite de ce chapitre, nous allons voir comment installer le « pack » qui convient en fonction de votre système d'exploitation.

Je vous propose d'utiliser XAMPP qui marche à la fois pour Windows, pour Mac et pour Linux.  Il a l'avantage d'être régulièrement mis à jour.

Installez XAMPP sous Windows

Il existe aussi WAMP et MAMP pour Windows. Vous pouvez les essayer, mais MAMP n'est pas souvent mis à jour sur Windows. Je vous recommande donc d’essayer XAMPP en premier. 

Commencez par télécharger XAMPP sur son site. Prenez la version correspondante à votre système d'exploitation. Une fois téléchargé, installez-le. 

Lancez ensuite XAMPP. La fenêtre suivante devrait apparaître :

XAMPP met à jour régulièrement son logiciel et les captures d'écran et fonctionnalités présentées dans ce cours pourraient ne plus être identiques. Pour bien suivre ce cours, installez la version de XAMPP ayant a minima la version 8.2.4 de PHP.

Après le démarrage de XAMPP, vous devez lancer deux programmes essentiels : Apache et MySQL. Cliquez sur le bouton "Start" pour Apache et sur le bouton "Start" pour MySQL. Vous devriez observer un fond de couleur verte apparaître pour Apache et MySQL. Il peut parfois s'écouler un court laps de temps avant que ces programmes ne soient pleinement opérationnels.

Si une fenêtre apparaît pour vous indiquer que le pare-feu bloque Apache ou MySQL, cliquez sur "Débloquer". Vous n'avez aucune raison de vous inquiéter, c'est parfaitement normal.

Vérifions maintenant que XAMPP est bien installé. Je vous propose de créer un projet de test que nous appellerons tests.

Pour ce faire cliquer sur le bouton "Explorer" de XAMPP Control Panel et rendez-vous dans le dossier racine  htdocs  . Puis, créez un nouveau sous-dossier que vous appellerez tests, comme sur cette image :

Maintenant ouvrez votre navigateur web. Dans la barre d'adresse, saisissez  localhost/tests  . Le dossier tests apparaît dans le navigateur.

Il n'y a rien à l'intérieur pour le moment :

Si vous avez le même résultat, cela signifie que tout fonctionne. Bravo, vous avez installé XAMPP et il fonctionne correctement. Vous êtes prêt à programmer en PHP !

QUOI ?! Tout ça pour ça ?

Eh oui, l'ami ! On n'a pas encore commencé à programmer, il ne fallait pas non plus vous attendre à un feu d'artifice tout de suite. 🎆

Vous pouvez passer la section suivante qui ne concerne que les utilisateurs sous Mac et sous Linux.

Découvrez le serveur PHP intégré

Nous avons installé des logiciels qui reproduisent le comportement exact d'un serveur tel qu'il serait configuré et installé en ligne. Mais pour de petits travaux sur votre ordinateur "en local", PHP fournit un serveur web interne très pratique, et qui utilise PHP en ligne de commande pour provoquer l'exécution du script et le rendu de la page.

Par exemple, si l'on crée un fichier PHP index.php avec le contenu suivant :

<?php

echo "Hello world";

et que nous exécutons en ligne de commande au niveau du dossier où se trouve le fichier index.php :

php -S localhost:8080

  - localhost étant votre "nom de domaine" local ;

  - "8080" étant un port HTTP quelconque.

Ensuite, en accédant à http://localhost:8080/index.php, le retour de l'exécution de ce script PHP sera disponible ! Pratique, non ?

Par la suite, dans les vidéos du cours, nous utiliserons l'une ou l'autre des options proposées.

Vous êtes prêt à travailler en PHP !

Utilisez un bon éditeur de texte

Comme vous devez déjà le savoir, pour éditer le code d'une page web, vous avez plusieurs solutions :

   - utiliser un éditeur de texte tout simple que vous avez déjà, comme Bloc-notes. Ce logiciel suffit 
     normalement à écrire des pages web en HTML et même en PHP, mais…

   - le mieux reste d'utiliser un logiciel spécialisé qui colore votre code (très pratique) et qui numérote 
     vos lignes (très pratique aussi).

Il existe des centaines et des centaines de logiciels gratuits faits pour les développeurs comme vous. Je vais vous en présenter ici deux :

   1. Un que l'on peut utiliser gratuitement : Visual Studio Code.

   2. Et un payant : PHPStorm.

Je vous propose donc d'installer un logiciel qui va vous permettre d'éditer vos fichiers sources de manière efficace. Vous en avez probablement déjà installé un si vous avez appris à programmer en HTML/CSS, mais comme on n'est jamais trop prudent, je vais rapidement vous en présenter quelques-uns en fonction de votre système d'exploitation.

Voici le code source HTML que nous allons utiliser pour commencer en terrain connu. Copiez-collez ce code dans l'éditeur de texte que je vais vous faire installer :

<html>
    <head>
        <meta charset="utf-8"/>
        <title>Ceci est une page HTML de test</title>
    </head>

    <body>
        <h2>Page de test</h2>
        <p>
            Cette page contient <strong>uniquement</strong> du code HTML.<br/>


            Voici quelques petits tests :


        </p>

        <ul>
            <li style="color: blue;">Texte en bleu</li>
            <li style="color: red;">Texte en rouge</li>
            <li style="color: green;">Texte en vert</li>
        </ul>
    </body>
</html>

Il n'y a pas de PHP pour l'instant, afin de commencer en douceur. Nous allons simplement essayer d'enregistrer un fichier HTML avec ce code pour nous échauffer.

Visual Studio Code

Que vous soyez sous Windows, Mac ou Linux, je vous recommande de commencer avec l'éditeur Visual Studio Code qui est suffisamment léger et simple si vous débutez.

Ne vous fiez pas à son apparente simplicité : Visual Studio Code est en effet rapide et simple à la base, mais il est possible d'étendre ses fonctionnalités avec d'innombrables plugins !

Visual Studio Code est un très bon éditeur, utilisé par de nombreux développeurs (y compris des professionnels). Il voit en revanche ses limites sur de gros projets, où certains lui préfèrent PHPStorm.

PHPStorm

PHPStorm ressemble un peu plus à une "machine de guerre". Et pour cause : c'est un IDE, un environnement de travail de développeur. Il est utilisé par de nombreux développeurs PHP professionnels de ma connaissance. 

PHPStorm est plus "costaud" que Visual Studio Code. Il met plus de temps à charger, il peut avoir de nombreuses fonctionnalités avancées grâce à ses plugins.

Par ailleurs, PHPStorm est payant.

Vous ne commencerez peut-être pas de suite avec PHPStorm, mais gardez-le sur votre radar car c'est un outil très utilisé que vous essaierez sûrement un jour.

En résumé

- Pour créer des sites web dynamiques, nous devons installer des outils qui transforment notre ordinateur en 
  serveur, afin de pouvoir tester notre site.

- Les principaux outils nécessaires sont :

       1. Apache, le serveur web.

       2. PHP, le programme qui permet au serveur web d'exécuter des pages PHP.

       3. MySQL, le logiciel de gestion de bases de données.

- Bien qu'il soit possible d'installer ces outils séparément, il est plus simple pour nous d'installer un 
  paquetage tout prêt : XAMPP.

- Il est conseillé d'utiliser un éditeur de texte qui colore le code source, comme Visual Studio Code, pour 
  programmer convenablement en PHP. Pour les personnes plus expérimentées qui travaillent sur de gros projets, 
  je recommande PHPStorm.

Tout est installé, maintenant vous allez passer à la pratique et écrire votre premier script. On y va !

##############################################################################################################

