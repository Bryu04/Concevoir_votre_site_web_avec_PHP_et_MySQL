                                       Faites vos premiers pas en PHP

Tirez un maximum de ce cours

Bonjour et bienvenue dans ce cours !

Rencontrez vos professeurs
Mathieu Nebra


Faut-il encore vous présenter Mathieu ? Le premier enseignant de la plateforme ! Tous ses cours sont très suivis et appréciés. Nous les mettons progressivement à jour pour qu’ils correspondent à ce que nous savons faire de mieux en termes de multimédia et de pédagogie.

Mathieu, qui a écrit la première version de ce cours il y a plusieurs années, vous accompagnera dans ce cours pour vous présenter les notions clés. Vous le retrouverez en vidéo et dans le texte des chapitres.

Mickaël Andrieu


Mickaël est également auteur de cours chez OpenClassrooms… et ailleurs ! Sa vie professionnelle se partage notamment entre le développement PHP et la Data, domaine dans lequel il se forme actuellement.

C’est Mickäel qui a mis à jour le cours de Mathieu, et qui a enregistré des vidéos tutorées, pour vous aider à mettre les concepts en pratique !

Stéphane Bourse


Stéphane cumule plusieurs années d'expérience dans le domaine du développement, se spécialisant notamment dans PHP et Symfony. Mais il a élargi ses compétences au domaine du JavaScript avec React. En tant que mentor chez OpenClassrooms, il apprécie partager son expertise et sa passion du développement.

Stéphane a actualisé le cours pour PHP 8.2. Des exercices 'Exercez-vous' ont été intégrés pour permettre aux apprenants de construire progressivement le projet fil rouge et de renforcer leur compréhension des concepts enseignés.

Ce cours a été mis à jour, cependant dans certaines vidéos vous remarquerez quelques petites incohérences. Cela ne devrait pas vous empêcher de réaliser le cours.

Mettez-vous à niveau en HTML et CSS si besoin

La plupart des sites web que vous visitez aujourd'hui, y compris OpenClassrooms, sont des sites dynamiques. Le seul prérequis pour apprendre à créer ce type de site est de savoir réaliser des sites statiques en HTML et CSS.

Vous pouvez suivre le cours HTML/CSS sur OpenClassrooms pour vous mettre à niveau.

Pour découvrir l'écosystème du développement web et tous les cours que nous vous proposons à ce sujet, nous vous invitons à faire un tour sur notre Carte des Connaissances ! Vous pourrez y voir en un clin d'œil les différents langages et spécialisations auxquels vous pourrez vous former avec OpenClassrooms !

Pratiquez en suivant le projet fil rouge

L'objectif de ce cours est de vous permettre de réaliser des sites web dynamiques, pas à pas.

Pour cela, nous avons mis au point dans ce cours un projet fil rouge. Cela signifie que vous allez avancer chapitre par chapitre en apprenant comment réaliser un site web dynamique de partage de recettes de cuisine. Chaque chapitre vous donnera des clés supplémentaires pour avancer dans ce projet pratique.

Vous pouvez trouver l'ensemble de fichiers liés au projet fil rouge dans notre repo Github.

Ce cours commence par la base de la base… Et c'est le sujet du prochain chapitre ! Alors, vous êtes prêt ? On y va !

##############################################################################################################

Découvrez le fonctionnement d'un site écrit en PHP

Ce qui fait le succès du Web aujourd'hui, c'est sa simplicité, sa facilité d'accès. Un internaute lambda n'a pas besoin de savoir comment ça fonctionne concrètement. Et heureusement pour lui.

En revanche, un apprenti webmaster tel que vous doit, avant toute chose, connaître les bases du fonctionnement d'un site web.

Qu'est-ce qu'un serveur et un client ? Comment rend-on son site dynamique ? Et que signifient PHP et MySQL ?

Pas d'inquiétude !

Ce premier chapitre est là pour répondre à toutes ces questions et vous montrer que vous êtes capable d'apprendre à créer des sites web dynamiques !

Faites la différence entre site statique et dynamique

On considère qu'il existe deux types de sites web :

  1. Les sites statiques.

  2. Et les sites dynamiques.

Découvrez le principe d'un site statique 

Un site statique est réalisé uniquement à l'aide des langages HTML et CSS.

Il fonctionne très bien, mais son contenu ne peut pas être mis à jour automatiquement : il faut que le webmaster modifie le code source pour y ajouter des nouveautés.

Ce n'est pas très pratique quand on doit mettre à jour son site plusieurs fois dans la même journée…

Un site statique est adapté pour un site « vitrine » (pour présenter par exemple son entreprise), mais sans aller plus loin.

Ce type de site se fait de plus en plus rare aujourd'hui, car dès que l'on rajoute un élément d'interaction (comme un formulaire de contact), on ne parle plus de site statique mais de site dynamique.

Découvrez le principe d'un site dynamique

Plus complexe, un site dynamique utilise d'autres langages en plus de HTML et CSS, tels que PHP et MySQL.

Le contenu de ce type de site est dit « dynamique » parce qu'il peut changer sans l'intervention du webmaster !

Maintenant que vous comprenez la différence entre un site statique et un site dynamique, nous pouvons passer à la suite !

OK, je vois la différence mais au fond, comment ça fonctionne ?

J'y viens ! C'est l'objet de la suite de ce chapitre.

Comprenez le fonctionnement d'un site web

Lorsque vous voulez visiter un site web, vous tapez son adresse dans votre navigateur web. Mais ne vous êtes-vous jamais demandé comment faisait la page web pour arriver jusqu'à vous ?

Il faut savoir qu'Internet est un réseau composé d'ordinateurs. Ceux-ci peuvent être classés en deux catégories :

  1. Les clients : ce sont les ordinateurs des internautes comme vous. Votre ordinateur fait donc partie de la 
     catégorie des clients. Chaque client représente un visiteur d'un site web.

  2. Les serveurs : ce sont des ordinateurs puissants qui stockent et délivrent des sites web aux internautes, 
     c'est-à-dire aux clients. La plupart des internautes n'ont jamais vu un serveur de leur vie. Pourtant, 
     les serveurs sont indispensables au bon fonctionnement du Web. 

Vous avez envie d'en savoir plus le modèle client-serveur ? N'hésitez pas à suivre le cours comprendre le Web.

On résume : votre ordinateur est appelé le client, tandis que l'ordinateur qui détient le site web est appelé le serveur.

Comment les deux communiquent-ils ?

C'est justement là que se fait la différence entre un site statique et un site dynamique. Voyons ensemble ce qui change.

Consultez un site statique
Lorsque vous vous rendez sur site statique, c'est très simple. Cela se passe en deux temps :

  1. Le client demande au serveur à voir une page web.

  2. Le serveur lui répond en lui envoyant la page réclamée.

La communication est donc plutôt basique :

  - « Bonjour, je suis le client, je voudrais voir cette page web. »

  - « Tiens, voilà la page que tu m'as demandée. »

Sur un site statique, il ne se passe rien d'autre. Le serveur stocke des pages web et les envoie aux clients qui les demandent, sans les modifier.

Consultez un site dynamique

Lorsque vous consultez un site dynamique, il y a une étape intermédiaire : la page est générée.

Qu'est-ce que ça veut dire ?

Eh bien, il y a une étape supplémentaire, et elle se situe entre les deux étapes de base :

  1. Le client demande au serveur à voir une page web.

  2. Le serveur prépare la page spécialement pour le client (il la génère).

  3. Le serveur lui envoie la page qu'il vient de générer.

La page web est générée à chaque fois qu'un client la réclame. C'est précisément ce qui rend les sites dynamiques "vivants" : le contenu d'une même page peut changer d'un instant à l'autre.

C'est comme cela que certains sites parviennent à afficher par exemple votre pseudonyme sur toutes les pages. Étant donné que le serveur génère une page à chaque fois qu'on lui en demande une, il peut la personnaliser en fonction des goûts et des préférences du visiteur.

Exploitez les langages du Web

Lorsqu'on crée un site web, on est amené à manipuler non pas un mais plusieurs langages. En tant que webmaster, il faut impérativement les connaître.

Utilisez HTML et CSS pour un site statique
De nombreux langages ont été créés pour produire des sites web. Deux d'entre eux constituent une base incontournable pour tous les webmasters.

HTML
C'est le langage à la base des sites web. Simple à apprendre, il fonctionne à partir de balises. Voici un exemple de code HTML :

<p>Bonjour, je suis un <em>paragraphe</em> de texte !</p>

CSS 

C'est le langage de mise en forme des sites web. Alors que le HTML permet d'écrire le contenu de vos pages web et de le structurer, le langage CSS s'occupe de la mise en forme et de la mise en page. C'est en CSS que l'on choisit notamment la couleur, la taille des menus et bien d'autres choses encore.

Voici un code CSS :

div.banner {
   text-align: center;
   font-weight: bold;
   font-size: 120%;
}

Ces langages sont la base de tous les sites web. Lorsque le serveur envoie la page web au client, il envoie en fait du code écrit avec les langages HTML et CSS.

Le problème, c'est que lorsqu'on connaît seulement HTML et CSS, on ne peut produire que des sites statiques… et non des sites dynamiques ! Pour ces derniers, il est nécessaire de manipuler d'autres langages, en plus de HTML et CSS.

Ajoutez PHP et MySQL pour un site dynamique

Quel que soit le site web que l'on souhaite créer, HTML et CSS sont donc indispensables. Cependant, ils ne suffisent pas pour réaliser des sites dynamiques. Il faut les compléter avec d'autres langages.

C'est justement tout l'objet de ce cours : vous allez apprendre à manipuler PHP et MySQL pour réaliser un site web dynamique.

PHP

C'est un langage que seuls les serveurs comprennent, et qui permet de rendre votre site dynamique. C'est PHP qui « génère » la page web comme on l'a vu sur un des schémas précédents.

Ce sera le premier langage que nous découvrirons dans ce cours.

Voici un code PHP :

<?php echo "Vous êtes le visiteur n°" . $nbre_visiteurs; ?>

Le langage PHP peut fonctionner seul, mais il ne prend vraiment de l'intérêt que s'il est combiné à un outil tel que MySQL.

MySQL

MySQL est ce que l'on appelle un Système de Gestion de Bases de Données (SGBD).

Pour faire simple : son rôle est d'enregistrer des données de manière organisée, afin de vous aider à les retrouver facilement plus tard.

C'est grâce à MySQL que vous pourrez enregistrer :

  - la liste des membres de votre site web ;

  - les messages postés sur le forum ;

  - etc.

Rappelez-vous, dans ce cours on découvre toutes les notions de base et on les met en pratique au travers d'un projet fil rouge : la création d'un site de recettes de cuisine !

Le langage qui permet de communiquer avec la base de données s'appelle le SQL.

Voici un code en langage SQL :

SELECT id, auteur, message, datemsg FROM livreor ORDER BY datemsg DESC LIMIT 0, 10

PHP et MySQL sont disponibles gratuitement et sous licence Open Source. Cela signifie une chose essentielle : vous n'aurez pas à débourser un centime pour construire votre site web !

Oublions pour le moment MySQL et concentrons-nous sur PHP.

Les clients sont incapables de comprendre le code PHP : ils ne connaissent que le HTML et le CSS. Seul le serveur est capable de lire du PHP. Le rôle de PHP est justement de générer du code HTML, code qui est ensuite envoyé au client de la même manière qu'un site statique, comme le montre la figure suivante :

PHP est un langage de programmation utilisé sur de nombreux serveurs pour prendre des décisions. C'est PHP qui décide du code HTML qui sera généré et envoyé au client à chaque fois.

Pour bien comprendre l'intérêt de tout cela, prenons un exemple.

On peut écrire en PHP :

« Si le visiteur est membre de mon site et qu'il s'appelle Jonathan, affiche Bienvenue Jonathan sur la page web. En revanche, si ce n'est pas un membre de mon site, affiche Bienvenue à la place, et propose au visiteur de s’inscrire. »

C'est un exemple très basique de site dynamique : selon que vous êtes un membre enregistré ou non, vous ne verrez pas les mêmes choses, et n'aurez peut-être pas accès au même contenu.

En résumé

- Il existe deux types de sites web :

      1. Les sites statiques : réalisés en HTML et CSS, leur contenu ne peut être mis à jour que par le 
         webmaster.

      2. Les sites dynamiques : réalisés avec d'autres outils comme PHP et MySQL en plus de HTML et CSS, ils 
         permettent aux visiteurs de participer à la vie du site, de poster des messages… bref, de rendre le 
         site vivant !

- Les visiteurs du site sont appelés les "clients". Ils demandent au serveur qui héberge le site de leur 
  transmettre les pages web.

- PHP est un langage exécuté par le serveur. Il permet de personnaliser la page en fonction du visiteur, de 
  traiter ses messages, d'effectuer des calculs, etc. Il génère une page HTML.

- MySQL est un système de gestion de bases de données. Il se charge du stockage des informations (liste des 
  messages, des membres…).

Dans le prochain chapitre, nous allons voir comment vous préparer pour commencer à coder !

##############################################################################################################

Préparez votre environnement de travail

Nous savons désormais que PHP s'exécute sur le serveur, et que son rôle est de générer des pages web. Cependant, seul un serveur peut lire du PHP ; or, votre ordinateur n'est pas un serveur.

Mais alors comment créer un site dynamique si PHP ne fonctionne pas chez moi ?

Qu'à cela ne tienne : nous allons temporairement transformer votre ordinateur en serveur pour que vous puissiez exécuter du PHP et travailler sur votre site dynamique.

Vous serez fin prêt à programmer après avoir lu ce chapitre !

Selon que l'on crée un site statique ou un site dynamique, on a besoin de logiciels différents. En fait, faire un site dynamique nécessite malheureusement pour nous quelques logiciels supplémentaires !

Ayez en tête les outils de base pour créer un site statique

Les webmasters qui créent des sites statiques avec HTML et CSS ont de la chance, ils ont en général déjà tous les programmes dont ils ont besoin :

  1.Un éditeur de texte.

  2.Un navigateur web.

Un éditeur de texte

En théorie, un programme tel que le bloc-notes livré avec Windows suffit, bien qu'il soit recommandé d'utiliser un outil un peu plus évolué, comme Notepad++.

Nous reparlerons du choix de l'éditeur à la fin de ce chapitre.

Un navigateur web

Il permet de tester la page web.

Vous pouvez utiliser par exemple :

 - Mozilla Firefox ;

 - Microsoft Edge ;

 - Google Chrome ;

 - Opera ;

 - Safari ;

 - ou tout autre navigateur auquel vous êtes habitué pour aller sur le Web.

Il est d'ailleurs conseillé de tester son site régulièrement sur différents navigateurs.

Bref ! Mais, et vous le savez déjà : pour créer un site dynamique, ces outils ne suffisent pas…

Il est nécessaire d'installer des programmes supplémentaires !

Utilisez les outils pour créer un site dynamique

Pour que votre ordinateur puisse lire du PHP, il faut qu'il se comporte comme un serveur.

Rassurez-vous : vous n'avez pas besoin d'acheter une machine spéciale pour cela !

Il suffit simplement d'installer les mêmes programmes que ceux que l'on trouve sur les serveurs qui délivrent les sites web aux internautes.

Quels sont les programmes que je dois installer ?

Apache 

C'est ce qu'on appelle un serveur web. Il s'agit du plus important de tous les programmes, car c'est lui qui est chargé de délivrer les pages web aux visiteurs. Cependant, Apache ne gère que les sites web statiques (il ne peut traiter que des pages HTML). Il faut donc le compléter avec d'autres programmes.

PHP 

C'est un plug-in pour Apache qui le rend capable de traiter des pages web dynamiques en PHP. En clair, en combinant Apache et PHP, notre ordinateur sera capable de lire des pages web en PHP.

MySQL

C'est le logiciel de gestion de bases de données dont je vous ai parlé avant. Il permet d'enregistrer des données de manière organisée (comme la liste des membres de votre site). Nous n'en aurons pas besoin immédiatement, mais autant l'installer de suite.

Tous ces éléments sont libres et gratuits.

Certes, il en existe d'autres (parfois payants), mais la combinaison Apache + PHP + MySQL est la plus courante sur les serveurs web. À tel point qu'on a créé des « packs » tout prêts qui contiennent tous ces éléments. Il est possible de les installer un à un, mais cela prend plus de temps et vous n'allez rien y gagner (sauf si vous êtes administrateur de serveur, ce qui ne devrait pas être votre cas).

Dans la suite de ce chapitre, nous allons voir comment installer le « pack » qui convient en fonction de votre système d'exploitation.

Je vous propose d'utiliser XAMPP qui marche à la fois pour Windows, pour Mac et pour Linux.  Il a l'avantage d'être régulièrement mis à jour.

Installez XAMPP sous Windows

Il existe aussi WAMP et MAMP pour Windows. Vous pouvez les essayer, mais MAMP n'est pas souvent mis à jour sur Windows. Je vous recommande donc d’essayer XAMPP en premier. 

Commencez par télécharger XAMPP sur son site. Prenez la version correspondante à votre système d'exploitation. Une fois téléchargé, installez-le. 

Lancez ensuite XAMPP. La fenêtre suivante devrait apparaître :

XAMPP met à jour régulièrement son logiciel et les captures d'écran et fonctionnalités présentées dans ce cours pourraient ne plus être identiques. Pour bien suivre ce cours, installez la version de XAMPP ayant a minima la version 8.2.4 de PHP.

Après le démarrage de XAMPP, vous devez lancer deux programmes essentiels : Apache et MySQL. Cliquez sur le bouton "Start" pour Apache et sur le bouton "Start" pour MySQL. Vous devriez observer un fond de couleur verte apparaître pour Apache et MySQL. Il peut parfois s'écouler un court laps de temps avant que ces programmes ne soient pleinement opérationnels.

Si une fenêtre apparaît pour vous indiquer que le pare-feu bloque Apache ou MySQL, cliquez sur "Débloquer". Vous n'avez aucune raison de vous inquiéter, c'est parfaitement normal.

Vérifions maintenant que XAMPP est bien installé. Je vous propose de créer un projet de test que nous appellerons tests.

Pour ce faire cliquer sur le bouton "Explorer" de XAMPP Control Panel et rendez-vous dans le dossier racine  htdocs  . Puis, créez un nouveau sous-dossier que vous appellerez tests, comme sur cette image :

Maintenant ouvrez votre navigateur web. Dans la barre d'adresse, saisissez  localhost/tests  . Le dossier tests apparaît dans le navigateur.

Il n'y a rien à l'intérieur pour le moment :

Si vous avez le même résultat, cela signifie que tout fonctionne. Bravo, vous avez installé XAMPP et il fonctionne correctement. Vous êtes prêt à programmer en PHP !

QUOI ?! Tout ça pour ça ?

Eh oui, l'ami ! On n'a pas encore commencé à programmer, il ne fallait pas non plus vous attendre à un feu d'artifice tout de suite. 🎆

Vous pouvez passer la section suivante qui ne concerne que les utilisateurs sous Mac et sous Linux.

Découvrez le serveur PHP intégré

Nous avons installé des logiciels qui reproduisent le comportement exact d'un serveur tel qu'il serait configuré et installé en ligne. Mais pour de petits travaux sur votre ordinateur "en local", PHP fournit un serveur web interne très pratique, et qui utilise PHP en ligne de commande pour provoquer l'exécution du script et le rendu de la page.

Par exemple, si l'on crée un fichier PHP index.php avec le contenu suivant :

<?php

echo "Hello world";

et que nous exécutons en ligne de commande au niveau du dossier où se trouve le fichier index.php :

php -S localhost:8080

  - localhost étant votre "nom de domaine" local ;

  - "8080" étant un port HTTP quelconque.

Ensuite, en accédant à http://localhost:8080/index.php, le retour de l'exécution de ce script PHP sera disponible ! Pratique, non ?

Par la suite, dans les vidéos du cours, nous utiliserons l'une ou l'autre des options proposées.

Vous êtes prêt à travailler en PHP !

Utilisez un bon éditeur de texte

Comme vous devez déjà le savoir, pour éditer le code d'une page web, vous avez plusieurs solutions :

   - utiliser un éditeur de texte tout simple que vous avez déjà, comme Bloc-notes. Ce logiciel suffit 
     normalement à écrire des pages web en HTML et même en PHP, mais…

   - le mieux reste d'utiliser un logiciel spécialisé qui colore votre code (très pratique) et qui numérote 
     vos lignes (très pratique aussi).

Il existe des centaines et des centaines de logiciels gratuits faits pour les développeurs comme vous. Je vais vous en présenter ici deux :

   1. Un que l'on peut utiliser gratuitement : Visual Studio Code.

   2. Et un payant : PHPStorm.

Je vous propose donc d'installer un logiciel qui va vous permettre d'éditer vos fichiers sources de manière efficace. Vous en avez probablement déjà installé un si vous avez appris à programmer en HTML/CSS, mais comme on n'est jamais trop prudent, je vais rapidement vous en présenter quelques-uns en fonction de votre système d'exploitation.

Voici le code source HTML que nous allons utiliser pour commencer en terrain connu. Copiez-collez ce code dans l'éditeur de texte que je vais vous faire installer :

<html>
    <head>
        <meta charset="utf-8"/>
        <title>Ceci est une page HTML de test</title>
    </head>

    <body>
        <h2>Page de test</h2>
        <p>
            Cette page contient <strong>uniquement</strong> du code HTML.<br/>


            Voici quelques petits tests :


        </p>

        <ul>
            <li style="color: blue;">Texte en bleu</li>
            <li style="color: red;">Texte en rouge</li>
            <li style="color: green;">Texte en vert</li>
        </ul>
    </body>
</html>

Il n'y a pas de PHP pour l'instant, afin de commencer en douceur. Nous allons simplement essayer d'enregistrer un fichier HTML avec ce code pour nous échauffer.

Visual Studio Code

Que vous soyez sous Windows, Mac ou Linux, je vous recommande de commencer avec l'éditeur Visual Studio Code qui est suffisamment léger et simple si vous débutez.

Ne vous fiez pas à son apparente simplicité : Visual Studio Code est en effet rapide et simple à la base, mais il est possible d'étendre ses fonctionnalités avec d'innombrables plugins !

Visual Studio Code est un très bon éditeur, utilisé par de nombreux développeurs (y compris des professionnels). Il voit en revanche ses limites sur de gros projets, où certains lui préfèrent PHPStorm.

PHPStorm

PHPStorm ressemble un peu plus à une "machine de guerre". Et pour cause : c'est un IDE, un environnement de travail de développeur. Il est utilisé par de nombreux développeurs PHP professionnels de ma connaissance. 

PHPStorm est plus "costaud" que Visual Studio Code. Il met plus de temps à charger, il peut avoir de nombreuses fonctionnalités avancées grâce à ses plugins.

Par ailleurs, PHPStorm est payant.

Vous ne commencerez peut-être pas de suite avec PHPStorm, mais gardez-le sur votre radar car c'est un outil très utilisé que vous essaierez sûrement un jour.

En résumé

- Pour créer des sites web dynamiques, nous devons installer des outils qui transforment notre ordinateur en 
  serveur, afin de pouvoir tester notre site.

- Les principaux outils nécessaires sont :

       1. Apache, le serveur web.

       2. PHP, le programme qui permet au serveur web d'exécuter des pages PHP.

       3. MySQL, le logiciel de gestion de bases de données.

- Bien qu'il soit possible d'installer ces outils séparément, il est plus simple pour nous d'installer un 
  paquetage tout prêt : XAMPP.

- Il est conseillé d'utiliser un éditeur de texte qui colore le code source, comme Visual Studio Code, pour 
  programmer convenablement en PHP. Pour les personnes plus expérimentées qui travaillent sur de gros projets, 
  je recommande PHPStorm.

Tout est installé, maintenant vous allez passer à la pratique et écrire votre premier script. On y va !

##############################################################################################################

Écrivez votre premier script

Un peu plus tôt dans ce cours, nous avons découvert le principe de fonctionnement du PHP.

Maintenant, nous allons passer à la pratique et réaliser notre toute première page web en PHP !

Ne vous attendez pas à un résultat extraordinaire, mais cela va vous permettre de prendre vos marques. Vous allez en particulier comprendre comment on sépare le code HTML classique du code PHP.

Vous êtes prêt ? Allons-y !

Utilisez des balises PHP

Vous savez que le code source d'une page HTML est constitué de balises (aussi appelées tags, en anglais). Par exemple, <ul>  est une balise.

Le code PHP viendra s'insérer au milieu du code HTML. On va progressivement placer dans nos pages web des morceaux de code PHP à l'intérieur du HTML. Ces bouts de code PHP seront les parties dynamiques de la page, c'est-à-dire les parties qui peuvent changer toutes seules.

Le code suivant illustre cela :

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>Ma page web</title>
    </head>
    
    <body>
        <h1>Ma page web</h1>
        
        <p>
            Bonjour <!-- Insérer le pseudo du visiteur ici --> !
        </p>

    </body>
</html>

Comme vous pouvez le voir, on retrouve le code HTML que l'on connaît bien… et on insère en plus des données dynamiques au milieu. Ici, par exemple, c'est le pseudonyme : il change en fonction du visiteur.

OpenClassrooms fait la même chose pour ses membres inscrits. Votre pseudonyme est affiché en haut des pages lorsque vous êtes connecté.

Reconnaissez la forme d'une balise PHP

Si je vous parle de cela, ce n'est pas par hasard. Pour utiliser du PHP, on va devoir introduire une nouvelle balise… et celle-ci est un peu spéciale.

   1. Elle commence par  <?php 

   2. Et se termine par?>   

C'est à l'intérieur que l'on mettra du code PHP (ce que je vais vous apprendre tout au long de ce cours).

Voici une balise PHP vide :

<?php ?>

À l'intérieur, on écrira donc du code source PHP :

<?php /* Le code PHP se met ici */ ?>

On peut sans problème écrire la balise PHP sur plusieurs lignes.

En fait, c'est même indispensable car la plupart du temps, le code PHP fera plusieurs lignes.

Cela donnera quelque chose comme :

<?php
/* Le code PHP se met ici
Et ici
Et encore ici */
?>

Il existe d'autres balises pour utiliser du PHP ; par exemple : 

 - <? ?> 

 - <% %> 

 - <?= ?>

Ne soyez donc pas étonné si vous en voyez.

Néanmoins, <?php ?>  est la forme la plus correcte ; vous apprendrez donc à vous servir de cette balise et non pas des autres.

Insérez une balise PHP au milieu du code HTML

La balise PHP que nous venons de découvrir s'insère au milieu du code HTML, comme je vous l'ai dit plus tôt. Pour reprendre l'exemple que l'on a vu au chapitre précédent :

<!DOCTYPE html>
<html>
    <head>
        <title>Ceci est une page de test avec des balises PHP</title>
        <meta charset="utf-8" />
    </head>
    <body>
        <h2>Page de test</h2>
        
        <p>
            Cette page contient du code HTML avec des balises PHP.<br />
            <?php /* Insérer du code PHP ici */ ?>
            Voici quelques petits tests :
        </p>
        
        <ul>
        <li style="color: blue;">Texte en bleu</li>
        <li style="color: red;">Texte en rouge</li>
        <li style="color: green;">Texte en vert</li>
        </ul>
        
        <?php
        /* Encore du PHP
        Toujours du PHP */
        ?>
    </body>
</html>

Peut-on placer une balise PHP n'importe où dans le code ?

Oui ! Vraiment n'importe où. Pas seulement dans le corps de la page, d'ailleurs : vous pouvez placer une balise PHP dans l'en-tête de la page (regardez la ligne 4 de l'exemple ci-dessous).

<!DOCTYPE html>
<html>
    <head>
        <title>Ceci est une page de test <?php /* Code PHP */ ?></title>
        <meta charset="utf-8" />
    </head>

Plus fort encore, vous pouvez même insérer une balise PHP au milieu d'une balise HTML, comme le montre la ligne 5 de l'exemple ci-dessous (bon, ce n'est pas très joli, je vous l'accorde) :

<!DOCTYPE html>
<html>
    <head>
        <title>Ceci est une page de test</title>
        <meta <?php /* Code PHP */ ?> charset="utf-8" />
    </head>

Comment ça fonctionne ? À quoi ça peut servir ?

Il faut se rappeler que PHP génère du code HTML. Nous allons mieux comprendre le fonctionnement en apprenant à afficher du texte en PHP.

Affichez du texte

Bon, tout ça c'est bien beau, mais il serait temps de commencer à écrire du code PHP, non ?

Grande nouvelle : c'est maintenant que vous allez apprendre votre première instruction en PHP.

Ne vous attendez pas à quelque chose d'extraordinaire, votre PC ne va pas se mettre à danser la samba tout seul. 😄

Vous allez cependant un peu mieux comprendre comment le PHP fonctionne, c'est-à-dire comment il génère du code HTML. Il est indispensable de bien comprendre cela ; soyez donc attentif !

Utilisez l'instruction echo

Le PHP est un langage de programmation, ce qui n'était pas le cas du HTML. Dans ce cours, nous partons de zéro et donc je vais supposer que vous n'avez jamais fait de programmation auparavant.

Tout langage de programmation contient ce qu'on appelle des instructions. On en écrit une par ligne en général, et en PHP elles se terminent toutes par un point-virgule. Une instruction commande à l'ordinateur d'effectuer une action précise.

Ici, la première instruction que nous allons découvrir permet d'insérer du texte dans la page web. Il s'agit de l'instruction echo, la plus simple et la plus basique de toutes les instructions que vous devez connaître.

Pour avoir plus d'informations sur l'instruction echo, vous pouvez consulter le site officiel de PHP : l'instruction echo. Le site officiel de PHP est la principale ressource pour la documentation, les téléchargements et les informations essentielles sur le langage de programmation PHP.

Voici un exemple d'utilisation de cette instruction :

<?php echo "Ceci est du texte"; ?>

<!-- Ou bien, avec des parenthèses -->
<?php echo("Ceci est du texte"); ?>

Comme vous le voyez, à l'intérieur de la balise PHP on écrit l'instruction echo  suivie du texte à afficher entre guillemets. Les guillemets permettent de délimiter le début et la fin du texte, ce qui aide l'ordinateur à se repérer.

L'instruction se termine par un point-virgule comme je vous l'avais annoncé, ce qui signifie "Fin de l'instruction".

C'est beaucoup plus rare, mais l'instruction echo peut être entourée de parenthèses ouvrantes et fermantes : nous reviendrons là-dessus dans le chapitre sur les fonctions.

Notez qu'il existe une instruction identique à echo  appelée print  , qui fait la même chose.

Cependant, echo est plus couramment utilisée.

Il faut savoir qu'on a aussi le droit de demander d'afficher des balises. Par exemple, le code suivant fonctionne :

?php echo "Ceci est du <strong>texte</strong>"; ?>
Le mot « texte » sera affiché en gras grâce à la présence des balises <strong>  et </strong>  .

Comment faire pour afficher un guillemet ?

Bonne question.

Si vous mettez un guillemet, ça veut dire pour l'ordinateur que le texte à afficher s'arrête là. Vous risquez au mieux de faire planter votre beau code et d'avoir une terrible « Parse error ».

La solution consiste à faire précéder le guillemet d'un antislash  \  :

<?php echo "Cette ligne a été écrite \"uniquement\" en PHP."; ?>

Vous savez que le code PHP s'insère au milieu du code HTML. Alors allons-y, prenons une page basique en HTML et plaçons-y du code PHP (ligne 12).

<!DOCTYPE html>
<html>
    <head>
        <title>Notre première instruction : echo</title>
        <meta charset="utf-8" />
    </head>
    <body>
        <h2>Affichage de texte avec PHP</h2>
        
        <p>
            Cette ligne a été écrite entièrement en HTML.<br />
            <?php echo("Celle-ci a été écrite entièrement en PHP."); ?>
        </p>
    </body>
</html>

Je vous propose de copier-coller ce code source dans votre éditeur de texte (Visual Studio Code ou autre... ) et d'enregistrer la page. Nous allons l'essayer et voir ce qu'elle produit comme résultat.

Mais au fait, comment on fait déjà pour enregistrer une page PHP ? 

Enregistrez une page PHP

Enregistrez la page avec l'extension  .php . Par exemple :  affichertexte.php  , dans le dossier tests que je vous ai fait créer.

Il doit se trouver :

 - dans  C:\XAMPP\htdocs\tests  sous Windows,

 - ou   /Applications/XAMPP/htdocs/tests  sous Mac,

 - ou  /opt/lampp/htdocs/tests/  sous Linux.

Quel que soit votre système d'exploitation, l'essentiel est que le fichier soit enregistré dans le dossier  www  si vous utilisez MAMP ou WAMP (ou un de ses sous-dossiers) ; sinon le fichier PHP ne pourra pas s'exécuter !

Une fois la page enregistrée, il faut maintenant la tester.

Testez une page PHP
Pour tester votre page PHP, tout dépend de votre système d'exploitation, mais la manœuvre est la même dans les grandes lignes.

  1. Démarrez XAMPP si ce n'est pas déjà fait.

  2. Allez à l'adresse  http://localhost/tests . Une page web s'ouvre, indiquant tous les fichiers qui se 
     trouvent dans le dossier  tests . Vous devriez avoir le fichier   affichertexte.php .

  3. Cliquez dessus : votre ordinateur génère alors le code PHP puis ouvre la page. Vous avez le résultat 
     devant vos yeux ébahis. 👀

Le même résultat peut être obtenu dans votre navigateur, en allant directement à l'adresse suivante :  http://localhost/tests/affichertexte.php  .

La méthode devrait être quasiment la même, que vous soyez sous Windows, macOS X ou Linux.

Si vous utilisez le serveur local de PHP, vous pouvez sauvegarder le fichier où vous le souhaitez, mais en contrepartie, vous devez toujours démarrer le serveur au niveau d'un dossier contenant le fichier à exécuter. Pour rappel, voici la commande :  php -S localhost:8080  .

Ne pas oublier : le serveur PHP recherche automatiquement un fichier nommé  index.php  comme point d'entrée par défaut !

Alors, que voyez-vous ?

Je pense que vous êtes étonné et surpris de ce que je vous ai fait faire : ça a l'air d'être inutile, et ce n'est pas tout à fait faux…

Le code PHP a « écrit » une ligne à l'écran, tout simplement.

Mais… ce n'est pas plus simple de l'écrire en HTML, finalement ?

Si ! Mais vous verrez bientôt l'intérêt de cette fonction. Pour le moment, on constate juste que ça écrit du texte. 🤓

En attendant, pour vous amuser et comprendre la force de PHP, essayez juste le code suivant (qu'on expliquera plus tard dans le cours) :

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>Ma page web</title>
    </head>
    <body>
        <h1>Ma page web</h1>
        <p>Aujourd'hui nous sommes le <?php echo date('d/m/Y h:i:s'); ?>.</p>
    </body>
</html>

Testez ce code et admirez : la date et l'heure s'affichent automatiquement sur la page web !

Attendez quelques minutes, puis actualisez la page : l'heure s'est mise à jour toute seule !

Regardez le code source de la page générée dans le navigateur : vous verrez qu'il n'y a pas de code PHP et que l'heure a directement été envoyée dans le code HTML après exécution du code PHP par le serveur.

Commentez votre code

Avant de terminer ce chapitre, je tiens à vous parler de quelque chose qui à mes yeux a une très grande importance quand on développe des programmes : les commentaires.

Un commentaire est un texte que l'on écrit pour soi (ou pour d'autres développeurs qui vont travailler dessus) dans le code PHP.

Ce texte est ignoré, c'est-à-dire qu'il disparaît complètement lors de la génération de la page. Il n'y a que vous qui voyez ce texte.

Mais alors, à quoi sert un commentaire ?

Cela permet de vous y retrouver dans votre code PHP, parce que si vous n'y touchez pas pendant des semaines et que vous y revenez, vous risquez d'être un peu perdu.

Vous pouvez écrire tout et n'importe quoi, le tout est de s'en servir à bon escient.

Il existe deux types de commentaire :

  1. Les commentaires monolignes.

  2. Les commentaires multilignes.

Tout dépend de la longueur de votre commentaire. Je vais vous présenter les deux.

Faites des commentaires monolignes
Pour indiquer que vous écrivez un commentaire sur une seule ligne, vous devez taper deux slashs : « //  ». Tapez ensuite votre commentaire.
Un exemple ?

<?php
echo "J'habite en Chine."; // Cette ligne indique où j'habite

// La ligne suivante indique mon âge
echo "J'ai 92 ans.";
?>

Je vous ai mis deux commentaires à des endroits différents :

 - le premier est à la fin d'une ligne ;

 - le second est sur toute une ligne.

À vous de voir où vous placez vos commentaires : si vous commentez une ligne précise, mieux vaut mettre le commentaire à la fin de cette ligne.

Faites des commentaires multilignes
Ce sont les plus pratiques si vous pensez écrire un commentaire sur plusieurs lignes, mais on peut aussi s'en servir pour écrire des commentaires d'une seule ligne. Il faut commencer par écrire /*  puis refermer par */  :

<?php
/* La ligne suivante indique mon âge
Si vous ne me croyez pas...
... vous avez raison ;o) */
echo "J'ai 92 ans.";
?>

Ici, les commentaires n'ont pas grande utilité, mais vous verrez de quelle façon je les utilise dans les prochains chapitres pour vous décrire le code PHP.

En résumé

- Les pages web contenant du PHP ont l'extension .php 

- Une page PHP est une simple page HTML qui contient des instructions en langage PHP.

- Les instructions PHP sont placées dans une balise ouvrante et fermante : <?php ?>  

- Pour afficher du texte en PHP, on utilise l'instruction echo  

- Il est possible d'ajouter des commentaires en PHP pour décrire le fonctionnement du code. On utilise pour 
  cela les symboles // ou /* */  

Dans ce chapitre vous avez découvert les toutes premières notions qui vont vous permettre de passer à la suite : visualiser ses erreurs !

##############################################################################################################

Configurez PHP pour visualiser les erreurs

Avant d'aller plus loin, il est important de faire un petit point à propos de quelque chose que vous allez sans doute beaucoup rencontrer (et ce n'est absolument pas grave !) : les erreurs.

En effet, lorsqu'un script PHP plante, le comportement par défaut de PHP est de n'afficher qu'une page blanche (une page de navigateur sans contenu).

Pour faciliter notre vie de développeur, il va falloir faire en sorte que les erreurs PHP s'affichent. Sinon, nous aurons de grosses difficultés par la suite pour comprendre pourquoi nos pages ne marchent pas.

Nous allons donc changer la configuration de PHP.

Configurez PHP pour afficher les erreurs

Eh oui, PHP est configurable !

Si les erreurs s'affichent déjà bien dans votre navigateur, inutile de faire les manipulations qui vont suivre !

Par défaut, PHP n'affiche pas les erreurs.

Pourquoi ?

Pour des raisons de sécurité ! C'est pour éviter de donner trop d'indications aux utilisateurs, tout simplement.

Un mantra à vous répéter :

"Moins l'utilisateur en sait sur mon application, mieux mon application se portera."

La configuration de PHP se fait dans un fichier appelé php.ini

Où est-ce qu'il se trouve, ce fichier ?

En fait, vous allez devoir le localiser. Mais pas de panique, je vous explique tout !

Localisez le fichier de configuration PHP du serveur web

Pour connaître l'ensemble des informations relatives au PHP utilisé par le serveur web, il existe une commande PHP, phpinfo() (on parle de fonction, mais on y reviendra).

Nous allons utiliser phpinfo() pour localiser le fichier de configuration, puis le modifier.

Je vous invite donc à créer un fichier PHP avec le code qui suit :

<?php

phpinfo();

Enregistrez-le sous le nom info.php  dans le dossier accessible pour votre serveur web (normalement htdocs ou www  ).

Et enfin, affichez la page. Vous devriez obtenir le résultat suivant :

Cette page contient toute une flopée d'informations, dont :

  - la version de PHP utilisée (pour moi, il s'agit de PHP 8.2.12) ;

  - le type de serveur web (ici Apache) ;

  - et la localisation du (ou des fichiers) de configuration pour PHP.

Notez que vous pouvez aussi accéder au phpinfo depuis le menu "PHPINFO" en haut de la page d'accueil de XAMPP.

Retrouvez la ligne "Loaded Configuration File" (ce qui signifie "fichier de configuration chargé", en anglais), et regardez la valeur. Dans mon cas, on peut voir ceci :

Je vais donc ouvrir ce fichier et le modifier.

Modifiez le fichier de configuration PHP

Il faut s'assurer que :

 - la clé de configuration error_reporting a la valeur E_ALL

 - la clé de configuration  display_errors a la valeur On 

Allons-y étape par étape :

 1. Effectuez une recherche dans le fichier avec le terme error_reporting . S'il n'y a pas écrit  
    error_reporting = E_ALL , remplacez-la par la bonne valeur.

 2. Ensuite, effectuez une nouvelle recherche dans le fichier avec le terme display_errors . S'il n'y a pas 
    écrit display_errors = On , remplacez-la par la bonne valeur.

 3. Enregistrez le fichier.

 4. Relancez le serveur pour qu'il prenne en compte vos modifications. Il suffit de relancer XAMPP, par 
    exemple.

Dans le fichier de configuration, le point-virgule ( ; ) en début de ligne signifie que tout ce qui suit est un commentaire, et est donc ignoré.

Si l'une de ces lignes (ou les deux) sont commentées, il suffit de retirer le point-virgule en début de ligne.

Faites attention à ce que ces lignes de configuration n'existent qu'une seule fois dans le fichier : en effet, ne créez pas ces lignes si elles existaient déjà.

Testez l'affichage des erreurs

Nous allons maintenant créer une erreur dans un script PHP pour nous assurer que l'erreur s'affiche dans le navigateur.

Dans le script (que nous avons créé pour afficher les informations relatives à PHP pour le serveur web ; nous l'avions appelé  info.php  ), retirez une parenthèse, puis enregistrez le fichier.

Ça devrait donner ceci :

<?php

phpinfo(;

Oui, je sais, il manque une parenthèse, c'est une erreur, on le fait exprès.

Maintenant, affichez la page à l'aide de votre navigateur web.

Et voilà !

Si vous voyez bien cette erreur, c'est que PHP est configuré pour afficher le détail des erreurs.

Ouf ! Ça nous fera gagner beaucoup de temps pour comprendre nos problèmes par la suite.

En résumé

- PHP dispose d'un mode de déboggage pour afficher les erreurs contenues dans vos scripts.

- Pour activer le déboggage, on modifie la configuration de PHP en éditant le fichier php.ini.

- On peut trouver la localisation de ce fichier (et plein d'autres informations) en exécutant la fonction 
  phpinfo() <?php phpinfo(); ?>  .

- Pour activer l'affichage, on change la propriété display_errors à On et on filtre le type d'erreurs avec 
  error_reporting (on choisira E_ALL pour voir toutes les erreurs !).

C'est la fin de cette première partie, maintenant testez vos connaissances avec le quiz !

##############################################################################################################

