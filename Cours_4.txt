                                 Stockez des informations dans une base de données

Travaillez avec une base de données

Pour l'instant, vous avez découvert le fonctionnement du langage PHP, mais vous ne vous sentez probablement pas encore capable de créer de vrais sites web avec ce que vous avez appris. C'est parfaitement normal, car il vous manque un élément crucial : la base de données.

Une base de données permet d'enregistrer des données de façon organisée et hiérarchisée.

Certes, vous connaissez les variables, mais celles-ci restent en mémoire seulement le temps de la génération de la page. Vous pourriez aussi écrire vos données dans des fichiers, mais cela devient vite très compliqué, dès que vous avez beaucoup de données à enregistrer.

Or, il va bien falloir stocker quelque part la liste de vos membres, les recettes, les commentaires sous les recettes… Les bases de données constituent le meilleur moyen de faire cela de façon simple et propre. Nous allons les étudier durant toute cette partie du cours !

Découvrez langage SQL et les bases de données

La base de données (BDD) est un système qui enregistre des informations.

Un peu comme un fichier texte ?

Non, pas vraiment. Ce qui est très important ici, c'est que ces informations sont toujours organisées. Et c'est ça qui fait que la BDD est si pratique : c'est un moyen simple de ranger des informations.

Et si je préfère rester désordonné ? Si je n'ai pas envie de classer mes informations ?
Est-on obligé de classer chaque information qu'on enregistre ?

C'est un peu ce que je me disais au début… Classer certaines choses, d'accord, mais il me semblait que je n'en aurais besoin que très rarement.

Grave erreur ! Vous allez le voir : 99 % du temps, on range ses informations dans une base de données. Pour le reste, on peut les enregistrer dans un fichier comme on a appris à le faire… mais quand on a goûté aux bases de données, on peut difficilement s'en passer ensuite !

Imaginez par exemple une armoire, dans laquelle chaque dossier est à sa place.

Quand tout est à sa place, il est beaucoup plus facile de retrouver un objet, n'est-ce pas ? Eh bien là, c'est pareil : en classant les informations que vous collectez (concernant vos visiteurs, par exemple), il vous sera très facile de récupérer plus tard ce que vous cherchez.

Nous allons utiliser le Système de Gestion de Base de Données (SGBD) avec MySQL, mais sachez que l'essentiel de ce que vous allez apprendre fonctionnera de la même manière avec un autre SGBD. Cette partie est construite afin que vous ayez le moins de choses possible à apprendre de nouveau si vous choisissez de changer de SGBD.

Donnez les ordres au SGBD en langage SQL

Vous allez devoir communiquer avec le SGBD pour lui donner l'ordre de récupérer ou d'enregistrer des données. Pour lui "parler", on utilise le langage SQL.

La bonne nouvelle, c'est que le langage SQL est un standard, c'est-à-dire que quel que soit le SGBD que vous utilisez, vous vous servirez du langage SQL. La mauvaise, c'est qu'il y a en fait quelques petites variantes d'un SGBD à l'autre, mais cela concerne généralement les commandes les plus avancées.

Comme vous vous en doutez, il va falloir apprendre le langage SQL pour travailler avec les bases de données. Ce langage n'a rien à voir avec le PHP, mais nous allons impérativement en avoir besoin.

Voici un exemple de commande en langage SQL, pour vous donner une idée :

SELECT id, auteur, message, datemsg FROM livreor ORDER BY datemsg DESC

Le principal objectif de cette partie du cours sera d'apprendre les instructions nécessaires à écrire en PHP pour effectuer des requêtes en base de données, et les bases du langage SQL.

MySQL et le SQL sont des compétences très précieuses et utiles tout au long de votre carrière en développement web, et si vous souhaitez progresser sur le sujet, n'hésitez pas à suivre le cours intitulé "Implémentez vos bases de données relationnelles avec SQL" en complément de ce cours.

Comprenez comment PHP fait la jonction entre vous et MySQL
Pour compliquer un petit peu l'affaire (sinon, ce n'est pas rigolo), on ne va pas pouvoir parler à MySQL directement. Eh non, seul PHP peut le faire !

C'est donc PHP qui va faire l'intermédiaire entre vous et MySQL. On devra demander à PHP : "Va dire à MySQL de faire ceci".

Je crois qu'un petit schéma ne serait pas du luxe :

Voici ce qui peut se passer lorsque le serveur a reçu une demande d'un client qui veut poster un message :

  1. Le serveur utilise toujours PHP, il lui fait donc passer le message.

  2. PHP effectue les actions demandées et se rend compte qu'il a besoin de MySQL. En effet, le code PHP 
     contient à un endroit "Va demander à MySQL d'enregistrer ce message". Il fait donc passer le travail à 
     MySQL.

  3. MySQL fait le travail que PHP lui a soumis et lui répond "OK, c'est bon !".

  4. PHP renvoie au serveur que MySQL a bien fait ce qui lui était demandé.

Maintenant que nous avons fait les présentations, il va falloir découvrir comment est organisée une base de données. Bien en comprendre l'organisation est en effet absolument indispensable.

Structurez votre base de données

Avec les bases de données, il faut utiliser un vocabulaire précis. Heureusement, vous ne devriez pas avoir trop de mal à vous en souvenir, vu qu'on va se servir d'une image : celle d'une armoire. Écoutez-moi attentivement et n'hésitez pas à lire lentement, plusieurs fois si c'est nécessaire.

Je vous demande d'imaginer ce qui suit.

  - L'armoire est appelée "la base" dans le langage SQL. C'est le gros meuble dans lequel les secrétaires ont 
    l'habitude de classer les informations.

  - Dans une armoire, il y a plusieurs tiroirs. Un tiroir, en SQL, c'est ce qu'on appelle "une table". Chaque 
    tiroir contient des données différentes. Par exemple, on peut imaginer un tiroir qui contient les 
    pseudonymes et informations sur vos visiteurs, un autre qui contient les messages postés sur votre forum, 
    etc.

  - Mais que contient une table ? C'est là que sont enregistrées les données, sous la forme d'un tableau. Dans 
    ce tableau, les colonnes sont appelées des "champs", et les lignes sont appelées des "entrées".

Une table est donc représentée sous la forme d'un tableau.

Par exemple, le tableau suivant vous montre à quoi peut ressembler le contenu d'une table appelée « Utilisateurs » :


Number    Full name            Email                          Age            Password

1         Mathieu Nebra        mathieu.nebra@exemple.com      34             P4ssW0rd

2         Laurène Castor       laurene.castor@exemple.com     28             jm_les_cookies

3         Mickaël Andrieu      mickael.andrieu@exemple.com    34             s3cr3t

4         Vous                 vous@exemple.com               29             123456

…         …                    …                              …

 


Ce tableau représente le contenu d'une table (c'est-à-dire le tiroir de l'armoire).

Chaque ligne est une entrée. Ici, il y en a quatre, mais une table peut très bien contenir 100, 1 000, ou même 100 000 entrées.

Très souvent, on crée un champ "Number", aussi appelé "ID" (identifiant).

Comme nous le verrons plus tard, il est très pratique de numéroter ses entrées, même si ce n'est pas obligatoire.

Et pour finir, voici l'indispensable schéma pour que tout ça soit clair :

La base de données contient plusieurs tables (on peut en mettre autant que l'on veut à l'intérieur).

Rappel : chaque table est en fait un tableau où les colonnes sont appelées champs et où les lignes sont appelées entrées.

Pour vous donner quelques exemples concrets, voici le nom des tables que vous allez devoir créer pour compléter votre site de partage de recettes :

  - users : stocke tous les comptes utilisateur de votre site ;

  - recipes : stocke toutes les recettes de votre site ;

  - comments : stocke tous les commentaires liés aux recettes.

Si quelque chose ne vous paraît pas clair, si vous avez l'impression de mélanger un peu "bases", "tables", "champs" ou "entrées", relisez de nouveau cette partie. Il faut que vous soyez capable de reproduire le schéma tout seul sur un bout de papier.

Enregistrez les données

Avant de terminer le chapitre, voici une question que l'on se pose fréquemment, quand on lit ce genre de chapitre sur les bases de données pour la première fois.

Ils sont bien jolis ces tableaux et ces schémas, ces bases, ces champs… Mais je vois pas ce que c'est concrètement, moi ! Où est-ce que MySQL enregistre les données ?

En fait, tout ce que je viens de vous montrer, c'est une façon de « visualiser » la chose. Il faut que vous imaginiez que la base de données gère les informations sous forme de tableaux, parce que c'est la meilleure représentation qu'on puisse s'en faire.

Mais concrètement, quand MySQL enregistre des informations, il les écrit bien quelque part. Oui, comme tout le monde, il les enregistre dans des fichiers !

Ces fichiers sont quelque part sur votre disque dur, mais il ne faut jamais les ouvrir et encore moins les modifier directement. Il faut toujours parler avec MySQL qui va se charger d'extraire et de modifier les informations dans ces fichiers.

Chaque SGBD a sa propre façon d'enregistrer les données, mais aucun d'eux ne peut y échapper : pour que les données restent enregistrées, il faut les stocker dans des fichiers sur le disque dur.

Par exemple, avec MySQL sous Windows, si vous utilisez XAMPP, vous devriez trouver les fichiers où sont stockées les informations dans  C:\xampp\mysql\data  .

C'est le même principe si vous utilisez MAMP, WAMP... : les fichiers de la base de données sont bien quelque part !

Je vous recommande très fortement de ne pas y toucher, car ils ne sont pas prévus pour être modifiés directement !

Dans la pratique, on n'ira jamais toucher à ces fichiers directement. On demandera TOUJOURS à MySQL d'enregistrer, ou d'aller lire des choses. Après, c'est lui qui se débrouille pour classer ça comme il veut dans ses fichiers.

Et c'est justement ça, le gros avantage de la base de données : pas de prise de tête pour le rangement des informations. Vous demandez à MySQL de vous sortir tous les commentaires d'une recette de votre site enregistrées de février à juillet : il va lire dans ses fichiers, et vous ressort les réponses. Vous vous contentez de "dialoguer" avec MySQL. Lui se charge du sale boulot, c'est-à-dire de ranger vos données dans ses fichiers.

En résumé

- Une base de données est un outil qui stocke vos données de manière organisée et vous permet de les retrouver 
  facilement par la suite.

- On communique avec MySQL grâce au langage SQL. Ce langage est commun à tous les systèmes de gestion de base 
  de données (avec quelques petites différences néanmoins pour certaines fonctionnalités plus avancées).

- PHP fait l'intermédiaire entre vous et MySQL.

- Une base de données contient plusieurs tables.

- Chaque table est un tableau où les colonnes sont appelées « champs » et les lignes « entrées ».

Nous arrivons au cœur du sujet de cette dernière partie du cours : la mise en place d'une base de données avec phpMyAdmin.

##############################################################################################################

Mettez en place une base de données avec phpMyAdmin

Dans ce chapitre, vous allez créer et mettre en place la base de données pour votre site de partage de recettes.

Pour communiquer avec MySQL, nous pouvons utiliser différents logiciels : de l'invite de commandes jusqu'à des logiciels accessibles par le navigateur. Ici, vous allez utiliser phpMyAdmin, l'un des outils les plus connus permettant de manipuler une base de données MySQL.

phpMyAdmin est livré avec XAMPP ; vous allez donc pouvoir vous en servir tout de suite !

Créez une table pour les recettes

Pour créer une table qui correspond à une recette, nous allons devoir associer chacune des propriétés de nos recettes à un champ de la table, et lui associer un type de données.

Ensuite, nous devons définir un champ qui servira d'identifiant unique (un peu comme un numéro de Sécurité sociale), de sorte à pouvoir retrouver chaque recette :

Les types de champs MySQL

Alors que PHP ne propose que quelques types de données que l'on connaît bien maintenant ( int  , string  , bool  …), MySQL propose une quantité très importante de types de données.

Mais dans la pratique, vous n'aurez besoin de jongler qu'entre les quatre types de données suivants :

  1. INT : nombre entier ;

  2. VARCHAR : texte court (entre 1 et 255 caractères) ;

  3. TEXT : long texte (on peut y stocker un roman sans problème) ;

  4. DATE : date (jour, mois, année).

Cela couvrira 99 % de vos besoins, et avec l'expérience vous apprendrez à optimiser vos bases de données, et l'intérêt des autres types de données de MySQL.

Les clés primaires

Toute table doit posséder un champ qui joue le rôle de clé primaire. La clé primaire permet d'identifier de manière unique une entrée dans la table. En général, on utilise le champ id comme clé primaire, comme on vient de le faire.

Prenez le réflexe de créer à chaque fois ce champ « id » en lui donnant l'index PRIMARY  , ce qui aura pour effet d'en faire une clé primaire.

Vous en profiterez en général pour cocher la case AUTO_INCREMENT pour que ce champ gère lui-même les nouvelles valeurs automatiquement (1, 2, 3, 4…).

Modifiez une table

Mais… je ne vais pas devoir passer par phpMyAdmin à chaque fois que je veux ajouter ou supprimer un élément, quand même ?

Non, bien sûr que non.

Vous allez apprendre à le faire en PHP dans les chapitres suivants.

Il nous reste encore à découvrir deux des nombreuses fonctionnalités offertes par phpMyAdmin, et nous aurons terminé notre tour d'horizon de cet outil : l'import et l'export de base de données.

Importez et exportez des données

Vous allez ici vous intéresser à l'onglet "Import" de phpMyAdmin, dont le principal intérêt est de créer une base de données entière avec tables et données :

Explorez maintenant l'onglet « Exporter » de phpMyAdmin.

C'est ici que vous allez pouvoir récupérer votre base de données sur le disque dur, sous forme de fichier texte .sql  (qui contiendra des tonnes de requêtes SQL).

Le fichier que vous allez obtenir grâce à « l'exportation » de phpMyAdmin, c'est un fichier qui dit à MySQL comment recréer votre base de données (avec des requêtes en langage SQL). Et ce fichier-là est tout à fait lisible.

À quoi sert ce fichier ?

On peut s'en servir pour deux choses :

  1. Transmettre votre base de données sur Internet : pour le moment, votre base de données se trouve sur 
     votre disque dur. Mais lorsque vous voudrez héberger votre site sur Internet, il faudra utiliser la base 
     de données en ligne de votre hébergeur ! Le fichier .sql que vous allez générer vous permettra de 
     reconstruire la base de données à l'identique.

  2. Faire une copie de sauvegarde de la base de données : on ne sait jamais, si vous faites une bêtise ou si 
     quelqu'un réussit à détruire toutes les informations sur votre site, vous serez bien content d'avoir une 
     copie de secours sur votre disque dur !

Exercez-vous

Il est temps de créer la base de données pour notre projet fil rouge.

  - Téléchargez le fichier d'import de la base de données à partir du dossier P4C2 du GitHub. 

  - Suivez les étapes que nous avons vues dans le cours en utilisant phpMyAdmin pour importer le fichier SQL 
    que vous venez de télécharger.

En résumé

- phpMyAdmin est un outil qui nous permet de visualiser rapidement l'état de notre base de données et de la 
  modifier, sans avoir à écrire de requêtes SQL.

- On crée généralement un champ nommé id  qui sert à numéroter les entrées d'une table. Ce champ doit avoir un 
  index PRIMARY (on dit qu'on crée une clé primaire) et l'option AUTO_INCREMENT qui permet de laisser MySQL 
  gérer la numérotation.

- MySQL gère différents types de données pour ses champs, à la manière de PHP. On trouve des types adaptés au 
  stockage de nombres, de textes, de dates, etc.

- phpMyAdmin possède un outil d'importation et d'exportation des tables qui nous permettra notamment d'envoyer 
  notre base de données sur Internet ou d'en conserver une copie.

Dans le prochain chapitre, nous allons voir comment accéder aux données en PHP avec PDO. C'est parti !

##############################################################################################################

Accédez aux données en PHP avec PDO

Vous allez maintenant communiquer avec votre base de données de recettes via PHP.

À la fin de ce chapitre, vous aurez obtenu une nouvelle version de la page d'accueil du site, cette fois créée à l'aide de PHP et de MySQL !

Connectez-vous à la base de données en PHP
Pour pouvoir travailler avec la base de données en PHP, il faut d'abord s'y connecter.

Il va donc falloir que PHP s'authentifie : on dit qu'il établit une connexion avec MySQL.

Une fois que la connexion sera établie, vous pourrez faire toutes les opérations que vous voudrez sur votre base de données !

Pour se connecter à une base de données MySQL, vous allez devoir utiliser une extension PHP appelée PDO ("PHP Data Objects"). Cette extension est fournie avec PHP (en français, "les fonctions PDO sont à votre disposition"), mais parfois il vous faudra activer l'extension.

Vérifiez que PDO est bien activé

Je vous recommande de passer la ligne display_errors  sur "On" pour que les erreurs s'affichent ; ça va grandement nous aider :

display_errors = On

Si vous êtes sous Linux et que vous utilisez XAMPP, recherchez la ligne qui commence par pdo_mysql.default_socket  et complétez-la comme ceci :

pdo_mysql.default_socket = /opt/lampp/var/mysql/mysql.sock

Enregistrez le fichier puis redémarrez PHP. Il suffit pour cela de relancer votre logiciel favori (MAMP, XAMPP…).

Connectez PHP à MySQL avec PDO

Maintenant que nous sommes certains que PDO est activé, nous pouvons nous connecter à MySQL. Nous allons avoir besoin de quatre renseignements :

  - Le nom de l'hôte : c'est l'adresse IP de l'ordinateur où MySQL est installé. Le plus souvent, MySQL est 
    installé sur le même ordinateur que PHP : dans ce cas, mettez la valeur localhost . 

  - La base : c'est le nom de la base de données à laquelle vous voulez vous connecter. Dans notre cas, la 
    base s'appelle partage_de_recettes . Vous l'avez créée avec phpMyAdmin dans le chapitre précédent.

  - L'identifiant et le mot de passe : ils permettent de vous identifier. Renseignez-vous auprès de votre 
    hébergeur pour les connaître.

Si vous utilisez MAMP, la valeur de l'identifiant et du mot de passe est la même : root.

Voici donc l'instruction PDO pour vous connecter à votre base partage_de_recettes :

<?php
$mysqlClient = new PDO(
	'mysql:host=localhost;dbname=partage_de_recettes;charset=utf8',
	'root',
	''
);
?>

Je ne comprends rien à ce code, c'est normal ?

Oui, il faut reconnaître qu'il contient quelques nouveautés.

En effet, PDO est ce qu'on appelle une extension orientée objet. C'est une façon de programmer un peu différente des fonctions classiques que l'on a appris à utiliser jusqu'ici.

Pour l'instant, je vous invite à réutiliser les codes que je vous propose en suivant mes exemples. Vous comprendrez les détails de leur mode de fonctionnement un peu plus tard.

La ligne de code qu'on vient de voir crée une connexion à la base de données.

En fait, on crée la connexion en indiquant dans l'ordre dans les paramètres :

  - le nom d'hôte : localhost ;

  - la base de données : partage_de_recettes ;

  - l'identifiant (login) : root ;

  - le mot de passe (Sous XAMPP, il n’y a pas de mot de passe par défaut. Pour cela, nous utiliserons la 
    chaîne de caractères vide.).

Lorsque votre site sera en ligne, vous aurez sûrement un nom d'hôte différent, ainsi qu'un identifiant et un mot de passe, comme ceci :

<?php
$mysqlClient = new PDO('mysql:host=sql.hebergeur.com;dbname=mabase;charset=utf8', 'pierre.durand', 's3cr3t');
?>

Il faudra donc penser à changer cette ligne pour l'adapter à votre hébergeur en modifiant les informations en conséquence, lorsque vous enverrez votre site sur le Web.

Le premier paramètre (qui commence par mysql  ) s'appelle le DSN : Data Source Name. C'est généralement le seul qui change en fonction du type de base de données auquel on se connecte.

Testez la présence d'erreurs

Si vous avez renseigné les bonnes informations (nom de l'hôte, de la base, login et mot de passe), rien ne devrait s'afficher à l'écran.

Toutefois, s'il y a une erreur (vous vous êtes trompé de mot de passe ou de nom de base de données, par exemple), PHP risque d'afficher toute la ligne qui pose l'erreur, ce qui inclut le mot de passe !

Vous ne voudrez pas que vos visiteurs puissent voir le mot de passe si une erreur survient lorsque votre site est en ligne. Il est préférable de traiter l'erreur.

En cas d'erreur, PDO renvoie ce qu'on appelle une exception, qui permet de « capturer » l'erreur.

Voici comment je vous propose de faire :

<?php
try
{
    $mysqlClient = new PDO('mysql:host=localhost;dbname=partage_de_recettes;charset=utf8', 'root', '');
}
catch (Exception $e)
{
    die('Erreur : ' . $e->getMessage());
}
?>

Voilà encore un code un peu nouveau pour nous : sans trop rentrer dans le détail, il faut savoir que PHP essaie d'exécuter les instructions à l'intérieur du bloc try  :

  - S'il y a une erreur, il rentre dans le bloc catch et fait ce qu'on lui demande (ici, on arrête l'exécution 
    de la page en affichant un message décrivant l'erreur).

  - Si au contraire tout se passe bien, PHP poursuit l'exécution du code et ne lit pas ce qu'il y a dans le 
    bloc catch  . Votre page PHP ne devrait donc rien afficher pour le moment.

Ouh là ! Tout ça semble bien compliqué, je n'y comprends pas grand-chose ! C'est grave, docteur ?

Non, pas du tout ! En fait, et j'insiste là-dessus, PDO nous fait utiliser des fonctionnalités de PHP que l'on n'a pas étudiées jusqu'à présent (programmation orientée objet, exceptions…). Contentez-vous pour le moment de réutiliser les codes que je vous propose et n'ayez crainte.

Si vous souhaitez en savoir dès maintenant un peu plus sur la gestion des exceptions,  consultez le chapitre sur le sujet dans le cours sur la programmation orientée objet avec PHP.

Effectuez une première requête SQL

Maintenant, nous allons apprendre à lire des informations dans la base de données, puis nous verrons dans le chapitre suivant comment ajouter et modifier des données.

L'objectif ici consiste à récupérer la liste des recettes qui étaient au départ dans une variable sous forme de tableau associatif, et qui sont maintenant stockées dans votre base de données.

Arrive alors le grand moment que vous attendiez tous : on va parler à MySQL. Pour cela, on va faire ce qu'on appelle une requête, en demandant à MySQL de nous dire ce que contient la table  recipes. 

Construisez votre première requête SQL

Comme je vous l'ai dit, le SQL est un langage. C'est lui qui nous permet de communiquer avec MySQL.

Voici la première requête SQL que nous allons utiliser :

SELECT * FROM recipes

Cela peut se traduire par :

« Prendre tout ce qu'il y a dans la table recipes ».

Analysons chaque terme de cette requête.

  - SELECT : en langage SQL, le premier mot indique quel type d'opération doit effectuer MySQL. Dans ce 
    chapitre, nous ne verrons que SELECT  . Ce mot-clé demande à MySQL d'afficher ce que contient une table.

  - * : après le SELECT  , on doit indiquer quels champs MySQL doit récupérer dans la table. Si on n'est 
    intéressé que par les champs « nom » et « possesseur », il faudra taper :
    SELECT nom, possesseur FROM recipes

    Si vous voulez prendre tous les champs, tapez *  . Cette petite étoile peut se traduire par « tout » : 
    « Prendre tout ce qu'il y a… ».

  - FROM : c'est un mot de liaison qui se traduit par « dans ». FROM  fait la liaison entre le nom des champs 
    et le nom de la table.

  - recipes : c'est le nom de la table dans laquelle il faut aller piocher.

Effectuons la requête  à l'aide de l'objet PDO :

<?php
$recipesStatement = $mysqlClient->prepare('SELECT * FROM recipes');
?>

Affichez le résultat d'une requête SQL

Le problème, c'est que $recipesStatement contient quelque chose d'inexploitable directement : un objet PDOStatement. Cet objet va contenir la requête SQL que nous devons exécuter, et par la suite, les informations récupérées en base de données.

Pour récupérer les données, demandez à cet objet d'exécuter la requête SQL et de récupérer toutes les données dans un format "exploitable" pour vous, c'est-à-dire sous forme d'un tableau PHP.

<?php
$recipesStatement->execute();
$recipes = $recipesStatement->fetchAll();
?>

"Fetch" en anglais signifie « va chercher ».

Une fois qu'on a récupéré les données sous forme d'un tableau PHP, on en revient à ce que vous connaissez déjà ! Je vous propose de résumer tout ce que vous venez d'apprendre, de la connexion via PDO à l'affichage du résultat de la requête :

<?php
try {
    // On se connecte à MySQL
    $mysqlClient = new PDO('mysql:host=localhost;dbname=partage_de_recettes;charset=utf8', 'root', 'root');
} catch (Exception $e) {
    // En cas d'erreur, on affiche un message et on arrête tout
    die('Erreur : ' . $e->getMessage());
}
// Si tout va bien, on peut continuer

// On récupère tout le contenu de la table recipes
$sqlQuery = 'SELECT * FROM recipes';
$recipesStatement = $mysqlClient->prepare($sqlQuery);
$recipesStatement->execute();
$recipes = $recipesStatement->fetchAll();

// On affiche chaque recette une à une
foreach ($recipes as $recipe) {
?>
    <p><?php echo $recipe['author']; ?></p>
<?php
}
?>

Affichez seulement le contenu de quelques champs

Avec ce que je vous ai appris, vous devriez être capable d'afficher ce que vous voulez.
Personne ne vous oblige à afficher tous les champs !

Par exemple, si j'avais juste voulu lister les noms des recettes et le nom de l'auteur, j'aurais utilisé la requête SQL suivante :

<?php

$sqlQuery = 'SELECT title, author FROM recipes';

Et... c'est tout, vous récupèrerez seulement les informations dont vous avez besoin, ce qui est plus performant.

Filtrez vos données

Rappelez-vous votre objectif : on souhaite lister les recettes qui sont activées, c'est-à-dire celles dont le champ is_enabled vaut TRUE .

Ça paraît compliqué à faire, non ?

Pas en SQL !

Vous allez voir qu'en modifiant vos requêtes SQL, il est possible de filtrer et trier très facilement vos données. Vous allez ici découvrir les mots-clés suivants du langage SQL :

  - WHERE ;

  - ORDER BY ;

  - LIMIT  .

Grâce au mot-clé WHERE , vous allez pouvoir trier vos données.

Puisque l'on souhaite récupérer uniquement les recettes avec le champ is_enabled à  TRUE , alors la requête au début sera la même qu'avant, mais vous rajouterez  à la fin WHERE is_enabled = TRUE  .

Cela vous donne la requête :

<?php
$sqlQuery = 'SELECT * FROM recipes WHERE is_enabled = TRUE';

Traduction :

« Sélectionner tous les champs de la table recipes lorsque le champ is_enabled est égal à vrai ».

L'utilisation de l'instruction  ORDER BY  a un impact sur la colonne "title". Par exemple, en exécutant la requête  SELECT * FROM recipes ORDER BY title DESC  , les recettes seront correctement triées dans l'ordre décroissant en fonction du titre.

La valeur 1 est équivalente à true et la valeur 0 est équivalente à false. Ainsi, les requêtes  SELECT * FROM recipes WHERE is_enabled = 1  et  SELECT * FROM recipes WHERE is_enabled = true  renverront les mêmes données.

Je n'aborde ici que les bases de l'instruction  SELECT  . Pour en savoir plus, vous pouvez suivre ce cours sur MySQL en complément, voire en parallèle de la lecture de ce chapitre.

Plus vous aurez de conditions et plus la requête devient complexe. Avant d'écrire le code PHP, vous pouvez déjà vérifier que la requête SQL est correcte en la testant dans l'onglet "SQL" de phpMyAdmin, comme je viens de vous le montrer.

Il faut utiliser les mots-clés dans l'ordre que j'ai donné : WHERE  puis ORDER BY  puis LIMIT , sinon MySQL ne comprendra pas votre requête.

Construisez des requêtes en fonction de variables
Les requêtes que vous avez exécutées jusqu'ici étaient simples et effectuaient toujours la même opération. Or, les choses deviennent intéressantes quand on utilise des variables de PHP dans les requêtes.

Identifiez vos variables à l'aide des marqueurs

Les marqueurs sont des identifiants reconnus par PDO pour être remplacés lors de la préparation de la requête par les variables PHP :

En guise d'exemple complet, voici la requête pour retrouver les recettes valides de Mathieu, écrite dans le respect des meilleures pratiques :

<?php
$sqlQuery = 'SELECT * FROM recipes WHERE author = :author AND is_enabled = :is_enabled';

$recipesStatement = $mysqlClient->prepare($sqlQuery);
$recipesStatement->execute([
'author' => 'mathieu.nebra@exemple.com',
'is_enabled' => true,
]);
$recipes = $recipesStatement->fetchAll();
]);
On ne concatène JAMAIS une requête SQL pour passer des variables, au risque de créer des injections SQL ! Le sujet des injections SQL est un peu trop complexe pour être détaillé ici. Si vous souhaitez en apprendre plus à ce sujet, je vous invite à consulter Wikipedia.

Traquez les erreurs

Lorsqu'une requête SQL « plante », bien souvent PHP vous dira qu'il y a eu une erreur à la ligne du fetchAll :

Fatal error: Call to a member function fetchAll() on a non-object in index.php on line 13
Ce n'est pas la ligne du fetchAll qui est en cause : c'est souvent vous qui avez mal écrit votre requête SQL quelques lignes plus haut. Pour afficher des détails sur l'erreur, il faut activer les erreurs lors de la connexion à la base de données via PDO.

Il faut adapter la création de l'objet $mysqlClient pour activer la gestion des erreurs :

<?php
$mysqlClient = new PDO(
    'mysql:host=localhost;dbname=partage_de_recettes;charset=utf8',
    'root',
    '',
    [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION],
);
?>

Désormais, toutes vos requêtes SQL qui comportent des erreurs les afficheront avec un message beaucoup plus clair.

Supposons par exemple que j'écrive mal le nom du champ :

SELECT titlee FROM recipes
L'erreur suivante s'affichera alors :

Unknown column 'titlee' in 'field list'
Si on traduit, cela signifie :

« La colonne titlee  est introuvable dans la liste des champs ».

En effet, le champ s'appelle title .

Lorsque vous avez un problème avec une requête et que vous voulez demander de l'aide, pensez toujours à activer les erreurs lors de la connexion à la base de données comme je viens de vous montrer, cela vous permettra d'avoir un message d'erreur détaillé.

N'oubliez pas que personne ne peut vous aider si vous donnez juste le message par défaut Call to a member function fetchAll() on a non-object  !

Exercez-vous

Maintenant, nous allons appliquer les concepts que vous avez appris sur ce chapitre. Vous allez créer un fichier de configuration MySQL, établir une connexion à la base de données via PDO, et remplacer l'utilisation de tableaux statiques par des requêtes SQL dynamiques pour récupérer les utilisateurs et les recettes depuis la base de données :

Étape 1 : Création du fichier mysql.php dans le dossier config

Commencez par créer un fichier nommé mysql.php dans le dossier config. Ce fichier contiendra les informations nécessaires à la connexion à MySQL via PDO, telles que le nom d'hôte, le nom d'utilisateur, le mot de passe et le nom de la base de données.

Étape 2 : Création du fichier databaseconnect.php

Ensuite, créez un nouveau fichier nommé databaseconnect.php. Ce fichier facilitera la connexion à la base de données via PDO en utilisant les variables définies dans mysql.php.

Étape 3 : Modification du fichier variables.php

Enfin, modifiez le fichier variables.php pour remplacer les tableaux statiques $users et $recipes par l'utilisation de requêtes SQL. Cela permettra de récupérer dynamiquement les utilisateurs et les recettes depuis la base de données à l'aide de PDO.

Vous pouvez retrouver le code modifié dans le dossier P4C3 du GitHub.

En résumé

- Pour dialoguer avec MySQL depuis PHP, on fait appel à l'extension PDO de PHP.

- Avant de dialoguer avec MySQL, il faut s'y connecter. On a besoin de l'adresse IP de la machine où se trouve 
  MySQL, du nom de la base de données ainsi que d'un identifiant et d'un mot de passe.

- Les requêtes SQL commençant par SELECT permettent de récupérer des informations dans une base de données.

- Il faut faire une boucle en PHP pour récupérer ligne par ligne les données renvoyées par MySQL.

- Le langage SQL propose de nombreux outils pour préciser nos requêtes, à l'aide notamment des mots-clés WHERE  
  (filtre), ORDER BY  (tri) et LIMIT  (limitation du nombre de résultats).

- Pour construire une requête en fonction de la valeur d'une variable, on passe par des marqueurs qui 
  permettent d'éviter les dangereuses failles d'injection SQL.

Vous vous demandez comment ajouter, modifier et supprimer des recettes de notre site de partage ? C'est justement ce que nous allons voir dans le prochain chapitre !

##############################################################################################################

